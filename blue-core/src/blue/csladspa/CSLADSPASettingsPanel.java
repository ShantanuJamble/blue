/*
 * CSLADSPASettingsPanel.java
 *
 * Created on January 15, 2008, 7:32 PM
 */
package blue.csladspa;

import blue.event.SimpleDocumentListener;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;

/**
 *
 * @author  SYi
 */
public class CSLADSPASettingsPanel extends javax.swing.JPanel {

    private CSLADSPASettings csladspaSettings;

    /** Creates new form CSLADSPASettingsPanel */
    public CSLADSPASettingsPanel() {
        initComponents();

        nameText.getDocument().addDocumentListener(new SimpleDocumentListener() {

            public void documentChanged(DocumentEvent e) {
                if (csladspaSettings != null) {
                    csladspaSettings.setName(nameText.getText());
                }
            }
        });

        makerText.getDocument().addDocumentListener(new SimpleDocumentListener() {

            public void documentChanged(DocumentEvent e) {
                if (csladspaSettings != null) {
                    csladspaSettings.setName(makerText.getText());
                }
            }
        });

        uniqueIdSpinner.setModel(new SpinnerNumberModel(1, 1, Integer.MAX_VALUE, 1));
        uniqueIdSpinner.addChangeListener(new ChangeListener() {

            public void stateChanged(ChangeEvent e) {
                if (csladspaSettings != null) {
                    csladspaSettings.setUniqueId(
                            ((Integer) uniqueIdSpinner.getValue()).intValue());
                }
            }
        });

        copyrightText.getDocument().addDocumentListener(new SimpleDocumentListener() {

            public void documentChanged(DocumentEvent e) {
                if (csladspaSettings != null) {
                    csladspaSettings.setCopyright(copyrightText.getText());
                }
            }
        });
    }

    public void setCsladspaSettings(CSLADSPASettings csladspaSettings) {
        this.csladspaSettings = null;

        nameText.setText(csladspaSettings.getName());
        makerText.setText(csladspaSettings.getMaker());
        uniqueIdSpinner.setValue(new Integer(csladspaSettings.getUniqueId()));
        copyrightText.setText(csladspaSettings.getCopyright());
        enabledCheckBox.setSelected(csladspaSettings.isEnabled());
        
        portDefinitionTable.setModel(csladspaSettings.getPortDefinitionList());
        
        this.csladspaSettings = csladspaSettings;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        portDefinitionTable = new javax.swing.JTable();
        copyrightText = new javax.swing.JTextField();
        makerText = new javax.swing.JTextField();
        nameText = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        pushUpButton = new javax.swing.JButton();
        pushDownButton = new javax.swing.JButton();
        uniqueIdSpinner = new javax.swing.JSpinner();
        enabledCheckBox = new javax.swing.JCheckBox();

        jLabel1.setText("Name");

        jLabel2.setText("Maker");

        jLabel3.setText("Unique ID");

        jLabel4.setText("Copyright");

        jLabel5.setText("Ports");

        portDefinitionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(portDefinitionTable);

        addButton.setText("+");
        addButton.setToolTipText("Add New Alarm Preset");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText("-");
        removeButton.setToolTipText("Remove Selected Alarm Preset");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        pushUpButton.setText("^");
        pushUpButton.setToolTipText("Push Up Selected Alarm");
        pushUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pushUpButtonActionPerformed(evt);
            }
        });

        pushDownButton.setText("V");
        pushDownButton.setToolTipText("Push Down Selected Alarm");
        pushDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pushDownButtonActionPerformed(evt);
            }
        });

        enabledCheckBox.setText("Enabled");
        enabledCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enabledCheckBoxActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(enabledCheckBox)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel5)
                    .add(layout.createSequentialGroup()
                        .add(addButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(removeButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pushUpButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pushDownButton))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel2)
                            .add(jLabel1)
                            .add(jLabel3)
                            .add(jLabel4))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(copyrightText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                            .add(uniqueIdSpinner, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                            .add(nameText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                            .add(makerText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(enabledCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(nameText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(makerText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(uniqueIdSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(copyrightText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel5)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(addButton)
                    .add(pushDownButton)
                    .add(pushUpButton)
                    .add(removeButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if(csladspaSettings != null) {
            int selected[] = portDefinitionTable.getSelectedRows();
            int index = (selected.length == 0) ? -1 : selected[selected.length - 1];
            csladspaSettings.getPortDefinitionList().addPortDefinition(index);        
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        if(csladspaSettings != null) {
            int selected[] = portDefinitionTable.getSelectedRows();
            
            if(selected.length == 0) {
                return;
            }
            
            int index = selected[selected.length - 1];
            csladspaSettings.getPortDefinitionList().removePortDefinition(index);        
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void pushUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pushUpButtonActionPerformed
        if(csladspaSettings != null) {
            int selected[] = portDefinitionTable.getSelectedRows();
            
            if(selected.length == 0) {
                return;
            }
            
            csladspaSettings.getPortDefinitionList().pushUpPortDefinition(selected);        
        }
    }//GEN-LAST:event_pushUpButtonActionPerformed

    private void pushDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pushDownButtonActionPerformed
        if(csladspaSettings != null) {
            int selected[] = portDefinitionTable.getSelectedRows();
            
            if(selected.length == 0) {
                return;
            }
            
            csladspaSettings.getPortDefinitionList().pushDownPortDefinition(selected);        
        }
    }//GEN-LAST:event_pushDownButtonActionPerformed

    private void enabledCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enabledCheckBoxActionPerformed
        if(csladspaSettings != null) {
            csladspaSettings.setEnabled(enabledCheckBox.isSelected());
        }
}//GEN-LAST:event_enabledCheckBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextField copyrightText;
    private javax.swing.JCheckBox enabledCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField makerText;
    private javax.swing.JTextField nameText;
    private javax.swing.JTable portDefinitionTable;
    private javax.swing.JButton pushDownButton;
    private javax.swing.JButton pushUpButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JSpinner uniqueIdSpinner;
    // End of variables declaration//GEN-END:variables
}
