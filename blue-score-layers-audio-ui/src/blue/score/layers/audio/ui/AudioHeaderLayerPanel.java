/*
 * blue - object composition environment for csound
 * Copyright (C) 2013
 * Steven Yi <stevenyi@gmail.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package blue.score.layers.audio.ui;

import blue.score.layers.Layer;
import blue.score.layers.audio.core.AudioLayer;
import blue.ui.components.IconFactory;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.BorderFactory;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.border.BevelBorder;
import javax.swing.border.Border;

/**
 *
 * @author stevenyi
 */
public class AudioHeaderLayerPanel extends javax.swing.JPanel
        implements PropertyChangeListener {

    private static AudioLayerPanelMenu OTHER_MENU = null;
    private final AudioLayer audioLayer;
    private static final Border border = BorderFactory.createBevelBorder(
            BevelBorder.RAISED);
    private static final Border selectionBorder = BorderFactory.createBevelBorder(
            BevelBorder.RAISED, Color.GREEN, Color.GREEN.darker());

    /**
     * Creates new form AudioHeaderLayerPanel
     */
    public AudioHeaderLayerPanel(AudioLayer layer) {
        initComponents();
        Dimension d = new Dimension(100, Layer.LAYER_HEIGHT);
        this.setSize(d);
        this.setPreferredSize(d);

//        
//        addMouseListener(new MouseAdapter() {
//
//            @Override
//            public void mousePressed(MouseEvent e) {
//                if(e.getClickCount() == 1) {
//                    requestFocus();
//                    editSoundObject();
//                    e.consume();
//                }
//            }
//            
//            
//        });


        setBorder(border);

        this.audioLayer = layer;

        nameLabel.setText(audioLayer.getName());
        muteToggleButton.setSelected(audioLayer.isMuted());
        soloToggleButton.setSelected(audioLayer.isSolo());

        muteToggleButton.putClientProperty(
                "BlueToggleButton.selectColorOverride", Color.ORANGE.darker());
        soloToggleButton.putClientProperty(
                "BlueToggleButton.selectColorOverride", Color.GREEN.darker());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        muteToggleButton = new javax.swing.JToggleButton();
        soloToggleButton = new javax.swing.JToggleButton();
        otherMenuButton = new javax.swing.JButton();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 3, 0, 3));
        jPanel1.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel1.setPreferredSize(new java.awt.Dimension(17, 17));
        jPanel1.setLayout(new java.awt.CardLayout());

        nameLabel.setText(org.openide.util.NbBundle.getMessage(AudioHeaderLayerPanel.class, "AudioHeaderLayerPanel.nameLabel.text")); // NOI18N
        nameLabel.setMinimumSize(new java.awt.Dimension(0, 15));
        jPanel1.add(nameLabel, "label");

        nameText.setText(org.openide.util.NbBundle.getMessage(AudioHeaderLayerPanel.class, "AudioHeaderLayerPanel.nameText.text")); // NOI18N
        nameText.setMinimumSize(new java.awt.Dimension(0, 15));
        nameText.setPreferredSize(new java.awt.Dimension(115, 17));
        nameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTextActionPerformed(evt);
            }
        });
        nameText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                nameTextFocusLost(evt);
            }
        });
        nameText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nameTextKeyPressed(evt);
            }
        });
        jPanel1.add(nameText, "textField");

        add(jPanel1);

        muteToggleButton.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        muteToggleButton.setText(org.openide.util.NbBundle.getMessage(AudioHeaderLayerPanel.class, "AudioHeaderLayerPanel.muteToggleButton.text")); // NOI18N
        muteToggleButton.setFocusPainted(false);
        muteToggleButton.setFocusable(false);
        muteToggleButton.setMargin(new java.awt.Insets(0, 3, 0, 3));
        muteToggleButton.setMaximumSize(new java.awt.Dimension(19, 19));
        muteToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                muteToggleButtonActionPerformed(evt);
            }
        });
        add(muteToggleButton);

        soloToggleButton.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        soloToggleButton.setText(org.openide.util.NbBundle.getMessage(AudioHeaderLayerPanel.class, "AudioHeaderLayerPanel.soloToggleButton.text")); // NOI18N
        soloToggleButton.setFocusPainted(false);
        soloToggleButton.setFocusable(false);
        soloToggleButton.setMargin(new java.awt.Insets(0, 3, 0, 3));
        soloToggleButton.setMaximumSize(new java.awt.Dimension(19, 19));
        soloToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soloToggleButtonActionPerformed(evt);
            }
        });
        add(soloToggleButton);

        otherMenuButton.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        otherMenuButton.setIcon(IconFactory.getDownArrowIcon());
        otherMenuButton.setToolTipText(org.openide.util.NbBundle.getMessage(AudioHeaderLayerPanel.class, "AudioHeaderLayerPanel.otherMenuButton.toolTipText")); // NOI18N
        otherMenuButton.setFocusPainted(false);
        otherMenuButton.setFocusable(false);
        otherMenuButton.setMargin(new java.awt.Insets(5, 0, 4, 0));
        otherMenuButton.setMaximumSize(new java.awt.Dimension(19, 19));
        otherMenuButton.setPreferredSize(new java.awt.Dimension(16, 17));
        otherMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                otherMenuButtonActionPerformed(evt);
            }
        });
        add(otherMenuButton);
    }// </editor-fold>//GEN-END:initComponents

    private void nameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTextActionPerformed
        if (audioLayer == null) {
            return;
        }

        audioLayer.setName(nameText.getText());
        nameLabel.setText(audioLayer.getName());

        ((CardLayout) jPanel1.getLayout()).show(jPanel1, "label");
    }//GEN-LAST:event_nameTextActionPerformed

    private void nameTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nameTextFocusLost
        ((CardLayout) jPanel1.getLayout()).show(jPanel1, "label");
    }//GEN-LAST:event_nameTextFocusLost

    private void nameTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            ((CardLayout) jPanel1.getLayout()).show(jPanel1, "label");
        }
    }//GEN-LAST:event_nameTextKeyPressed

    private void muteToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_muteToggleButtonActionPerformed
        audioLayer.setMuted(muteToggleButton.isSelected());
    }//GEN-LAST:event_muteToggleButtonActionPerformed

    private void soloToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soloToggleButtonActionPerformed
        audioLayer.setSolo(soloToggleButton.isSelected());
    }//GEN-LAST:event_soloToggleButtonActionPerformed

    private void otherMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_otherMenuButtonActionPerformed

        if (OTHER_MENU == null) {
            OTHER_MENU = new AudioLayerPanelMenu();
        }
        OTHER_MENU.setAudioLayer(this.audioLayer);
        OTHER_MENU.show(otherMenuButton, 0, otherMenuButton.getHeight());

    }//GEN-LAST:event_otherMenuButtonActionPerformed

    public void editName() {
        if (audioLayer == null) {
            return;
        }

        nameText.setText(audioLayer.getName());
        ((CardLayout) jPanel1.getLayout()).show(jPanel1, "textField");
        nameText.requestFocusInWindow();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToggleButton muteToggleButton;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameText;
    private javax.swing.JButton otherMenuButton;
    private javax.swing.JToggleButton soloToggleButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void removeNotify() {
        super.removeNotify();
        if (this.audioLayer != null) {
            this.audioLayer.removePropertyChangeListener(this);
        }
    }

    @Override
    public void addNotify() {
        super.addNotify();
        if (this.audioLayer != null) {
            this.audioLayer.addPropertyChangeListener(this);
        }
    }

    public void setSelected(boolean val) {
        setBorder(val ? selectionBorder : border);
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getSource() == this.audioLayer) {
            String propName = evt.getPropertyName();

            switch (propName) {
                case "heightIndex":
                    revalidate();
                    break;
                case "name":
                    nameText.setText(audioLayer.getName());
                    nameLabel.setText(audioLayer.getName());
                    break;
            }
        }
    }

    static class AudioLayerPanelMenu extends JPopupMenu {

        AudioLayer audioLayer = null;
        JMenuItem[] heightItems = new JMenuItem[9];

        public AudioLayerPanelMenu() {
            super();

            JMenu layerHeightMenu = new JMenu("Layer Height");

            ActionListener al = new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    if (audioLayer == null) {
                        return;
                    }

                    int heightIndex = Integer.parseInt(ae.getActionCommand()) - 1;

                    audioLayer.setHeightIndex(heightIndex);
                }
            };

            for (int i = 0; i < heightItems.length; i++) {
                heightItems[i] = new JMenuItem(Integer.toString(i + 1));
                heightItems[i].addActionListener(al);

                layerHeightMenu.add(heightItems[i]);
            }
            this.add(layerHeightMenu);
        }

        public void setAudioLayer(AudioLayer sLayer) {
            this.audioLayer = sLayer;
            setupHeightMenu();
        }

        private void setupHeightMenu() {
            if (audioLayer == null) {
                return;
            }

            int index = audioLayer.getHeightIndex();

            for (int i = 0; i < heightItems.length; i++) {
                heightItems[i].setEnabled(i != index);
            }
        }
    }
}
