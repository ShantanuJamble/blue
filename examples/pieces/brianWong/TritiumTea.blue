<blueData version='2.3.2'>
  <projectProperties>
    <title>Tritium Tea</title>
    <author>Brian Wong</author>
    <notes>Tritium Tea is written in three tritave-based equal temperament tunings, 3h6TET, 3h8TET, and 3h13TET (usually known as Bohlen-Pierce 13TET). This is my personal equal temperament notation, which is simply of the form &lt;interval&gt;h&lt;divisions&gt;TET. It is similar to the general equal temperament presented by Kees van Prooijen in 1978, but easier to type as it does make use of subscript and superscript notation. </notes>
    <sampleRate>48000</sampleRate>
    <ksmps>50</ksmps>
    <channels>2</channels>
    <useZeroDbFS>true</useZeroDbFS>
    <zeroDbFS>1</zeroDbFS>
    <diskSampleRate>96000</diskSampleRate>
    <diskKsmps>1</diskKsmps>
    <diskChannels>2</diskChannels>
    <diskUseZeroDbFS>true</diskUseZeroDbFS>
    <diskZeroDbFS>1</diskZeroDbFS>
    <useAudioOut>true</useAudioOut>
    <useAudioIn>false</useAudioIn>
    <useMidiIn>false</useMidiIn>
    <useMidiOut>false</useMidiOut>
    <noteAmpsEnabled>true</noteAmpsEnabled>
    <outOfRangeEnabled>true</outOfRangeEnabled>
    <warningsEnabled>true</warningsEnabled>
    <benchmarkEnabled>true</benchmarkEnabled>
    <advancedSettings></advancedSettings>
    <completeOverride>false</completeOverride>
    <fileName></fileName>
    <askOnRender>false</askOnRender>
    <diskNoteAmpsEnabled>true</diskNoteAmpsEnabled>
    <diskOutOfRangeEnabled>true</diskOutOfRangeEnabled>
    <diskWarningsEnabled>true</diskWarningsEnabled>
    <diskBenchmarkEnabled>true</diskBenchmarkEnabled>
    <diskAdvancedSettings></diskAdvancedSettings>
    <diskCompleteOverride>false</diskCompleteOverride>
    <diskAlwaysRenderEntireProject>false</diskAlwaysRenderEntireProject>
  </projectProperties>
  <arrangement>
    <instrumentAssignment arrangementId='1' isEnabled='true'>
      <instrument type='blue.orchestra.GenericInstrument'>
        <name>Ringer-01</name>
        <comment>Ringer v1.0 - Ring Modulation synth by Brian Wong, 2010

This version has no filter</comment>
        <globalOrc>gi_sine_&lt;INSTR_ID&gt;	ftgenonce 0,0,65536,10,1	; basic sine wave
; cpstuni tuning table for 2h12TET
gi_t2h12TET_&lt;INSTR_ID&gt; 	ftgenonce 0,0,32,-2,12,2,261.62558,60,1.0,1.05946309,1.12246205,1.18920712,1.25992105,1.33493985,1.41421356,1.49830708,1.58740105,1.68179283,1.78179744,1.88774863,2.0
; pseudoharmonic spectrum for 2h12TET from 2nd to 13th pseudoharmonic
gi_s2h12TET_&lt;INSTR_ID&gt;	ftgenonce 0,0,65536,9,1,.5,0,1.49830708,.333,0,2,.25,0,2.5198421,.2,0,2.99661416,.1666,0,3.563594,0.142857,0,4,.125,0,4.4898482,.111,0,5.0396842,.1,0,5.65685424,.0909,0,5.99322832,.08333,0,6.3496042,0.076923,0
; cpstuni tuning table for 3h13TET
gi_t3h13TET_&lt;INSTR_ID&gt; 	ftgenonce 0,0,32,-2,13,3,110,50,1.0,1.08818224,1.18414059,1.28856077,1.40218895,1.5283712,1.66038886,1.80680567,1.9661385,2.13951194,2.32817890,2.53348294,2.75689115,3.0
; pseudoharmonic spectrum for 3h13TET - odd numbered pseudo-harmonics from from 3 to 13
gi_s3h13TET_&lt;INSTR_ID&gt;	ftgenonce 0,0,65536,9,1,.33,0,1.6889886266,.2,0,2.4090742266,.142857,0,3,.1111,0,3.675854866,.0909,0,4.4277036266,0.077,0
; cpstuni tuning table for 3h6TET
gi_t3h6TET_&lt;INSTR_ID&gt; 	ftgenonce 0,0,32,-2,6,3,110,50,1.0,1.20093696,1.44224957,1.73205081,2.08008382,2.49804953,3.0
; spectrum for 3hET - perfect harmonic 3h
gi_s3hTET_&lt;INSTR_ID&gt;	ftgenonce 0,0,65536,9,1,.33,0,9,.11,0,27,.125,0
; spectrum0 for 3h6TET
gi_s3h6TET_&lt;INSTR_ID&gt;	ftgenonce 0,0,65536,9,1,.5,0,1.665366353,.25,0,2.30940108,.037,0
; cpstuni tuning table for 3h8TET
gi_t3h8TET_&lt;INSTR_ID&gt; 	ftgenonce 0,0,32,-2,8,3,110,50,1.0,1.14720269,1.31607401,1.50980365,1.73205081,1.98701335,2.27950706,2.61505663,3.0
; spectrum0 for 3h8TET 
gi_s3h8TET_&lt;INSTR_ID&gt;	ftgenonce 0,0,65536,9,1,.5,0,1.743371,.25,0,2.3094,.125,0,3.0393427466,.0625,0
</globalOrc>
        <globalSco></globalSco>
        <instrumentText>iamp = ampdbfs(p4)					; amplitude (effective range of -63 to 1)
if (p6==0) then						; subpatch 0 : 2h12TET (standard tuning) pseudoharmonics 1 to 13
    imf = 2						; set modulator base frequency
    imodfn = gi_s2h12TET_&lt;INSTR_ID&gt;			; set modulator partials table
    itunfn = gi_t2h12TET_&lt;INSTR_ID&gt;			; set tuning table
elseif (p6==1) then					; subpatch 1 : 3h13TET (Bohlen-Pierce) pseudoharmonics 3 to 13
    imf = 3						; set modulator base frequency
    imodfn = gi_s3h13TET_&lt;INSTR_ID&gt;			; set tuning table
    itunfn = gi_t3h13TET_&lt;INSTR_ID&gt;			; set tuning table
elseif (p6==2) then					; subpatch 2 : 3h13TET (Bohlen-Pierce) perfect 3h
    imf = 3						; set modulator base frequency
    imodfn = gi_s3hTET_&lt;INSTR_ID&gt;			; set tuning table
    itunfn = gi_t3h13TET_&lt;INSTR_ID&gt;			; set tuning table
elseif (p6==3) then					; subpatch 1 : 3h6TET pseudoharmonics spectrum0
    imf = 3						; set modulator base frequency
    imodfn = gi_s3h6TET_&lt;INSTR_ID&gt;			; set tuning table
    itunfn = gi_t3h6TET_&lt;INSTR_ID&gt;			; set tuning table
elseif (p6==4) then					; subpatch 1 : 3h6TET perfect 3h
    imf = 3						; set modulator base frequency
    imodfn = gi_s3hTET_&lt;INSTR_ID&gt;			; set tuning table
    itunfn = gi_t3h6TET_&lt;INSTR_ID&gt;			; set tuning table
elseif (p6==5) then					; subpatch 1 : 3h6TET perfect 3h
    imf = 3						; set modulator base frequency
    imodfn = gi_s3h8TET_&lt;INSTR_ID&gt;			; set tuning table
    itunfn = gi_t3h8TET_&lt;INSTR_ID&gt;			; set tuning table
endif
icf cpstuni p5,itunfn					; carrier frequency
invat = p9						; amplitude envelope attack time
invac = p10 						; amplitude envelope attack curve
invpa = p11						; amplitude envelope point a
invta = p12						; amplitude envelope time a
invxa = p13						; amplitude envelope curve a
invpb = p14						; amplitude envelope point b
invxb = p15						; amplitude envelope curve b
invpc = p16						; amplitude envelope point c
invtc = p17						; amplitude envelope time c
invxc = p18						; amplitude envelope curve c
knv transeg .00001,invat,invac,invpa,invta,invxa,invpb,p3-invta-invat-invtc,invxb,invpc,invtc,invxc,.00001 ; amplitude envelope
imat = p19						; modulation envelope attack time
imac = p20 						; modulation envelope attack curve
impa = p21						; modulation envelope point a
imta = p22						; modulation envelope time a
imxa = p23						; modulation envelope curve a
impb = p24						; modulation envelope point b
imxb = p25						; modulation envelope curve b
impc = p26						; modulation envelope point c
imtc = p27						; modulation envelope time c
imxc = p28						; modulation envelope curve c
kmv transeg .00001,imat,imac,impa,imta,imxa,impb,p3-imta-imat-imtc,imxb,impc,imtc,imxc,.00001 ; modulation envelope
ibnda = p29						; bend point a
ibndb = p30						; bend point b
ibndc = p31						; bend point c
ibndt = p32						; bend time
ibndu = p33						; 1st bend curve 
ibndv = p34						; 2nd bend curve
kcf transeg ibnda, ibndt, ibndu, ibndb, (p3-ibndt), ibndv, ibndc	; bend envelope
kcf = kcf * icf						; apply bend to carrier frequency
acarr poscil3  1, kcf, gi_sine_&lt;INSTR_ID&gt;       	; CARRIER
amod  poscil3  1, kcf*imf, imodfn			; MODULATOR
aoutm = acarr*amod*kmv       				; MODULATED SIGNAL
aoutnm = acarr*(1-kmv)					; unmodulated signal
aout = knv*(aoutm+aoutnm)*iamp				; mix signals
aout dcblock aout
aout butlp aout,17000
kpan line p7,p3,p8					; panning line
krtl = sqrt(2) / 2 * cos(kpan) + sin(kpan) 		; CONSTANT POWER PANNING
krtr = sqrt(2) / 2 * cos(kpan) - sin(kpan)		; FROM C.ROADS &quot;CM TUTORIAL&quot; pp460
aLeft =	aout * krtl					; assign left channel
aRight = aout * krtr					; assign right channel
blueMixerOut aLeft,aRight	       			; OUTPUT
</instrumentText>
        <opcodeList/>
      </instrument>
    </instrumentAssignment>
    <instrumentAssignment arrangementId='2' isEnabled='true'>
      <instrument type='blue.orchestra.GenericInstrument'>
        <name>Ringer-02</name>
        <comment>Ringer v1.1 - Ring Modulation synth - by Brian Wong, 2010
This version has butterlp filter</comment>
        <globalOrc>gi_sine_&lt;INSTR_ID&gt;	ftgenonce 0,0,65536,10,1	; basic sine wave
; cpstuni tuning table for 2h12TET
gi_t2h12TET_&lt;INSTR_ID&gt; 	ftgenonce 0,0,32,-2,12,2,261.62558,60,1.0,1.05946309,1.12246205,1.18920712,1.25992105,1.33493985,1.41421356,1.49830708,1.58740105,1.68179283,1.78179744,1.88774863,2.0
; pseudoharmonic spectrum for 2h12TET from 2nd to 13th pseudoharmonic
gi_s2h12TET_&lt;INSTR_ID&gt;	ftgenonce 0,0,65536,9,1,.5,0,1.49830708,.333,0,2,.25,0,2.5198421,.2,0,2.99661416,.1666,0,3.563594,0.142857,0,4,.125,0,4.4898482,.111,0,5.0396842,.1,0,5.65685424,.0909,0,5.99322832,.08333,0,6.3496042,0.076923,0
; cpstuni tuning table for 3h13TET
gi_t3h13TET_&lt;INSTR_ID&gt; 	ftgenonce 0,0,32,-2,13,3,110,50,1.0,1.08818224,1.18414059,1.28856077,1.40218895,1.5283712,1.66038886,1.80680567,1.9661385,2.13951194,2.32817890,2.53348294,2.75689115,3.0
; pseudoharmonic spectrum for 3h13TET - odd numbered pseudo-harmonics from from 3 to 13
gi_s3h13TET_&lt;INSTR_ID&gt;	ftgenonce 0,0,65536,9,1,.33,0,1.6889886266,.2,0,2.4090742266,.142857,0,3,.1111,0,3.675854866,.0909,0,4.4277036266,0.077,0
; cpstuni tuning table for 3h6TET
gi_t3h6TET_&lt;INSTR_ID&gt; 	ftgenonce 0,0,32,-2,6,3,110,50,1.0,1.20093696,1.44224957,1.73205081,2.08008382,2.49804953,3.0
; spectrum for 3hET - perfect harmonic 3h
gi_s3hTET_&lt;INSTR_ID&gt;	ftgenonce 0,0,65536,9,1,.5,0,9,.25,0,27,.125,0
; spectrum0 for 3h6TET - pseudo odd harmonics 3 to 7
gi_s3h6TET_&lt;INSTR_ID&gt;	ftgenonce 0,0,65536,9,1,.33,0,1.6653663533,.2,0,2.3094,.14,0
; cpstuni tuning table for 3h8TET
gi_t3h8TET_&lt;INSTR_ID&gt; 	ftgenonce 0,0,32,-2,8,3,110,50,1.0,1.14720269,1.31607401,1.50980365,1.73205081,1.98701335,2.27950706,2.61505663,3.0
</globalOrc>
        <globalSco></globalSco>
        <instrumentText>iamp = ampdbfs(p4)					; amplitude (effective range of -63 to 1)
if (p6==0) then						; subpatch 0 : 2h12TET (standard tuning) pseudoharmonics 1 to 13
    imf = 2						; set modulator base frequency
    imodfn = gi_s2h12TET_&lt;INSTR_ID&gt;			; set modulator partials table
    itunfn = gi_t2h12TET_&lt;INSTR_ID&gt;			; set tuning table
elseif (p6==1) then					; subpatch 1 : 3h13TET (Bohlen-Pierce) pseudoharmonics 3 to 13
    imf = 3						; set modulator base frequency
    imodfn = gi_s3h13TET_&lt;INSTR_ID&gt;			; set tuning table
    itunfn = gi_t3h13TET_&lt;INSTR_ID&gt;			; set tuning table
elseif (p6==2) then					; subpatch 2 : 3h13TET (Bohlen-Pierce) perfect 3h
    imf = 3						; set modulator base frequency
    imodfn = gi_s3hTET_&lt;INSTR_ID&gt;			; set tuning table
    itunfn = gi_t3h13TET_&lt;INSTR_ID&gt;			; set tuning table
elseif (p6==3) then					; subpatch 1 : 3h6TET pseudoharmonics spectrum0
    imf = 3						; set modulator base frequency
    imodfn = gi_s3h6TET_&lt;INSTR_ID&gt;			; set tuning table
    itunfn = gi_t3h6TET_&lt;INSTR_ID&gt;			; set tuning table
elseif (p6==4) then					; subpatch 1 : 3h6TET perfect 3h
    imf = 3						; set modulator base frequency
    imodfn = gi_s3hTET_&lt;INSTR_ID&gt;			; set tuning table
    itunfn = gi_t3h6TET_&lt;INSTR_ID&gt;			; set tuning table
elseif (p6==6) then					; subpatch 1 : 3h6TET perfect 3h
    imf = 3						; set modulator base frequency
    imodfn = gi_s3hTET_&lt;INSTR_ID&gt;			; set tuning table
    itunfn = gi_t3h8TET_&lt;INSTR_ID&gt;			; set tuning table
endif
icf cpstuni p5,itunfn					; carrier frequency
invat = p9						; amplitude envelope attack time
invac = p10 						; amplitude envelope attack curve
invpa = p11						; amplitude envelope point a
invta = p12						; amplitude envelope time a
invxa = p13						; amplitude envelope curve a
invpb = p14						; amplitude envelope point b
invxb = p15						; amplitude envelope curve b
invpc = p16						; amplitude envelope point c
invtc = p17						; amplitude envelope time c
invxc = p18						; amplitude envelope curve c
knv transeg .00001,invat,invac,invpa,invta,invxa,invpb,p3-invta-invat-invtc,invxb,invpc,invtc,invxc,.00001 ; amplitude envelope
imat = p19						; modulation envelope attack time
imac = p20 						; modulation envelope attack curve
impa = p21						; modulation envelope point a
imta = p22						; modulation envelope time a
imxa = p23						; modulation envelope curve a
impb = p24						; modulation envelope point b
imxb = p25						; modulation envelope curve b
impc = p26						; modulation envelope point c
imtc = p27						; modulation envelope time c
imxc = p28						; modulation envelope curve c
kmv transeg .00001,imat,imac,impa,imta,imxa,impb,p3-imta-imat-imtc,imxb,impc,imtc,imxc,.00001 ; modulation envelope
ibnda = p29						; bend point a
ibndb = p30						; bend point b
ibndc = p31						; bend point c
ibndt = p32						; bend time
ibndu = p33						; 1st bend curve 
ibndv = p34						; 2nd bend curve
kcf transeg ibnda, ibndt, ibndu, ibndb, (p3-ibndt), ibndv, ibndc	; bend envelope
kcf = kcf * icf						; apply bend to carrier frequency
acarr poscil3  1, kcf, gi_sine_&lt;INSTR_ID&gt;       	; CARRIER
amod  poscil3  1, kcf*imf, imodfn			; MODULATOR
aoutm = acarr*amod*kmv       				; MODULATED SIGNAL
aoutnm = acarr*(1-kmv)					; unmodulated signal
aout = knv*(aoutm+aoutnm)*iamp				; mix signals
aout dcblock aout
aout butlp aout,6500
kpan line p7,p3,p8					; panning line
krtl = sqrt(2) / 2 * cos(kpan) + sin(kpan) 		; CONSTANT POWER PANNING
krtr = sqrt(2) / 2 * cos(kpan) - sin(kpan)		; FROM C.ROADS &quot;CM TUTORIAL&quot; pp460
aLeft =	aout * krtl					; assign left channel
aRight = aout * krtr					; assign right channel
blueMixerOut aLeft,aRight	       			; OUTPUT
</instrumentText>
        <opcodeList/>
      </instrument>
    </instrumentAssignment>
    <instrumentAssignment arrangementId='3' isEnabled='true'>
      <instrument type='blue.orchestra.BlueSynthBuilder' editEnabled='true'>
        <name>Tapout</name>
        <comment>Tapout v1.0 -by Brian Wong, 2010.  An algorithmic gesture FM synth, based on Csound book instrument 1703, this instrument uses retriggering.
</comment>
        <globalOrc>gi_sine_&lt;INSTR_ID&gt;	ftgenonce 0,0,16384,10,1
gi_tri_&lt;INSTR_ID&gt;	ftgenonce 0,0,8192,5,1,2,120,60,1,1,0.001,1
</globalOrc>
        <globalSco/>
        <instrumentText>isinwav = gi_sine_&lt;INSTR_ID&gt;
itriwav = gi_tri_&lt;INSTR_ID&gt;
kcar = p9
kmod = p10
kndx transeg p11,p3,p13,p11*p12		
knv	expon	1,p3,.33333333
kphrase	linen	1, p3*.5, p3, p3*.5	; gradual rise&amp;fall in amp over p3
kdur	line	.1, p3, 1		; kdur changes from .1 to 1 over p3
start:	timout	0, i(kdur), continue	; branch to continue for kdur secs,
 	reinit	start			; then reinit all, beginning with
continue:				; ... the timout
kgate	poscil3	 .3, p4, itriwav	; envshape; dur fixed at .1, p4 = vib freq in Hz
asig 	foscili	 kgate, p6*knv, kcar, kmod, kndx, isinwav
;asig	poscil3	 kgate, p6*knv, isinwav	; make a 1 kHz beep tone, using f1 p6 = fundamental frequency
a1 = asig*kphrase*(p5 / 32768)			; apply the overall phrase dynamic p5 = amplitude
kpan line p7,p3,p8				; panning line
krtl     =	sqrt(2) / 2 * cos(kpan) + sin(kpan) 	; CONSTANT POWER PANNING
krtr     =      sqrt(2) / 2 * cos(kpan) - sin(kpan)	; FROM C.ROADS &quot;CM TUTORIAL&quot; pp460
aLeft 	=	a1 * krtl				; assign left channel
aRight	=	a1 * krtr				; assign right channel
blueMixerOut aLeft,aRight</instrumentText>
        <alwaysOnInstrumentText></alwaysOnInstrumentText>
        <graphicInterface editEnabled='true'/>
        <bsbParameterList/>
        <presetGroup name='Presets'/>
        <opcodeList/>
      </instrument>
    </instrumentAssignment>
  </arrangement>
  <mixer>
    <enabled>true</enabled>
    <extraRenderTime>1.5</extraRenderTime>
    <channelList list='channels'>
      <channel>
        <name>1</name>
        <outChannel>Master</outChannel>
        <level>0.0</level>
        <muted>false</muted>
        <solo>false</solo>
        <effectsChain bin='pre'/>
        <effectsChain bin='post'/>
        <parameter uniqueId='-1365060600' name='Volume' label='dB' min='-96.0' max='12.0' resolution='-1.0' automationEnabled='true' value='0.0'>
          <line name='' version='2' max='12.0' min='-96.0' resolution='-1.0' color='-14623488' rightBound='false' endPointsLinked='false'>
            <linePoint x='0.0' y='0.0'/>
            <linePoint x='63.0' y='0.0'/>
            <linePoint x='66.0' y='-20.0'/>
            <linePoint x='66.0' y='0.0'/>
            <linePoint x='112.0' y='0.0'/>
            <linePoint x='116.0' y='-20.0'/>
            <linePoint x='121.0' y='-20.0'/>
            <linePoint x='121.0' y='0.0'/>
          </line>
        </parameter>
      </channel>
      <channel>
        <name>2</name>
        <outChannel>Master</outChannel>
        <level>-10.0</level>
        <muted>false</muted>
        <solo>false</solo>
        <effectsChain bin='pre'/>
        <effectsChain bin='post'/>
        <parameter uniqueId='-1444023782' name='Volume' label='dB' min='-96.0' max='12.0' resolution='-1.0' automationEnabled='true' value='6.3'>
          <line name='' version='2' max='12.0' min='-96.0' resolution='-1.0' color='-14623488' rightBound='false' endPointsLinked='false'>
            <linePoint x='0.0' y='-10.0'/>
            <linePoint x='19.75' y='6.3'/>
            <linePoint x='56.75' y='6.3'/>
            <linePoint x='63.75' y='-10.0'/>
            <linePoint x='66.0' y='-10.0'/>
            <linePoint x='66.0' y='3.0'/>
            <linePoint x='112.0' y='3.0'/>
            <linePoint x='116.0' y='-32.999996'/>
            <linePoint x='121.0' y='-33.0'/>
            <linePoint x='121.0' y='4.5'/>
          </line>
        </parameter>
      </channel>
      <channel>
        <name>3</name>
        <outChannel>Master</outChannel>
        <level>0.0</level>
        <muted>false</muted>
        <solo>false</solo>
        <effectsChain bin='pre'/>
        <effectsChain bin='post'/>
        <parameter uniqueId='-1365060606' name='Volume' label='dB' min='-96.0' max='12.0' resolution='-1.0' automationEnabled='false' value='0.0'>
          <line name='' version='2' max='12.0' min='-96.0' resolution='-1.0' color='-8355712' rightBound='false' endPointsLinked='false'>
            <linePoint x='0.0' y='0.0'/>
          </line>
        </parameter>
      </channel>
    </channelList>
    <channelList list='subChannels'/>
    <channel>
      <name>Master</name>
      <outChannel>Master</outChannel>
      <level>12.0</level>
      <muted>false</muted>
      <solo>false</solo>
      <effectsChain bin='pre'>
        <effect>
          <name>Freeverbw</name>
          <enabled>true</enabled>
          <numIns>2</numIns>
          <numOuts>2</numOuts>
          <code>arev1,arev2 freeverb ain1,ain2,&lt;rsize&gt;,&lt;hfdamp&gt;
aout1 = (arev1*&lt;level&gt;)+(ain1*(1-&lt;level&gt;))/2
aout2 = (arev2*&lt;level&gt;)+(ain2*(1-&lt;level&gt;))/2
</code>
          <comments>A basic wrapper for the freeverb opcode. by Brian Wong, 2009</comments>
          <opcodeList/>
          <graphicInterface editEnabled='true'>
            <bsbObject type='blue.orchestra.blueSynthBuilder.BSBKnob' version='2'>
              <objectName>hfdamp</objectName>
              <x>182</x>
              <y>78</y>
              <automationAllowed>true</automationAllowed>
              <minimum>0.0</minimum>
              <maximum>1.0</maximum>
              <value>0.6084609</value>
              <knobWidth>60</knobWidth>
              <randomizable>true</randomizable>
            </bsbObject>
            <bsbObject type='blue.orchestra.blueSynthBuilder.BSBLabel'>
              <objectName>roomsize</objectName>
              <x>105</x>
              <y>157</y>
              <label>Room Size</label>
            </bsbObject>
            <bsbObject type='blue.orchestra.blueSynthBuilder.BSBLabel'>
              <objectName>bsbObj0</objectName>
              <x>185</x>
              <y>157</y>
              <label>HF Damp</label>
            </bsbObject>
            <bsbObject type='blue.orchestra.blueSynthBuilder.BSBKnob' version='2'>
              <objectName>rsize</objectName>
              <x>105</x>
              <y>78</y>
              <automationAllowed>true</automationAllowed>
              <minimum>0.0</minimum>
              <maximum>1.0</maximum>
              <value>0.75918686</value>
              <knobWidth>60</knobWidth>
              <randomizable>true</randomizable>
            </bsbObject>
            <bsbObject type='blue.orchestra.blueSynthBuilder.BSBKnob' version='2'>
              <objectName>level</objectName>
              <x>27</x>
              <y>78</y>
              <automationAllowed>true</automationAllowed>
              <minimum>0.0</minimum>
              <maximum>1.0</maximum>
              <value>0.85619444</value>
              <knobWidth>60</knobWidth>
              <randomizable>true</randomizable>
            </bsbObject>
            <bsbObject type='blue.orchestra.blueSynthBuilder.BSBLabel'>
              <objectName></objectName>
              <x>43</x>
              <y>156</y>
              <label>Level</label>
            </bsbObject>
            <bsbObject type='blue.orchestra.blueSynthBuilder.BSBLabel'>
              <objectName></objectName>
              <x>44</x>
              <y>19</y>
              <label>&lt;html&gt;&lt;font size=&quot;+3&quot; face=&quot;Comic Sans MS&quot; color=rgb(150,180,127)&gt;Freeverbw&lt;/font&gt;&lt;/htmL&gt;</label>
            </bsbObject>
          </graphicInterface>
          <bsbParameterList>
            <parameter uniqueId='-1444023617' name='hfdamp' label='' min='0.0' max='1.0' resolution='-1.0' automationEnabled='false' value='0.6084609'>
              <line name='' version='2' max='1.0' min='0.0' resolution='-1.0' color='-14623488' rightBound='false' endPointsLinked='false'>
                <linePoint x='0.0' y='0.6084609'/>
                <linePoint x='66.0' y='0.56'/>
                <linePoint x='66.0' y='0.99'/>
              </line>
            </parameter>
            <parameter uniqueId='-1444023613' name='level' label='' min='0.0' max='1.0' resolution='-1.0' automationEnabled='false' value='0.85619444'>
              <line name='' version='2' max='1.0' min='0.0' resolution='-1.0' color='-14623488' rightBound='false' endPointsLinked='false'>
                <linePoint x='0.0' y='0.85619444'/>
              </line>
            </parameter>
            <parameter uniqueId='-1444023615' name='rsize' label='' min='0.0' max='1.0' resolution='-1.0' automationEnabled='false' value='0.75918686'>
              <line name='' version='2' max='1.0' min='0.0' resolution='-1.0' color='-8355712' rightBound='false' endPointsLinked='false'>
                <linePoint x='0.0' y='0.75918686'/>
              </line>
            </parameter>
          </bsbParameterList>
        </effect>
      </effectsChain>
      <effectsChain bin='post'/>
      <parameter uniqueId='1243710980' name='Volume' label='dB' min='-96.0' max='12.0' resolution='-1.0' automationEnabled='false' value='12.0'>
        <line name='' version='2' max='12.0' min='-96.0' resolution='-1.0' color='-8355712' rightBound='false' endPointsLinked='false'>
          <linePoint x='0.0' y='12.0'/>
        </line>
      </parameter>
    </channel>
  </mixer>
  <tables>
</tables>
  <soundObjectLibrary/>
  <globalOrcSco>
    <globalOrc>
</globalOrc>
    <globalSco></globalSco>
  </globalOrcSco>
  <opcodeList/>
  <liveData>
    <commandLine>csound -Wdo devaudio -L stdin</commandLine>
    <commandLineEnabled>false</commandLineEnabled>
    <commandLineOverride>false</commandLineOverride>
    <liveObjectBins columns='1' rows='8'>
      <bin>
        <null/>
        <null/>
        <null/>
        <null/>
        <null/>
        <null/>
        <null/>
        <null/>
      </bin>
    </liveObjectBins>
    <liveObjectSetList/>
    <repeat>4</repeat>
    <tempo>60</tempo>
  </liveData>
  <score>
    <tempo>
      <enabled>false</enabled>
      <visible>false</visible>
      <line name='' version='2' max='240.0' min='30.0' resolution='-1.0' color='-8355712' rightBound='false' endPointsLinked='false'>
        <linePoint x='0.0' y='60.0'/>
      </line>
    </tempo>
    <timeState>
      <pixelSecond>16</pixelSecond>
      <snapEnabled>true</snapEnabled>
      <snapValue>1.0</snapValue>
      <timeDisplay>0</timeDisplay>
      <timeUnit>5</timeUnit>
    </timeState>
    <noteProcessorChain/>
    <soundObject type='blue.soundObject.PolyObject'>
      <subjectiveDuration>2.0</subjectiveDuration>
      <startTime>0.0</startTime>
      <name>root</name>
      <backgroundColor>-10066279</backgroundColor>
      <timeBehavior>0</timeBehavior>
      <noteProcessorChain/>
      <isRoot>true</isRoot>
      <defaultHeightIndex>0</defaultHeightIndex>
      <timeState>
        <pixelSecond>64</pixelSecond>
        <snapEnabled>false</snapEnabled>
        <snapValue>1.0</snapValue>
        <timeDisplay>0</timeDisplay>
        <timeUnit>5</timeUnit>
      </timeState>
      <soundLayer name='' muted='false' solo='false' heightIndex='0'>
        <noteProcessorChain/>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>15.0</startTime>
          <name>Ringer_0a</name>
          <backgroundColor>-11495836</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_0 - 3h13TET
scoreText_0 = &quot;&quot;                              	# scoreText_0 is cleared
bart_0 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_0 = [&apos;e&apos;,&apos;d&apos;,&apos;f&apos;]			# rhythm
bpb_0 = len(rhythmr0_0)                         # beats per bar
beat_0 = bart_0/bpb_0                           # time of beat in seconds
notetime_0 = 0                                  # set intitial note start time
durlist_0 = [1.66,1.66,1.66]			# note duration list
notelist_0 = [60,57,56]				# note list
splist_0 = [1,1,1]				# subpatch list
panalist_0 = [-.5,-.5,-.45]			# pana list
panblist_0 = [-.45,-.55,-.5]			# panb list
nvatlist_0 = [.55,.55,.55]			# nvat list
nvaclist_0 = [0,0,0]				# nvac list
nvpalist_0 = [1,1,1]				# nvpa list
nvtalist_0 = [.55,.55,.55]			# nvta list
nvxalist_0 = [0,0,0]			# nvxa list
nvpblist_0 = [1,1,1]			# nvpb list
nvxblist_0 = [0,0,0]			# nvxb list
nvpclist_0 = [.7,.7,.7]			# nvpc list
nvtclist_0 = [.3,.3,.3]			# nvtc list
nvxclist_0 = [2,2,2]			# nvxc list
matlist_0 = [.55,.55,.55]		# mat list
maclist_0 = [0,0,0]			# mac list
mpalist_0 = [.3,.3,.3]			# mpa list
mtalist_0 = [.55,.55,.55]		# mta list
mxalist_0 = [0,0,0]			# mxa list
mpblist_0 = [.3,.3,.3]			# mpb list
mxblist_0 = [0,0,0]			# mxb list
mpclist_0 = [.15,.15,.15]		# mpc list
mtclist_0 = [.1,.1,.1]			# mtc list
mxclist_0 = [2,2,2]			# mxc list
bndalist_0 = [1,1,1]			# bnda list
bndblist_0 = [1,1,1]			# bndb list
bndclist_0 = [1,1,1]			# bndc list
bndtlist_0 = [.5,.5,.5]			# bndt list
bndulist_0 = [.5,.5,.5]			# bndu list
bndvlist_0 = [.5,.5,.5]			# bndv list
i_0 = 0						# loop iteration counter
c_0 = 0						# note iteration counter
while i_0 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_0 in range(bpb_0) :                           # loop through the items in the rhythm list
        sb_0 = rhythmr0_0[a_0]                          # sb is current item in the rhythm list
        subeat_0 = beat_0/len(sb_0)                     # subeat is the number of sub-beats in the beat
        for b_0 in range(len(sb_0)) :                   # loop through the items in the beat string
            if sb_0[b_0].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_0[b_0])                   # get ascii number of the character
                if sb_0[b_0].isdigit() :                # check if character is numeric
                    amp_0 = (asky-47)                   # assign amplitude
                elif sb_0[b_0].isupper() :              # check if character is uppercase
                    amp_0 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_0 = (asky-60)                   # assign amplitude
            elif sb_0[b_0] == &apos;-&apos; : amp_0 = 0           # character for amp = 0                         
            elif sb_0[b_0] == &apos;&gt;&apos; : amp_0 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_0 = blueDuration + 1           # set notetime_0 &gt; blueduration
                scoreText_0 = &apos;&apos;                        # clear scoreText_0
            if notetime_0 &gt;= blueDuration : break       # break out of the loop
	    if amp_0 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_0 = durlist_0[c_0]			# get duration from durlist
		amp_0 = amp_0-62			# move amp value to correct dbfs range (max=1)
		note_0 = notelist_0[c_0]		# get note from notelist
	        sp_0 = splist_0[c_0]			# get subpatch from splist
		pana_0 = panalist_0[c_0]		# get pana from panalist
		panb_0 = panblist_0[c_0]		# get panb from panblist
		nvat_0 = nvatlist_0[c_0]		# get nvat from nvatlist
		nvac_0 = nvaclist_0[c_0]		# get nvac from nvatlist
		nvpa_0 = nvpalist_0[c_0]		# get nvpa from nvpalist
		nvta_0 = nvtalist_0[c_0]		# get nvta from nvtalist
		nvxa_0 = nvxalist_0[c_0]		# get nvxa from nvxalist
		nvpb_0 = nvpblist_0[c_0]		# get nvpb from nvpblist
		nvxb_0 = nvxblist_0[c_0]		# get nvxb from nvxblist
		nvpc_0 = nvpclist_0[c_0]		# get nvpc from nvpclist
		nvtc_0 = nvtclist_0[c_0]		# get nvtc from nvtclist
		nvxc_0 = nvxclist_0[c_0]		# get nvxc from nvxclist
		mat_0 = matlist_0[c_0]			# get mat from matlist
		mac_0 = maclist_0[c_0]			# get mac from maclist
		mpa_0 = mpalist_0[c_0]			# get mpa from mpalist
		mta_0 = mtalist_0[c_0]			# get mta from mtalist
		mxa_0 = mxalist_0[c_0]			# get mxa from mxalist
		mpb_0 = mpblist_0[c_0]			# get mpb from mpblist
		mxb_0 = mxblist_0[c_0]			# get mxb from mxblist
		mpc_0 = mpclist_0[c_0]			# get mpc from mpclist
		mtc_0 = mtclist_0[c_0]			# get mtc from mtclist
		mxc_0 = mxclist_0[c_0]			# get mxc from mxclist
		bnda_0 = bndalist_0[c_0]		# get bnda from bndalist
		bndb_0 = bndblist_0[c_0]		# get bndb from bndblist
		bndc_0 = bndclist_0[c_0]		# get bndc from bndclist
		bndt_0 = bndtlist_0[c_0]		# get bndt from bndtlist		
		bndu_0 = bndulist_0[c_0]		# get bndu from bndulist		
		bndv_0 = bndvlist_0[c_0]		# get bndv from bndvlist		
                c_0 = c_0 + 1
                scoreText_0 += &quot;i1 &quot;+str(notetime_0)+&quot; &quot;+str(dur_0)+&quot; &quot;+str(amp_0)+&quot; &quot;+str(note_0)+&quot; &quot;+str(sp_0)+&quot; &quot;+str(pana_0)+&quot; &quot;+str(panb_0)+&quot; &quot;+str(nvat_0)+&quot; &quot;+str(nvac_0)+&quot; &quot;+str(nvpa_0)+&quot; &quot;+str(nvta_0)+&quot; &quot;+str(nvxa_0)+&quot; &quot;+str(nvpb_0)+&quot; &quot;+str(nvxb_0)+&quot; &quot;+str(nvpc_0)+&quot; &quot;+str(nvtc_0)+&quot; &quot;+str(nvxc_0)+&quot; &quot;+str(mat_0)+&quot; &quot;+str(mac_0)+&quot; &quot;+str(mpa_0)+&quot; &quot;+str(mta_0)+&quot; &quot;+str(mxa_0)+&quot; &quot;+str(mpb_0)+&quot; &quot;+str(mxb_0)+&quot; &quot;+str(mpc_0)+&quot; &quot;+str(mtc_0)+&quot; &quot;+str(mxc_0)+&quot; &quot;+str(bnda_0)+&quot; &quot;+str(bndb_0)+&quot; &quot;+str(bndc_0)+&quot; &quot;+str(bndt_0)+&quot; &quot;+str(bndu_0)+&quot; &quot;+str(bndv_0)+&quot; \n&quot;
            notetime_0 = notetime_0 + subeat_0                      # increment notetime by subeat time value
    i_0 = i_0 + 1
    c_0 = 0
score = scoreText_0
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>20.0</startTime>
          <name>Ringer_0b</name>
          <backgroundColor>-11495836</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_0 - 3h13TET
scoreText_0 = &quot;&quot;                              	# scoreText_0 is cleared
bart_0 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_0 = [&apos;e&apos;,&apos;d&apos;,&apos;f&apos;]			# rhythm
bpb_0 = len(rhythmr0_0)                         # beats per bar
beat_0 = bart_0/bpb_0                           # time of beat in seconds
notetime_0 = 0                                  # set intitial note start time
durlist_0 = [1.66,1.66,1.66]			# note duration list
notelist_0 = [57,56,54]				# note list
splist_0 = [1,1,1]				# subpatch list
panalist_0 = [-.5,-.5,-.45]			# pana list
panblist_0 = [-.45,-.55,-.5]			# panb list
nvatlist_0 = [.55,.55,.55]			# nvat list
nvaclist_0 = [0,0,0]				# nvac list
nvpalist_0 = [1,1,1]				# nvpa list
nvtalist_0 = [.55,.55,.55]			# nvta list
nvxalist_0 = [0,0,0]			# nvxa list
nvpblist_0 = [1,1,1]			# nvpb list
nvxblist_0 = [0,0,0]			# nvxb list
nvpclist_0 = [.7,.7,.7]			# nvpc list
nvtclist_0 = [.3,.3,.3]			# nvtc list
nvxclist_0 = [2,2,2]			# nvxc list
matlist_0 = [.55,.55,.55]		# mat list
maclist_0 = [0,0,0]			# mac list
mpalist_0 = [.3,.3,.3]			# mpa list
mtalist_0 = [.55,.55,.55]		# mta list
mxalist_0 = [0,0,0]			# mxa list
mpblist_0 = [.3,.3,.3]			# mpb list
mxblist_0 = [0,0,0]			# mxb list
mpclist_0 = [.1,.1,.1]		# mpc list
mtclist_0 = [.3,.3,.3]			# mtc list
mxclist_0 = [2,2,2]			# mxc list
bndalist_0 = [1,1,1]			# bnda list
bndblist_0 = [1,1,1]			# bndb list
bndclist_0 = [1,1,1]			# bndc list
bndtlist_0 = [.5,.5,.5]			# bndt list
bndulist_0 = [.5,.5,.5]			# bndu list
bndvlist_0 = [.5,.5,.5]			# bndv list
i_0 = 0						# loop iteration counter
c_0 = 0						# note iteration counter
while i_0 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_0 in range(bpb_0) :                           # loop through the items in the rhythm list
        sb_0 = rhythmr0_0[a_0]                          # sb is current item in the rhythm list
        subeat_0 = beat_0/len(sb_0)                     # subeat is the number of sub-beats in the beat
        for b_0 in range(len(sb_0)) :                   # loop through the items in the beat string
            if sb_0[b_0].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_0[b_0])                   # get ascii number of the character
                if sb_0[b_0].isdigit() :                # check if character is numeric
                    amp_0 = (asky-47)                   # assign amplitude
                elif sb_0[b_0].isupper() :              # check if character is uppercase
                    amp_0 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_0 = (asky-60)                   # assign amplitude
            elif sb_0[b_0] == &apos;-&apos; : amp_0 = 0           # character for amp = 0                         
            elif sb_0[b_0] == &apos;&gt;&apos; : amp_0 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_0 = blueDuration + 1           # set notetime_0 &gt; blueduration
                scoreText_0 = &apos;&apos;                        # clear scoreText_0
            if notetime_0 &gt;= blueDuration : break       # break out of the loop
	    if amp_0 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_0 = durlist_0[c_0]			# get duration from durlist
		amp_0 = amp_0-62			# move amp value to correct dbfs range (max=1)
		note_0 = notelist_0[c_0]		# get note from notelist
	        sp_0 = splist_0[c_0]			# get subpatch from splist
		pana_0 = panalist_0[c_0]		# get pana from panalist
		panb_0 = panblist_0[c_0]		# get panb from panblist
		nvat_0 = nvatlist_0[c_0]		# get nvat from nvatlist
		nvac_0 = nvaclist_0[c_0]		# get nvac from nvatlist
		nvpa_0 = nvpalist_0[c_0]		# get nvpa from nvpalist
		nvta_0 = nvtalist_0[c_0]		# get nvta from nvtalist
		nvxa_0 = nvxalist_0[c_0]		# get nvxa from nvxalist
		nvpb_0 = nvpblist_0[c_0]		# get nvpb from nvpblist
		nvxb_0 = nvxblist_0[c_0]		# get nvxb from nvxblist
		nvpc_0 = nvpclist_0[c_0]		# get nvpc from nvpclist
		nvtc_0 = nvtclist_0[c_0]		# get nvtc from nvtclist
		nvxc_0 = nvxclist_0[c_0]		# get nvxc from nvxclist
		mat_0 = matlist_0[c_0]			# get mat from matlist
		mac_0 = maclist_0[c_0]			# get mac from maclist
		mpa_0 = mpalist_0[c_0]			# get mpa from mpalist
		mta_0 = mtalist_0[c_0]			# get mta from mtalist
		mxa_0 = mxalist_0[c_0]			# get mxa from mxalist
		mpb_0 = mpblist_0[c_0]			# get mpb from mpblist
		mxb_0 = mxblist_0[c_0]			# get mxb from mxblist
		mpc_0 = mpclist_0[c_0]			# get mpc from mpclist
		mtc_0 = mtclist_0[c_0]			# get mtc from mtclist
		mxc_0 = mxclist_0[c_0]			# get mxc from mxclist
		bnda_0 = bndalist_0[c_0]		# get bnda from bndalist
		bndb_0 = bndblist_0[c_0]		# get bndb from bndblist
		bndc_0 = bndclist_0[c_0]		# get bndc from bndclist
		bndt_0 = bndtlist_0[c_0]		# get bndt from bndtlist		
		bndu_0 = bndulist_0[c_0]		# get bndu from bndulist		
		bndv_0 = bndvlist_0[c_0]		# get bndv from bndvlist		
                c_0 = c_0 + 1
                scoreText_0 += &quot;i1 &quot;+str(notetime_0)+&quot; &quot;+str(dur_0)+&quot; &quot;+str(amp_0)+&quot; &quot;+str(note_0)+&quot; &quot;+str(sp_0)+&quot; &quot;+str(pana_0)+&quot; &quot;+str(panb_0)+&quot; &quot;+str(nvat_0)+&quot; &quot;+str(nvac_0)+&quot; &quot;+str(nvpa_0)+&quot; &quot;+str(nvta_0)+&quot; &quot;+str(nvxa_0)+&quot; &quot;+str(nvpb_0)+&quot; &quot;+str(nvxb_0)+&quot; &quot;+str(nvpc_0)+&quot; &quot;+str(nvtc_0)+&quot; &quot;+str(nvxc_0)+&quot; &quot;+str(mat_0)+&quot; &quot;+str(mac_0)+&quot; &quot;+str(mpa_0)+&quot; &quot;+str(mta_0)+&quot; &quot;+str(mxa_0)+&quot; &quot;+str(mpb_0)+&quot; &quot;+str(mxb_0)+&quot; &quot;+str(mpc_0)+&quot; &quot;+str(mtc_0)+&quot; &quot;+str(mxc_0)+&quot; &quot;+str(bnda_0)+&quot; &quot;+str(bndb_0)+&quot; &quot;+str(bndc_0)+&quot; &quot;+str(bndt_0)+&quot; &quot;+str(bndu_0)+&quot; &quot;+str(bndv_0)+&quot; \n&quot;
            notetime_0 = notetime_0 + subeat_0                      # increment notetime by subeat time value
    i_0 = i_0 + 1
    c_0 = 0
score = scoreText_0
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>25.0</startTime>
          <name>Ringer_0c</name>
          <backgroundColor>-11495836</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_0 - 3h13TET
scoreText_0 = &quot;&quot;                              	# scoreText_0 is cleared
bart_0 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_0 = [&apos;e&apos;,&apos;d&apos;,&apos;f&apos;]			# rhythm
bpb_0 = len(rhythmr0_0)                         # beats per bar
beat_0 = bart_0/bpb_0                           # time of beat in seconds
notetime_0 = 0                                  # set intitial note start time
durlist_0 = [1.66,1.66,1.66]			# note duration list
notelist_0 = [56,57,60]				# note list
splist_0 = [1,1,1]				# subpatch list
panalist_0 = [-.5,-.5,-.45]			# pana list
panblist_0 = [-.45,-.55,-.5]			# panb list
nvatlist_0 = [.55,.55,.55]			# nvat list
nvaclist_0 = [0,0,0]				# nvac list
nvpalist_0 = [1,1,1]				# nvpa list
nvtalist_0 = [.55,.55,.55]			# nvta list
nvxalist_0 = [0,0,0]			# nvxa list
nvpblist_0 = [1,1,1]			# nvpb list
nvxblist_0 = [0,0,0]			# nvxb list
nvpclist_0 = [.7,.7,.7]			# nvpc list
nvtclist_0 = [.3,.3,.3]			# nvtc list
nvxclist_0 = [2,2,2]			# nvxc list
matlist_0 = [.55,.55,.55]		# mat list
maclist_0 = [0,0,0]			# mac list
mpalist_0 = [.3,.3,.3]			# mpa list
mtalist_0 = [.55,.55,.55]		# mta list
mxalist_0 = [0,0,0]			# mxa list
mpblist_0 = [.3,.3,.3]			# mpb list
mxblist_0 = [0,0,0]			# mxb list
mpclist_0 = [.1,.1,.1]		# mpc list
mtclist_0 = [.3,.3,.3]			# mtc list
mxclist_0 = [2,2,2]			# mxc list
bndalist_0 = [1,1,1]			# bnda list
bndblist_0 = [1,1,1]			# bndb list
bndclist_0 = [1,1,1]			# bndc list
bndtlist_0 = [.5,.5,.5]			# bndt list
bndulist_0 = [.5,.5,.5]			# bndu list
bndvlist_0 = [.5,.5,.5]			# bndv list
i_0 = 0						# loop iteration counter
c_0 = 0						# note iteration counter
while i_0 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_0 in range(bpb_0) :                           # loop through the items in the rhythm list
        sb_0 = rhythmr0_0[a_0]                          # sb is current item in the rhythm list
        subeat_0 = beat_0/len(sb_0)                     # subeat is the number of sub-beats in the beat
        for b_0 in range(len(sb_0)) :                   # loop through the items in the beat string
            if sb_0[b_0].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_0[b_0])                   # get ascii number of the character
                if sb_0[b_0].isdigit() :                # check if character is numeric
                    amp_0 = (asky-47)                   # assign amplitude
                elif sb_0[b_0].isupper() :              # check if character is uppercase
                    amp_0 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_0 = (asky-60)                   # assign amplitude
            elif sb_0[b_0] == &apos;-&apos; : amp_0 = 0           # character for amp = 0                         
            elif sb_0[b_0] == &apos;&gt;&apos; : amp_0 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_0 = blueDuration + 1           # set notetime_0 &gt; blueduration
                scoreText_0 = &apos;&apos;                        # clear scoreText_0
            if notetime_0 &gt;= blueDuration : break       # break out of the loop
	    if amp_0 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_0 = durlist_0[c_0]			# get duration from durlist
		amp_0 = amp_0-62			# move amp value to correct dbfs range (max=1)
		note_0 = notelist_0[c_0]		# get note from notelist
	        sp_0 = splist_0[c_0]			# get subpatch from splist
		pana_0 = panalist_0[c_0]		# get pana from panalist
		panb_0 = panblist_0[c_0]		# get panb from panblist
		nvat_0 = nvatlist_0[c_0]		# get nvat from nvatlist
		nvac_0 = nvaclist_0[c_0]		# get nvac from nvatlist
		nvpa_0 = nvpalist_0[c_0]		# get nvpa from nvpalist
		nvta_0 = nvtalist_0[c_0]		# get nvta from nvtalist
		nvxa_0 = nvxalist_0[c_0]		# get nvxa from nvxalist
		nvpb_0 = nvpblist_0[c_0]		# get nvpb from nvpblist
		nvxb_0 = nvxblist_0[c_0]		# get nvxb from nvxblist
		nvpc_0 = nvpclist_0[c_0]		# get nvpc from nvpclist
		nvtc_0 = nvtclist_0[c_0]		# get nvtc from nvtclist
		nvxc_0 = nvxclist_0[c_0]		# get nvxc from nvxclist
		mat_0 = matlist_0[c_0]			# get mat from matlist
		mac_0 = maclist_0[c_0]			# get mac from maclist
		mpa_0 = mpalist_0[c_0]			# get mpa from mpalist
		mta_0 = mtalist_0[c_0]			# get mta from mtalist
		mxa_0 = mxalist_0[c_0]			# get mxa from mxalist
		mpb_0 = mpblist_0[c_0]			# get mpb from mpblist
		mxb_0 = mxblist_0[c_0]			# get mxb from mxblist
		mpc_0 = mpclist_0[c_0]			# get mpc from mpclist
		mtc_0 = mtclist_0[c_0]			# get mtc from mtclist
		mxc_0 = mxclist_0[c_0]			# get mxc from mxclist
		bnda_0 = bndalist_0[c_0]		# get bnda from bndalist
		bndb_0 = bndblist_0[c_0]		# get bndb from bndblist
		bndc_0 = bndclist_0[c_0]		# get bndc from bndclist
		bndt_0 = bndtlist_0[c_0]		# get bndt from bndtlist		
		bndu_0 = bndulist_0[c_0]		# get bndu from bndulist		
		bndv_0 = bndvlist_0[c_0]		# get bndv from bndvlist		
                c_0 = c_0 + 1
                scoreText_0 += &quot;i1 &quot;+str(notetime_0)+&quot; &quot;+str(dur_0)+&quot; &quot;+str(amp_0)+&quot; &quot;+str(note_0)+&quot; &quot;+str(sp_0)+&quot; &quot;+str(pana_0)+&quot; &quot;+str(panb_0)+&quot; &quot;+str(nvat_0)+&quot; &quot;+str(nvac_0)+&quot; &quot;+str(nvpa_0)+&quot; &quot;+str(nvta_0)+&quot; &quot;+str(nvxa_0)+&quot; &quot;+str(nvpb_0)+&quot; &quot;+str(nvxb_0)+&quot; &quot;+str(nvpc_0)+&quot; &quot;+str(nvtc_0)+&quot; &quot;+str(nvxc_0)+&quot; &quot;+str(mat_0)+&quot; &quot;+str(mac_0)+&quot; &quot;+str(mpa_0)+&quot; &quot;+str(mta_0)+&quot; &quot;+str(mxa_0)+&quot; &quot;+str(mpb_0)+&quot; &quot;+str(mxb_0)+&quot; &quot;+str(mpc_0)+&quot; &quot;+str(mtc_0)+&quot; &quot;+str(mxc_0)+&quot; &quot;+str(bnda_0)+&quot; &quot;+str(bndb_0)+&quot; &quot;+str(bndc_0)+&quot; &quot;+str(bndt_0)+&quot; &quot;+str(bndu_0)+&quot; &quot;+str(bndv_0)+&quot; \n&quot;
            notetime_0 = notetime_0 + subeat_0                      # increment notetime by subeat time value
    i_0 = i_0 + 1
    c_0 = 0
score = scoreText_0
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>30.0</startTime>
          <name>Ringer_0d</name>
          <backgroundColor>-11495836</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_0 - 3h13TET
scoreText_0 = &quot;&quot;                              	# scoreText_0 is cleared
bart_0 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_0 = [&apos;e&apos;,&apos;d&apos;,&apos;f&apos;]			# rhythm
bpb_0 = len(rhythmr0_0)                         # beats per bar
beat_0 = bart_0/bpb_0                           # time of beat in seconds
notetime_0 = 0                                  # set intitial note start time
durlist_0 = [1.66,1.66,1.66]			# note duration list
notelist_0 = [54,56,57]				# note list
splist_0 = [1,1,1]				# subpatch list
panalist_0 = [-.5,-.5,-.45]			# pana list
panblist_0 = [-.45,-.55,-.5]			# panb list
nvatlist_0 = [.55,.55,.55]			# nvat list
nvaclist_0 = [0,0,0]				# nvac list
nvpalist_0 = [1,1,1]				# nvpa list
nvtalist_0 = [.55,.55,.55]			# nvta list
nvxalist_0 = [0,0,0]			# nvxa list
nvpblist_0 = [1,1,1]			# nvpb list
nvxblist_0 = [0,0,0]			# nvxb list
nvpclist_0 = [.7,.7,.7]			# nvpc list
nvtclist_0 = [.3,.3,.3]			# nvtc list
nvxclist_0 = [2,2,2]			# nvxc list
matlist_0 = [.55,.55,.55]		# mat list
maclist_0 = [0,0,0]			# mac list
mpalist_0 = [.3,.3,.3]			# mpa list
mtalist_0 = [.55,.55,.55]		# mta list
mxalist_0 = [0,0,0]			# mxa list
mpblist_0 = [.3,.3,.3]			# mpb list
mxblist_0 = [0,0,0]			# mxb list
mpclist_0 = [.1,.1,.1]		# mpc list
mtclist_0 = [.3,.3,.3]			# mtc list
mxclist_0 = [2,2,2]			# mxc list
bndalist_0 = [1,1,1]			# bnda list
bndblist_0 = [1,1,1]			# bndb list
bndclist_0 = [1,1,1]			# bndc list
bndtlist_0 = [.5,.5,.5]			# bndt list
bndulist_0 = [.5,.5,.5]			# bndu list
bndvlist_0 = [.5,.5,.5]			# bndv list
i_0 = 0						# loop iteration counter
c_0 = 0						# note iteration counter
while i_0 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_0 in range(bpb_0) :                           # loop through the items in the rhythm list
        sb_0 = rhythmr0_0[a_0]                          # sb is current item in the rhythm list
        subeat_0 = beat_0/len(sb_0)                     # subeat is the number of sub-beats in the beat
        for b_0 in range(len(sb_0)) :                   # loop through the items in the beat string
            if sb_0[b_0].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_0[b_0])                   # get ascii number of the character
                if sb_0[b_0].isdigit() :                # check if character is numeric
                    amp_0 = (asky-47)                   # assign amplitude
                elif sb_0[b_0].isupper() :              # check if character is uppercase
                    amp_0 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_0 = (asky-60)                   # assign amplitude
            elif sb_0[b_0] == &apos;-&apos; : amp_0 = 0           # character for amp = 0                         
            elif sb_0[b_0] == &apos;&gt;&apos; : amp_0 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_0 = blueDuration + 1           # set notetime_0 &gt; blueduration
                scoreText_0 = &apos;&apos;                        # clear scoreText_0
            if notetime_0 &gt;= blueDuration : break       # break out of the loop
	    if amp_0 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_0 = durlist_0[c_0]			# get duration from durlist
		amp_0 = amp_0-62			# move amp value to correct dbfs range (max=1)
		note_0 = notelist_0[c_0]		# get note from notelist
	        sp_0 = splist_0[c_0]			# get subpatch from splist
		pana_0 = panalist_0[c_0]		# get pana from panalist
		panb_0 = panblist_0[c_0]		# get panb from panblist
		nvat_0 = nvatlist_0[c_0]		# get nvat from nvatlist
		nvac_0 = nvaclist_0[c_0]		# get nvac from nvatlist
		nvpa_0 = nvpalist_0[c_0]		# get nvpa from nvpalist
		nvta_0 = nvtalist_0[c_0]		# get nvta from nvtalist
		nvxa_0 = nvxalist_0[c_0]		# get nvxa from nvxalist
		nvpb_0 = nvpblist_0[c_0]		# get nvpb from nvpblist
		nvxb_0 = nvxblist_0[c_0]		# get nvxb from nvxblist
		nvpc_0 = nvpclist_0[c_0]		# get nvpc from nvpclist
		nvtc_0 = nvtclist_0[c_0]		# get nvtc from nvtclist
		nvxc_0 = nvxclist_0[c_0]		# get nvxc from nvxclist
		mat_0 = matlist_0[c_0]			# get mat from matlist
		mac_0 = maclist_0[c_0]			# get mac from maclist
		mpa_0 = mpalist_0[c_0]			# get mpa from mpalist
		mta_0 = mtalist_0[c_0]			# get mta from mtalist
		mxa_0 = mxalist_0[c_0]			# get mxa from mxalist
		mpb_0 = mpblist_0[c_0]			# get mpb from mpblist
		mxb_0 = mxblist_0[c_0]			# get mxb from mxblist
		mpc_0 = mpclist_0[c_0]			# get mpc from mpclist
		mtc_0 = mtclist_0[c_0]			# get mtc from mtclist
		mxc_0 = mxclist_0[c_0]			# get mxc from mxclist
		bnda_0 = bndalist_0[c_0]		# get bnda from bndalist
		bndb_0 = bndblist_0[c_0]		# get bndb from bndblist
		bndc_0 = bndclist_0[c_0]		# get bndc from bndclist
		bndt_0 = bndtlist_0[c_0]		# get bndt from bndtlist		
		bndu_0 = bndulist_0[c_0]		# get bndu from bndulist		
		bndv_0 = bndvlist_0[c_0]		# get bndv from bndvlist		
                c_0 = c_0 + 1
                scoreText_0 += &quot;i1 &quot;+str(notetime_0)+&quot; &quot;+str(dur_0)+&quot; &quot;+str(amp_0)+&quot; &quot;+str(note_0)+&quot; &quot;+str(sp_0)+&quot; &quot;+str(pana_0)+&quot; &quot;+str(panb_0)+&quot; &quot;+str(nvat_0)+&quot; &quot;+str(nvac_0)+&quot; &quot;+str(nvpa_0)+&quot; &quot;+str(nvta_0)+&quot; &quot;+str(nvxa_0)+&quot; &quot;+str(nvpb_0)+&quot; &quot;+str(nvxb_0)+&quot; &quot;+str(nvpc_0)+&quot; &quot;+str(nvtc_0)+&quot; &quot;+str(nvxc_0)+&quot; &quot;+str(mat_0)+&quot; &quot;+str(mac_0)+&quot; &quot;+str(mpa_0)+&quot; &quot;+str(mta_0)+&quot; &quot;+str(mxa_0)+&quot; &quot;+str(mpb_0)+&quot; &quot;+str(mxb_0)+&quot; &quot;+str(mpc_0)+&quot; &quot;+str(mtc_0)+&quot; &quot;+str(mxc_0)+&quot; &quot;+str(bnda_0)+&quot; &quot;+str(bndb_0)+&quot; &quot;+str(bndc_0)+&quot; &quot;+str(bndt_0)+&quot; &quot;+str(bndu_0)+&quot; &quot;+str(bndv_0)+&quot; \n&quot;
            notetime_0 = notetime_0 + subeat_0                      # increment notetime by subeat time value
    i_0 = i_0 + 1
    c_0 = 0
score = scoreText_0
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>35.0</startTime>
          <name>Ringer_0e</name>
          <backgroundColor>-11495836</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_0 - 3h13TET
scoreText_0 = &quot;&quot;                              	# scoreText_0 is cleared
bart_0 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_0 = [&apos;f&apos;,&apos;e&apos;,&apos;g&apos;]			# rhythm
bpb_0 = len(rhythmr0_0)                         # beats per bar
beat_0 = bart_0/bpb_0                           # time of beat in seconds
notetime_0 = 0                                  # set intitial note start time
durlist_0 = [1.66,1.66,1.66]			# note duration list
notelist_0 = [56,54,53]				# note list
splist_0 = [1,1,1]				# subpatch list
panalist_0 = [-.5,-.5,-.45]			# pana list
panblist_0 = [-.45,-.55,-.5]			# panb list
nvatlist_0 = [.55,.55,.55]			# nvat list
nvaclist_0 = [0,0,0]				# nvac list
nvpalist_0 = [1,1,1]				# nvpa list
nvtalist_0 = [.55,.55,.55]			# nvta list
nvxalist_0 = [0,0,0]			# nvxa list
nvpblist_0 = [1,1,1]			# nvpb list
nvxblist_0 = [0,0,0]			# nvxb list
nvpclist_0 = [.7,.7,.7]			# nvpc list
nvtclist_0 = [.3,.3,.3]			# nvtc list
nvxclist_0 = [2,2,2]			# nvxc list
matlist_0 = [.55,.55,.55]		# mat list
maclist_0 = [0,0,0]			# mac list
mpalist_0 = [.3,.3,.3]			# mpa list
mtalist_0 = [.55,.55,.55]		# mta list
mxalist_0 = [0,0,0]			# mxa list
mpblist_0 = [.3,.3,.3]			# mpb list
mxblist_0 = [0,0,0]			# mxb list
mpclist_0 = [.1,.1,.1]		# mpc list
mtclist_0 = [.3,.3,.3]			# mtc list
mxclist_0 = [2,2,2]			# mxc list
bndalist_0 = [1,1,1]			# bnda list
bndblist_0 = [1,1,1]			# bndb list
bndclist_0 = [1,1,1]			# bndc list
bndtlist_0 = [.5,.5,.5]			# bndt list
bndulist_0 = [.5,.5,.5]			# bndu list
bndvlist_0 = [.5,.5,.5]			# bndv list
i_0 = 0						# loop iteration counter
c_0 = 0						# note iteration counter
while i_0 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_0 in range(bpb_0) :                           # loop through the items in the rhythm list
        sb_0 = rhythmr0_0[a_0]                          # sb is current item in the rhythm list
        subeat_0 = beat_0/len(sb_0)                     # subeat is the number of sub-beats in the beat
        for b_0 in range(len(sb_0)) :                   # loop through the items in the beat string
            if sb_0[b_0].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_0[b_0])                   # get ascii number of the character
                if sb_0[b_0].isdigit() :                # check if character is numeric
                    amp_0 = (asky-47)                   # assign amplitude
                elif sb_0[b_0].isupper() :              # check if character is uppercase
                    amp_0 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_0 = (asky-60)                   # assign amplitude
            elif sb_0[b_0] == &apos;-&apos; : amp_0 = 0           # character for amp = 0                         
            elif sb_0[b_0] == &apos;&gt;&apos; : amp_0 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_0 = blueDuration + 1           # set notetime_0 &gt; blueduration
                scoreText_0 = &apos;&apos;                        # clear scoreText_0
            if notetime_0 &gt;= blueDuration : break       # break out of the loop
	    if amp_0 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_0 = durlist_0[c_0]			# get duration from durlist
		amp_0 = amp_0-62			# move amp value to correct dbfs range (max=1)
		note_0 = notelist_0[c_0]		# get note from notelist
	        sp_0 = splist_0[c_0]			# get subpatch from splist
		pana_0 = panalist_0[c_0]		# get pana from panalist
		panb_0 = panblist_0[c_0]		# get panb from panblist
		nvat_0 = nvatlist_0[c_0]		# get nvat from nvatlist
		nvac_0 = nvaclist_0[c_0]		# get nvac from nvatlist
		nvpa_0 = nvpalist_0[c_0]		# get nvpa from nvpalist
		nvta_0 = nvtalist_0[c_0]		# get nvta from nvtalist
		nvxa_0 = nvxalist_0[c_0]		# get nvxa from nvxalist
		nvpb_0 = nvpblist_0[c_0]		# get nvpb from nvpblist
		nvxb_0 = nvxblist_0[c_0]		# get nvxb from nvxblist
		nvpc_0 = nvpclist_0[c_0]		# get nvpc from nvpclist
		nvtc_0 = nvtclist_0[c_0]		# get nvtc from nvtclist
		nvxc_0 = nvxclist_0[c_0]		# get nvxc from nvxclist
		mat_0 = matlist_0[c_0]			# get mat from matlist
		mac_0 = maclist_0[c_0]			# get mac from maclist
		mpa_0 = mpalist_0[c_0]			# get mpa from mpalist
		mta_0 = mtalist_0[c_0]			# get mta from mtalist
		mxa_0 = mxalist_0[c_0]			# get mxa from mxalist
		mpb_0 = mpblist_0[c_0]			# get mpb from mpblist
		mxb_0 = mxblist_0[c_0]			# get mxb from mxblist
		mpc_0 = mpclist_0[c_0]			# get mpc from mpclist
		mtc_0 = mtclist_0[c_0]			# get mtc from mtclist
		mxc_0 = mxclist_0[c_0]			# get mxc from mxclist
		bnda_0 = bndalist_0[c_0]		# get bnda from bndalist
		bndb_0 = bndblist_0[c_0]		# get bndb from bndblist
		bndc_0 = bndclist_0[c_0]		# get bndc from bndclist
		bndt_0 = bndtlist_0[c_0]		# get bndt from bndtlist		
		bndu_0 = bndulist_0[c_0]		# get bndu from bndulist		
		bndv_0 = bndvlist_0[c_0]		# get bndv from bndvlist		
                c_0 = c_0 + 1
                scoreText_0 += &quot;i1 &quot;+str(notetime_0)+&quot; &quot;+str(dur_0)+&quot; &quot;+str(amp_0)+&quot; &quot;+str(note_0)+&quot; &quot;+str(sp_0)+&quot; &quot;+str(pana_0)+&quot; &quot;+str(panb_0)+&quot; &quot;+str(nvat_0)+&quot; &quot;+str(nvac_0)+&quot; &quot;+str(nvpa_0)+&quot; &quot;+str(nvta_0)+&quot; &quot;+str(nvxa_0)+&quot; &quot;+str(nvpb_0)+&quot; &quot;+str(nvxb_0)+&quot; &quot;+str(nvpc_0)+&quot; &quot;+str(nvtc_0)+&quot; &quot;+str(nvxc_0)+&quot; &quot;+str(mat_0)+&quot; &quot;+str(mac_0)+&quot; &quot;+str(mpa_0)+&quot; &quot;+str(mta_0)+&quot; &quot;+str(mxa_0)+&quot; &quot;+str(mpb_0)+&quot; &quot;+str(mxb_0)+&quot; &quot;+str(mpc_0)+&quot; &quot;+str(mtc_0)+&quot; &quot;+str(mxc_0)+&quot; &quot;+str(bnda_0)+&quot; &quot;+str(bndb_0)+&quot; &quot;+str(bndc_0)+&quot; &quot;+str(bndt_0)+&quot; &quot;+str(bndu_0)+&quot; &quot;+str(bndv_0)+&quot; \n&quot;
            notetime_0 = notetime_0 + subeat_0                      # increment notetime by subeat time value
    i_0 = i_0 + 1
    c_0 = 0
score = scoreText_0
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>40.0</startTime>
          <name>Ringer_0a</name>
          <backgroundColor>-11495836</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_0 - 3h13TET
scoreText_0 = &quot;&quot;                              	# scoreText_0 is cleared
bart_0 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_0 = [&apos;e&apos;,&apos;d&apos;,&apos;f&apos;]			# rhythm
bpb_0 = len(rhythmr0_0)                         # beats per bar
beat_0 = bart_0/bpb_0                           # time of beat in seconds
notetime_0 = 0                                  # set intitial note start time
durlist_0 = [1.66,1.66,1.66]			# note duration list
notelist_0 = [60,57,56]				# note list
splist_0 = [1,1,1]				# subpatch list
panalist_0 = [-.5,-.5,-.45]			# pana list
panblist_0 = [-.45,-.55,-.5]			# panb list
nvatlist_0 = [.55,.55,.55]			# nvat list
nvaclist_0 = [0,0,0]				# nvac list
nvpalist_0 = [1,1,1]				# nvpa list
nvtalist_0 = [.55,.55,.55]			# nvta list
nvxalist_0 = [0,0,0]			# nvxa list
nvpblist_0 = [1,1,1]			# nvpb list
nvxblist_0 = [0,0,0]			# nvxb list
nvpclist_0 = [.7,.7,.7]			# nvpc list
nvtclist_0 = [.3,.3,.3]			# nvtc list
nvxclist_0 = [2,2,2]			# nvxc list
matlist_0 = [.55,.55,.55]		# mat list
maclist_0 = [0,0,0]			# mac list
mpalist_0 = [.3,.3,.3]			# mpa list
mtalist_0 = [.55,.55,.55]		# mta list
mxalist_0 = [0,0,0]			# mxa list
mpblist_0 = [.3,.3,.3]			# mpb list
mxblist_0 = [0,0,0]			# mxb list
mpclist_0 = [.15,.15,.15]		# mpc list
mtclist_0 = [.1,.1,.1]			# mtc list
mxclist_0 = [2,2,2]			# mxc list
bndalist_0 = [1,1,1]			# bnda list
bndblist_0 = [1,1,1]			# bndb list
bndclist_0 = [1,1,1]			# bndc list
bndtlist_0 = [.5,.5,.5]			# bndt list
bndulist_0 = [.5,.5,.5]			# bndu list
bndvlist_0 = [.5,.5,.5]			# bndv list
i_0 = 0						# loop iteration counter
c_0 = 0						# note iteration counter
while i_0 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_0 in range(bpb_0) :                           # loop through the items in the rhythm list
        sb_0 = rhythmr0_0[a_0]                          # sb is current item in the rhythm list
        subeat_0 = beat_0/len(sb_0)                     # subeat is the number of sub-beats in the beat
        for b_0 in range(len(sb_0)) :                   # loop through the items in the beat string
            if sb_0[b_0].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_0[b_0])                   # get ascii number of the character
                if sb_0[b_0].isdigit() :                # check if character is numeric
                    amp_0 = (asky-47)                   # assign amplitude
                elif sb_0[b_0].isupper() :              # check if character is uppercase
                    amp_0 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_0 = (asky-60)                   # assign amplitude
            elif sb_0[b_0] == &apos;-&apos; : amp_0 = 0           # character for amp = 0                         
            elif sb_0[b_0] == &apos;&gt;&apos; : amp_0 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_0 = blueDuration + 1           # set notetime_0 &gt; blueduration
                scoreText_0 = &apos;&apos;                        # clear scoreText_0
            if notetime_0 &gt;= blueDuration : break       # break out of the loop
	    if amp_0 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_0 = durlist_0[c_0]			# get duration from durlist
		amp_0 = amp_0-62			# move amp value to correct dbfs range (max=1)
		note_0 = notelist_0[c_0]		# get note from notelist
	        sp_0 = splist_0[c_0]			# get subpatch from splist
		pana_0 = panalist_0[c_0]		# get pana from panalist
		panb_0 = panblist_0[c_0]		# get panb from panblist
		nvat_0 = nvatlist_0[c_0]		# get nvat from nvatlist
		nvac_0 = nvaclist_0[c_0]		# get nvac from nvatlist
		nvpa_0 = nvpalist_0[c_0]		# get nvpa from nvpalist
		nvta_0 = nvtalist_0[c_0]		# get nvta from nvtalist
		nvxa_0 = nvxalist_0[c_0]		# get nvxa from nvxalist
		nvpb_0 = nvpblist_0[c_0]		# get nvpb from nvpblist
		nvxb_0 = nvxblist_0[c_0]		# get nvxb from nvxblist
		nvpc_0 = nvpclist_0[c_0]		# get nvpc from nvpclist
		nvtc_0 = nvtclist_0[c_0]		# get nvtc from nvtclist
		nvxc_0 = nvxclist_0[c_0]		# get nvxc from nvxclist
		mat_0 = matlist_0[c_0]			# get mat from matlist
		mac_0 = maclist_0[c_0]			# get mac from maclist
		mpa_0 = mpalist_0[c_0]			# get mpa from mpalist
		mta_0 = mtalist_0[c_0]			# get mta from mtalist
		mxa_0 = mxalist_0[c_0]			# get mxa from mxalist
		mpb_0 = mpblist_0[c_0]			# get mpb from mpblist
		mxb_0 = mxblist_0[c_0]			# get mxb from mxblist
		mpc_0 = mpclist_0[c_0]			# get mpc from mpclist
		mtc_0 = mtclist_0[c_0]			# get mtc from mtclist
		mxc_0 = mxclist_0[c_0]			# get mxc from mxclist
		bnda_0 = bndalist_0[c_0]		# get bnda from bndalist
		bndb_0 = bndblist_0[c_0]		# get bndb from bndblist
		bndc_0 = bndclist_0[c_0]		# get bndc from bndclist
		bndt_0 = bndtlist_0[c_0]		# get bndt from bndtlist		
		bndu_0 = bndulist_0[c_0]		# get bndu from bndulist		
		bndv_0 = bndvlist_0[c_0]		# get bndv from bndvlist		
                c_0 = c_0 + 1
                scoreText_0 += &quot;i1 &quot;+str(notetime_0)+&quot; &quot;+str(dur_0)+&quot; &quot;+str(amp_0)+&quot; &quot;+str(note_0)+&quot; &quot;+str(sp_0)+&quot; &quot;+str(pana_0)+&quot; &quot;+str(panb_0)+&quot; &quot;+str(nvat_0)+&quot; &quot;+str(nvac_0)+&quot; &quot;+str(nvpa_0)+&quot; &quot;+str(nvta_0)+&quot; &quot;+str(nvxa_0)+&quot; &quot;+str(nvpb_0)+&quot; &quot;+str(nvxb_0)+&quot; &quot;+str(nvpc_0)+&quot; &quot;+str(nvtc_0)+&quot; &quot;+str(nvxc_0)+&quot; &quot;+str(mat_0)+&quot; &quot;+str(mac_0)+&quot; &quot;+str(mpa_0)+&quot; &quot;+str(mta_0)+&quot; &quot;+str(mxa_0)+&quot; &quot;+str(mpb_0)+&quot; &quot;+str(mxb_0)+&quot; &quot;+str(mpc_0)+&quot; &quot;+str(mtc_0)+&quot; &quot;+str(mxc_0)+&quot; &quot;+str(bnda_0)+&quot; &quot;+str(bndb_0)+&quot; &quot;+str(bndc_0)+&quot; &quot;+str(bndt_0)+&quot; &quot;+str(bndu_0)+&quot; &quot;+str(bndv_0)+&quot; \n&quot;
            notetime_0 = notetime_0 + subeat_0                      # increment notetime by subeat time value
    i_0 = i_0 + 1
    c_0 = 0
score = scoreText_0
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>45.0</startTime>
          <name>Ringer_0b</name>
          <backgroundColor>-11495836</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_0 - 3h13TET
scoreText_0 = &quot;&quot;                              	# scoreText_0 is cleared
bart_0 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_0 = [&apos;e&apos;,&apos;d&apos;,&apos;f&apos;]			# rhythm
bpb_0 = len(rhythmr0_0)                         # beats per bar
beat_0 = bart_0/bpb_0                           # time of beat in seconds
notetime_0 = 0                                  # set intitial note start time
durlist_0 = [1.66,1.66,1.66]			# note duration list
notelist_0 = [57,56,54]				# note list
splist_0 = [1,1,1]				# subpatch list
panalist_0 = [-.5,-.5,-.45]			# pana list
panblist_0 = [-.45,-.55,-.5]			# panb list
nvatlist_0 = [.55,.55,.55]			# nvat list
nvaclist_0 = [0,0,0]				# nvac list
nvpalist_0 = [1,1,1]				# nvpa list
nvtalist_0 = [.55,.55,.55]			# nvta list
nvxalist_0 = [0,0,0]			# nvxa list
nvpblist_0 = [1,1,1]			# nvpb list
nvxblist_0 = [0,0,0]			# nvxb list
nvpclist_0 = [.7,.7,.7]			# nvpc list
nvtclist_0 = [.3,.3,.3]			# nvtc list
nvxclist_0 = [2,2,2]			# nvxc list
matlist_0 = [.55,.55,.55]		# mat list
maclist_0 = [0,0,0]			# mac list
mpalist_0 = [.3,.3,.3]			# mpa list
mtalist_0 = [.55,.55,.55]		# mta list
mxalist_0 = [0,0,0]			# mxa list
mpblist_0 = [.3,.3,.3]			# mpb list
mxblist_0 = [0,0,0]			# mxb list
mpclist_0 = [.1,.1,.1]		# mpc list
mtclist_0 = [.3,.3,.3]			# mtc list
mxclist_0 = [2,2,2]			# mxc list
bndalist_0 = [1,1,1]			# bnda list
bndblist_0 = [1,1,1]			# bndb list
bndclist_0 = [1,1,1]			# bndc list
bndtlist_0 = [.5,.5,.5]			# bndt list
bndulist_0 = [.5,.5,.5]			# bndu list
bndvlist_0 = [.5,.5,.5]			# bndv list
i_0 = 0						# loop iteration counter
c_0 = 0						# note iteration counter
while i_0 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_0 in range(bpb_0) :                           # loop through the items in the rhythm list
        sb_0 = rhythmr0_0[a_0]                          # sb is current item in the rhythm list
        subeat_0 = beat_0/len(sb_0)                     # subeat is the number of sub-beats in the beat
        for b_0 in range(len(sb_0)) :                   # loop through the items in the beat string
            if sb_0[b_0].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_0[b_0])                   # get ascii number of the character
                if sb_0[b_0].isdigit() :                # check if character is numeric
                    amp_0 = (asky-47)                   # assign amplitude
                elif sb_0[b_0].isupper() :              # check if character is uppercase
                    amp_0 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_0 = (asky-60)                   # assign amplitude
            elif sb_0[b_0] == &apos;-&apos; : amp_0 = 0           # character for amp = 0                         
            elif sb_0[b_0] == &apos;&gt;&apos; : amp_0 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_0 = blueDuration + 1           # set notetime_0 &gt; blueduration
                scoreText_0 = &apos;&apos;                        # clear scoreText_0
            if notetime_0 &gt;= blueDuration : break       # break out of the loop
	    if amp_0 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_0 = durlist_0[c_0]			# get duration from durlist
		amp_0 = amp_0-62			# move amp value to correct dbfs range (max=1)
		note_0 = notelist_0[c_0]		# get note from notelist
	        sp_0 = splist_0[c_0]			# get subpatch from splist
		pana_0 = panalist_0[c_0]		# get pana from panalist
		panb_0 = panblist_0[c_0]		# get panb from panblist
		nvat_0 = nvatlist_0[c_0]		# get nvat from nvatlist
		nvac_0 = nvaclist_0[c_0]		# get nvac from nvatlist
		nvpa_0 = nvpalist_0[c_0]		# get nvpa from nvpalist
		nvta_0 = nvtalist_0[c_0]		# get nvta from nvtalist
		nvxa_0 = nvxalist_0[c_0]		# get nvxa from nvxalist
		nvpb_0 = nvpblist_0[c_0]		# get nvpb from nvpblist
		nvxb_0 = nvxblist_0[c_0]		# get nvxb from nvxblist
		nvpc_0 = nvpclist_0[c_0]		# get nvpc from nvpclist
		nvtc_0 = nvtclist_0[c_0]		# get nvtc from nvtclist
		nvxc_0 = nvxclist_0[c_0]		# get nvxc from nvxclist
		mat_0 = matlist_0[c_0]			# get mat from matlist
		mac_0 = maclist_0[c_0]			# get mac from maclist
		mpa_0 = mpalist_0[c_0]			# get mpa from mpalist
		mta_0 = mtalist_0[c_0]			# get mta from mtalist
		mxa_0 = mxalist_0[c_0]			# get mxa from mxalist
		mpb_0 = mpblist_0[c_0]			# get mpb from mpblist
		mxb_0 = mxblist_0[c_0]			# get mxb from mxblist
		mpc_0 = mpclist_0[c_0]			# get mpc from mpclist
		mtc_0 = mtclist_0[c_0]			# get mtc from mtclist
		mxc_0 = mxclist_0[c_0]			# get mxc from mxclist
		bnda_0 = bndalist_0[c_0]		# get bnda from bndalist
		bndb_0 = bndblist_0[c_0]		# get bndb from bndblist
		bndc_0 = bndclist_0[c_0]		# get bndc from bndclist
		bndt_0 = bndtlist_0[c_0]		# get bndt from bndtlist		
		bndu_0 = bndulist_0[c_0]		# get bndu from bndulist		
		bndv_0 = bndvlist_0[c_0]		# get bndv from bndvlist		
                c_0 = c_0 + 1
                scoreText_0 += &quot;i1 &quot;+str(notetime_0)+&quot; &quot;+str(dur_0)+&quot; &quot;+str(amp_0)+&quot; &quot;+str(note_0)+&quot; &quot;+str(sp_0)+&quot; &quot;+str(pana_0)+&quot; &quot;+str(panb_0)+&quot; &quot;+str(nvat_0)+&quot; &quot;+str(nvac_0)+&quot; &quot;+str(nvpa_0)+&quot; &quot;+str(nvta_0)+&quot; &quot;+str(nvxa_0)+&quot; &quot;+str(nvpb_0)+&quot; &quot;+str(nvxb_0)+&quot; &quot;+str(nvpc_0)+&quot; &quot;+str(nvtc_0)+&quot; &quot;+str(nvxc_0)+&quot; &quot;+str(mat_0)+&quot; &quot;+str(mac_0)+&quot; &quot;+str(mpa_0)+&quot; &quot;+str(mta_0)+&quot; &quot;+str(mxa_0)+&quot; &quot;+str(mpb_0)+&quot; &quot;+str(mxb_0)+&quot; &quot;+str(mpc_0)+&quot; &quot;+str(mtc_0)+&quot; &quot;+str(mxc_0)+&quot; &quot;+str(bnda_0)+&quot; &quot;+str(bndb_0)+&quot; &quot;+str(bndc_0)+&quot; &quot;+str(bndt_0)+&quot; &quot;+str(bndu_0)+&quot; &quot;+str(bndv_0)+&quot; \n&quot;
            notetime_0 = notetime_0 + subeat_0                      # increment notetime by subeat time value
    i_0 = i_0 + 1
    c_0 = 0
score = scoreText_0
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>50.0</startTime>
          <name>Ringer_0c</name>
          <backgroundColor>-11495836</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_0 - 3h13TET
scoreText_0 = &quot;&quot;                              	# scoreText_0 is cleared
bart_0 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_0 = [&apos;e&apos;,&apos;d&apos;,&apos;f&apos;]			# rhythm
bpb_0 = len(rhythmr0_0)                         # beats per bar
beat_0 = bart_0/bpb_0                           # time of beat in seconds
notetime_0 = 0                                  # set intitial note start time
durlist_0 = [1.66,1.66,1.66]			# note duration list
notelist_0 = [56,57,60]				# note list
splist_0 = [1,1,1]				# subpatch list
panalist_0 = [-.5,-.5,-.45]			# pana list
panblist_0 = [-.45,-.55,-.5]			# panb list
nvatlist_0 = [.55,.55,.55]			# nvat list
nvaclist_0 = [0,0,0]				# nvac list
nvpalist_0 = [1,1,1]				# nvpa list
nvtalist_0 = [.55,.55,.55]			# nvta list
nvxalist_0 = [0,0,0]			# nvxa list
nvpblist_0 = [1,1,1]			# nvpb list
nvxblist_0 = [0,0,0]			# nvxb list
nvpclist_0 = [.7,.7,.7]			# nvpc list
nvtclist_0 = [.3,.3,.3]			# nvtc list
nvxclist_0 = [2,2,2]			# nvxc list
matlist_0 = [.55,.55,.55]		# mat list
maclist_0 = [0,0,0]			# mac list
mpalist_0 = [.3,.3,.3]			# mpa list
mtalist_0 = [.55,.55,.55]		# mta list
mxalist_0 = [0,0,0]			# mxa list
mpblist_0 = [.3,.3,.3]			# mpb list
mxblist_0 = [0,0,0]			# mxb list
mpclist_0 = [.1,.1,.1]		# mpc list
mtclist_0 = [.3,.3,.3]			# mtc list
mxclist_0 = [2,2,2]			# mxc list
bndalist_0 = [1,1,1]			# bnda list
bndblist_0 = [1,1,1]			# bndb list
bndclist_0 = [1,1,1]			# bndc list
bndtlist_0 = [.5,.5,.5]			# bndt list
bndulist_0 = [.5,.5,.5]			# bndu list
bndvlist_0 = [.5,.5,.5]			# bndv list
i_0 = 0						# loop iteration counter
c_0 = 0						# note iteration counter
while i_0 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_0 in range(bpb_0) :                           # loop through the items in the rhythm list
        sb_0 = rhythmr0_0[a_0]                          # sb is current item in the rhythm list
        subeat_0 = beat_0/len(sb_0)                     # subeat is the number of sub-beats in the beat
        for b_0 in range(len(sb_0)) :                   # loop through the items in the beat string
            if sb_0[b_0].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_0[b_0])                   # get ascii number of the character
                if sb_0[b_0].isdigit() :                # check if character is numeric
                    amp_0 = (asky-47)                   # assign amplitude
                elif sb_0[b_0].isupper() :              # check if character is uppercase
                    amp_0 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_0 = (asky-60)                   # assign amplitude
            elif sb_0[b_0] == &apos;-&apos; : amp_0 = 0           # character for amp = 0                         
            elif sb_0[b_0] == &apos;&gt;&apos; : amp_0 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_0 = blueDuration + 1           # set notetime_0 &gt; blueduration
                scoreText_0 = &apos;&apos;                        # clear scoreText_0
            if notetime_0 &gt;= blueDuration : break       # break out of the loop
	    if amp_0 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_0 = durlist_0[c_0]			# get duration from durlist
		amp_0 = amp_0-62			# move amp value to correct dbfs range (max=1)
		note_0 = notelist_0[c_0]		# get note from notelist
	        sp_0 = splist_0[c_0]			# get subpatch from splist
		pana_0 = panalist_0[c_0]		# get pana from panalist
		panb_0 = panblist_0[c_0]		# get panb from panblist
		nvat_0 = nvatlist_0[c_0]		# get nvat from nvatlist
		nvac_0 = nvaclist_0[c_0]		# get nvac from nvatlist
		nvpa_0 = nvpalist_0[c_0]		# get nvpa from nvpalist
		nvta_0 = nvtalist_0[c_0]		# get nvta from nvtalist
		nvxa_0 = nvxalist_0[c_0]		# get nvxa from nvxalist
		nvpb_0 = nvpblist_0[c_0]		# get nvpb from nvpblist
		nvxb_0 = nvxblist_0[c_0]		# get nvxb from nvxblist
		nvpc_0 = nvpclist_0[c_0]		# get nvpc from nvpclist
		nvtc_0 = nvtclist_0[c_0]		# get nvtc from nvtclist
		nvxc_0 = nvxclist_0[c_0]		# get nvxc from nvxclist
		mat_0 = matlist_0[c_0]			# get mat from matlist
		mac_0 = maclist_0[c_0]			# get mac from maclist
		mpa_0 = mpalist_0[c_0]			# get mpa from mpalist
		mta_0 = mtalist_0[c_0]			# get mta from mtalist
		mxa_0 = mxalist_0[c_0]			# get mxa from mxalist
		mpb_0 = mpblist_0[c_0]			# get mpb from mpblist
		mxb_0 = mxblist_0[c_0]			# get mxb from mxblist
		mpc_0 = mpclist_0[c_0]			# get mpc from mpclist
		mtc_0 = mtclist_0[c_0]			# get mtc from mtclist
		mxc_0 = mxclist_0[c_0]			# get mxc from mxclist
		bnda_0 = bndalist_0[c_0]		# get bnda from bndalist
		bndb_0 = bndblist_0[c_0]		# get bndb from bndblist
		bndc_0 = bndclist_0[c_0]		# get bndc from bndclist
		bndt_0 = bndtlist_0[c_0]		# get bndt from bndtlist		
		bndu_0 = bndulist_0[c_0]		# get bndu from bndulist		
		bndv_0 = bndvlist_0[c_0]		# get bndv from bndvlist		
                c_0 = c_0 + 1
                scoreText_0 += &quot;i1 &quot;+str(notetime_0)+&quot; &quot;+str(dur_0)+&quot; &quot;+str(amp_0)+&quot; &quot;+str(note_0)+&quot; &quot;+str(sp_0)+&quot; &quot;+str(pana_0)+&quot; &quot;+str(panb_0)+&quot; &quot;+str(nvat_0)+&quot; &quot;+str(nvac_0)+&quot; &quot;+str(nvpa_0)+&quot; &quot;+str(nvta_0)+&quot; &quot;+str(nvxa_0)+&quot; &quot;+str(nvpb_0)+&quot; &quot;+str(nvxb_0)+&quot; &quot;+str(nvpc_0)+&quot; &quot;+str(nvtc_0)+&quot; &quot;+str(nvxc_0)+&quot; &quot;+str(mat_0)+&quot; &quot;+str(mac_0)+&quot; &quot;+str(mpa_0)+&quot; &quot;+str(mta_0)+&quot; &quot;+str(mxa_0)+&quot; &quot;+str(mpb_0)+&quot; &quot;+str(mxb_0)+&quot; &quot;+str(mpc_0)+&quot; &quot;+str(mtc_0)+&quot; &quot;+str(mxc_0)+&quot; &quot;+str(bnda_0)+&quot; &quot;+str(bndb_0)+&quot; &quot;+str(bndc_0)+&quot; &quot;+str(bndt_0)+&quot; &quot;+str(bndu_0)+&quot; &quot;+str(bndv_0)+&quot; \n&quot;
            notetime_0 = notetime_0 + subeat_0                      # increment notetime by subeat time value
    i_0 = i_0 + 1
    c_0 = 0
score = scoreText_0
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>55.0</startTime>
          <name>Ringer_0d</name>
          <backgroundColor>-11495836</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_0 - 3h13TET
scoreText_0 = &quot;&quot;                              	# scoreText_0 is cleared
bart_0 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_0 = [&apos;e&apos;,&apos;d&apos;,&apos;f&apos;]			# rhythm
bpb_0 = len(rhythmr0_0)                         # beats per bar
beat_0 = bart_0/bpb_0                           # time of beat in seconds
notetime_0 = 0                                  # set intitial note start time
durlist_0 = [1.66,1.66,1.66]			# note duration list
notelist_0 = [54,56,57]				# note list
splist_0 = [1,1,1]				# subpatch list
panalist_0 = [-.5,-.5,-.45]			# pana list
panblist_0 = [-.45,-.55,-.5]			# panb list
nvatlist_0 = [.55,.55,.55]			# nvat list
nvaclist_0 = [0,0,0]				# nvac list
nvpalist_0 = [1,1,1]				# nvpa list
nvtalist_0 = [.55,.55,.55]			# nvta list
nvxalist_0 = [0,0,0]			# nvxa list
nvpblist_0 = [1,1,1]			# nvpb list
nvxblist_0 = [0,0,0]			# nvxb list
nvpclist_0 = [.7,.7,.7]			# nvpc list
nvtclist_0 = [.3,.3,.3]			# nvtc list
nvxclist_0 = [2,2,2]			# nvxc list
matlist_0 = [.55,.55,.55]		# mat list
maclist_0 = [0,0,0]			# mac list
mpalist_0 = [.3,.3,.3]			# mpa list
mtalist_0 = [.55,.55,.55]		# mta list
mxalist_0 = [0,0,0]			# mxa list
mpblist_0 = [.3,.3,.3]			# mpb list
mxblist_0 = [0,0,0]			# mxb list
mpclist_0 = [.1,.1,.1]		# mpc list
mtclist_0 = [.3,.3,.3]			# mtc list
mxclist_0 = [2,2,2]			# mxc list
bndalist_0 = [1,1,1]			# bnda list
bndblist_0 = [1,1,1]			# bndb list
bndclist_0 = [1,1,1]			# bndc list
bndtlist_0 = [.5,.5,.5]			# bndt list
bndulist_0 = [.5,.5,.5]			# bndu list
bndvlist_0 = [.5,.5,.5]			# bndv list
i_0 = 0						# loop iteration counter
c_0 = 0						# note iteration counter
while i_0 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_0 in range(bpb_0) :                           # loop through the items in the rhythm list
        sb_0 = rhythmr0_0[a_0]                          # sb is current item in the rhythm list
        subeat_0 = beat_0/len(sb_0)                     # subeat is the number of sub-beats in the beat
        for b_0 in range(len(sb_0)) :                   # loop through the items in the beat string
            if sb_0[b_0].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_0[b_0])                   # get ascii number of the character
                if sb_0[b_0].isdigit() :                # check if character is numeric
                    amp_0 = (asky-47)                   # assign amplitude
                elif sb_0[b_0].isupper() :              # check if character is uppercase
                    amp_0 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_0 = (asky-60)                   # assign amplitude
            elif sb_0[b_0] == &apos;-&apos; : amp_0 = 0           # character for amp = 0                         
            elif sb_0[b_0] == &apos;&gt;&apos; : amp_0 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_0 = blueDuration + 1           # set notetime_0 &gt; blueduration
                scoreText_0 = &apos;&apos;                        # clear scoreText_0
            if notetime_0 &gt;= blueDuration : break       # break out of the loop
	    if amp_0 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_0 = durlist_0[c_0]			# get duration from durlist
		amp_0 = amp_0-62			# move amp value to correct dbfs range (max=1)
		note_0 = notelist_0[c_0]		# get note from notelist
	        sp_0 = splist_0[c_0]			# get subpatch from splist
		pana_0 = panalist_0[c_0]		# get pana from panalist
		panb_0 = panblist_0[c_0]		# get panb from panblist
		nvat_0 = nvatlist_0[c_0]		# get nvat from nvatlist
		nvac_0 = nvaclist_0[c_0]		# get nvac from nvatlist
		nvpa_0 = nvpalist_0[c_0]		# get nvpa from nvpalist
		nvta_0 = nvtalist_0[c_0]		# get nvta from nvtalist
		nvxa_0 = nvxalist_0[c_0]		# get nvxa from nvxalist
		nvpb_0 = nvpblist_0[c_0]		# get nvpb from nvpblist
		nvxb_0 = nvxblist_0[c_0]		# get nvxb from nvxblist
		nvpc_0 = nvpclist_0[c_0]		# get nvpc from nvpclist
		nvtc_0 = nvtclist_0[c_0]		# get nvtc from nvtclist
		nvxc_0 = nvxclist_0[c_0]		# get nvxc from nvxclist
		mat_0 = matlist_0[c_0]			# get mat from matlist
		mac_0 = maclist_0[c_0]			# get mac from maclist
		mpa_0 = mpalist_0[c_0]			# get mpa from mpalist
		mta_0 = mtalist_0[c_0]			# get mta from mtalist
		mxa_0 = mxalist_0[c_0]			# get mxa from mxalist
		mpb_0 = mpblist_0[c_0]			# get mpb from mpblist
		mxb_0 = mxblist_0[c_0]			# get mxb from mxblist
		mpc_0 = mpclist_0[c_0]			# get mpc from mpclist
		mtc_0 = mtclist_0[c_0]			# get mtc from mtclist
		mxc_0 = mxclist_0[c_0]			# get mxc from mxclist
		bnda_0 = bndalist_0[c_0]		# get bnda from bndalist
		bndb_0 = bndblist_0[c_0]		# get bndb from bndblist
		bndc_0 = bndclist_0[c_0]		# get bndc from bndclist
		bndt_0 = bndtlist_0[c_0]		# get bndt from bndtlist		
		bndu_0 = bndulist_0[c_0]		# get bndu from bndulist		
		bndv_0 = bndvlist_0[c_0]		# get bndv from bndvlist		
                c_0 = c_0 + 1
                scoreText_0 += &quot;i1 &quot;+str(notetime_0)+&quot; &quot;+str(dur_0)+&quot; &quot;+str(amp_0)+&quot; &quot;+str(note_0)+&quot; &quot;+str(sp_0)+&quot; &quot;+str(pana_0)+&quot; &quot;+str(panb_0)+&quot; &quot;+str(nvat_0)+&quot; &quot;+str(nvac_0)+&quot; &quot;+str(nvpa_0)+&quot; &quot;+str(nvta_0)+&quot; &quot;+str(nvxa_0)+&quot; &quot;+str(nvpb_0)+&quot; &quot;+str(nvxb_0)+&quot; &quot;+str(nvpc_0)+&quot; &quot;+str(nvtc_0)+&quot; &quot;+str(nvxc_0)+&quot; &quot;+str(mat_0)+&quot; &quot;+str(mac_0)+&quot; &quot;+str(mpa_0)+&quot; &quot;+str(mta_0)+&quot; &quot;+str(mxa_0)+&quot; &quot;+str(mpb_0)+&quot; &quot;+str(mxb_0)+&quot; &quot;+str(mpc_0)+&quot; &quot;+str(mtc_0)+&quot; &quot;+str(mxc_0)+&quot; &quot;+str(bnda_0)+&quot; &quot;+str(bndb_0)+&quot; &quot;+str(bndc_0)+&quot; &quot;+str(bndt_0)+&quot; &quot;+str(bndu_0)+&quot; &quot;+str(bndv_0)+&quot; \n&quot;
            notetime_0 = notetime_0 + subeat_0                      # increment notetime by subeat time value
    i_0 = i_0 + 1
    c_0 = 0
score = scoreText_0
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>60.0</startTime>
          <name>Ringer_0f</name>
          <backgroundColor>-11495836</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_0 - 3h13TET
scoreText_0 = &quot;&quot;                              	# scoreText_0 is cleared
bart_0 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_0 = [&apos;f&apos;,&apos;e&apos;,&apos;g&apos;]			# rhythm
bpb_0 = len(rhythmr0_0)                         # beats per bar
beat_0 = bart_0/bpb_0                           # time of beat in seconds
notetime_0 = 0                                  # set intitial note start time
durlist_0 = [1.66,1.66,2.66]			# note duration list
notelist_0 = [56,54,53]				# note list
splist_0 = [1,1,1]				# subpatch list
panalist_0 = [-.5,-.5,-.45]			# pana list
panblist_0 = [-.45,-.55,-.5]			# panb list
nvatlist_0 = [.55,.55,.55]			# nvat list
nvaclist_0 = [0,0,0]				# nvac list
nvpalist_0 = [1,1,1]				# nvpa list
nvtalist_0 = [.55,.55,.55]			# nvta list
nvxalist_0 = [0,0,0]			# nvxa list
nvpblist_0 = [1,1,1]			# nvpb list
nvxblist_0 = [0,0,0]			# nvxb list
nvpclist_0 = [.7,.7,.7]			# nvpc list
nvtclist_0 = [.3,.3,.3]			# nvtc list
nvxclist_0 = [2,2,2]			# nvxc list
matlist_0 = [.55,.55,.55]		# mat list
maclist_0 = [0,0,0]			# mac list
mpalist_0 = [.3,.3,.3]			# mpa list
mtalist_0 = [.55,.55,.55]		# mta list
mxalist_0 = [0,0,0]			# mxa list
mpblist_0 = [.3,.3,.3]			# mpb list
mxblist_0 = [0,0,0]			# mxb list
mpclist_0 = [.1,.1,.1]		# mpc list
mtclist_0 = [.3,.3,.3]			# mtc list
mxclist_0 = [2,2,2]			# mxc list
bndalist_0 = [1,1,1]			# bnda list
bndblist_0 = [1,1,1]			# bndb list
bndclist_0 = [1,1,1]			# bndc list
bndtlist_0 = [.5,.5,.5]			# bndt list
bndulist_0 = [.5,.5,.5]			# bndu list
bndvlist_0 = [.5,.5,.5]			# bndv list
i_0 = 0						# loop iteration counter
c_0 = 0						# note iteration counter
while i_0 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_0 in range(bpb_0) :                           # loop through the items in the rhythm list
        sb_0 = rhythmr0_0[a_0]                          # sb is current item in the rhythm list
        subeat_0 = beat_0/len(sb_0)                     # subeat is the number of sub-beats in the beat
        for b_0 in range(len(sb_0)) :                   # loop through the items in the beat string
            if sb_0[b_0].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_0[b_0])                   # get ascii number of the character
                if sb_0[b_0].isdigit() :                # check if character is numeric
                    amp_0 = (asky-47)                   # assign amplitude
                elif sb_0[b_0].isupper() :              # check if character is uppercase
                    amp_0 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_0 = (asky-60)                   # assign amplitude
            elif sb_0[b_0] == &apos;-&apos; : amp_0 = 0           # character for amp = 0                         
            elif sb_0[b_0] == &apos;&gt;&apos; : amp_0 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_0 = blueDuration + 1           # set notetime_0 &gt; blueduration
                scoreText_0 = &apos;&apos;                        # clear scoreText_0
            if notetime_0 &gt;= blueDuration : break       # break out of the loop
	    if amp_0 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_0 = durlist_0[c_0]			# get duration from durlist
		amp_0 = amp_0-62			# move amp value to correct dbfs range (max=1)
		note_0 = notelist_0[c_0]		# get note from notelist
	        sp_0 = splist_0[c_0]			# get subpatch from splist
		pana_0 = panalist_0[c_0]		# get pana from panalist
		panb_0 = panblist_0[c_0]		# get panb from panblist
		nvat_0 = nvatlist_0[c_0]		# get nvat from nvatlist
		nvac_0 = nvaclist_0[c_0]		# get nvac from nvatlist
		nvpa_0 = nvpalist_0[c_0]		# get nvpa from nvpalist
		nvta_0 = nvtalist_0[c_0]		# get nvta from nvtalist
		nvxa_0 = nvxalist_0[c_0]		# get nvxa from nvxalist
		nvpb_0 = nvpblist_0[c_0]		# get nvpb from nvpblist
		nvxb_0 = nvxblist_0[c_0]		# get nvxb from nvxblist
		nvpc_0 = nvpclist_0[c_0]		# get nvpc from nvpclist
		nvtc_0 = nvtclist_0[c_0]		# get nvtc from nvtclist
		nvxc_0 = nvxclist_0[c_0]		# get nvxc from nvxclist
		mat_0 = matlist_0[c_0]			# get mat from matlist
		mac_0 = maclist_0[c_0]			# get mac from maclist
		mpa_0 = mpalist_0[c_0]			# get mpa from mpalist
		mta_0 = mtalist_0[c_0]			# get mta from mtalist
		mxa_0 = mxalist_0[c_0]			# get mxa from mxalist
		mpb_0 = mpblist_0[c_0]			# get mpb from mpblist
		mxb_0 = mxblist_0[c_0]			# get mxb from mxblist
		mpc_0 = mpclist_0[c_0]			# get mpc from mpclist
		mtc_0 = mtclist_0[c_0]			# get mtc from mtclist
		mxc_0 = mxclist_0[c_0]			# get mxc from mxclist
		bnda_0 = bndalist_0[c_0]		# get bnda from bndalist
		bndb_0 = bndblist_0[c_0]		# get bndb from bndblist
		bndc_0 = bndclist_0[c_0]		# get bndc from bndclist
		bndt_0 = bndtlist_0[c_0]		# get bndt from bndtlist		
		bndu_0 = bndulist_0[c_0]		# get bndu from bndulist		
		bndv_0 = bndvlist_0[c_0]		# get bndv from bndvlist		
                c_0 = c_0 + 1
                scoreText_0 += &quot;i1 &quot;+str(notetime_0)+&quot; &quot;+str(dur_0)+&quot; &quot;+str(amp_0)+&quot; &quot;+str(note_0)+&quot; &quot;+str(sp_0)+&quot; &quot;+str(pana_0)+&quot; &quot;+str(panb_0)+&quot; &quot;+str(nvat_0)+&quot; &quot;+str(nvac_0)+&quot; &quot;+str(nvpa_0)+&quot; &quot;+str(nvta_0)+&quot; &quot;+str(nvxa_0)+&quot; &quot;+str(nvpb_0)+&quot; &quot;+str(nvxb_0)+&quot; &quot;+str(nvpc_0)+&quot; &quot;+str(nvtc_0)+&quot; &quot;+str(nvxc_0)+&quot; &quot;+str(mat_0)+&quot; &quot;+str(mac_0)+&quot; &quot;+str(mpa_0)+&quot; &quot;+str(mta_0)+&quot; &quot;+str(mxa_0)+&quot; &quot;+str(mpb_0)+&quot; &quot;+str(mxb_0)+&quot; &quot;+str(mpc_0)+&quot; &quot;+str(mtc_0)+&quot; &quot;+str(mxc_0)+&quot; &quot;+str(bnda_0)+&quot; &quot;+str(bndb_0)+&quot; &quot;+str(bndc_0)+&quot; &quot;+str(bndt_0)+&quot; &quot;+str(bndu_0)+&quot; &quot;+str(bndv_0)+&quot; \n&quot;
            notetime_0 = notetime_0 + subeat_0                      # increment notetime by subeat time value
    i_0 = i_0 + 1
    c_0 = 0
score = scoreText_0
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>66.0</startTime>
          <name>Ringer_4a</name>
          <backgroundColor>-11495836</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_0 - 3h13TET
scoreText_0 = &quot;&quot;                              	# scoreText_0 is cleared
bart_0 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_0 = [&apos;e&apos;,&apos;d&apos;,&apos;f&apos;]			# rhythm
bpb_0 = len(rhythmr0_0)                         # beats per bar
beat_0 = bart_0/bpb_0                           # time of beat in seconds
notetime_0 = 0                                  # set intitial note start time
durlist_0 = [1.66,1.66,1.66]			# note duration list
notelist_0 = [53,52,51]				# note list
splist_0 = [3,3,3]				# subpatch list
panalist_0 = [-.5,-.5,-.45]			# pana list
panblist_0 = [-.45,-.55,-.5]			# panb list
nvatlist_0 = [.55,.55,.55]			# nvat list
nvaclist_0 = [0,0,0]				# nvac list
nvpalist_0 = [1,1,1]				# nvpa list
nvtalist_0 = [.55,.55,.55]			# nvta list
nvxalist_0 = [0,0,0]			# nvxa list
nvpblist_0 = [1,1,1]			# nvpb list
nvxblist_0 = [0,0,0]			# nvxb list
nvpclist_0 = [.7,.7,.7]			# nvpc list
nvtclist_0 = [.3,.3,.3]			# nvtc list
nvxclist_0 = [2,2,2]			# nvxc list
matlist_0 = [.55,.55,.55]		# mat list
maclist_0 = [0,0,0]			# mac list
mpalist_0 = [.3,.3,.3]			# mpa list
mtalist_0 = [.55,.55,.55]		# mta list
mxalist_0 = [0,0,0]			# mxa list
mpblist_0 = [.3,.3,.3]			# mpb list
mxblist_0 = [0,0,0]			# mxb list
mpclist_0 = [.15,.15,.15]		# mpc list
mtclist_0 = [.1,.1,.1]			# mtc list
mxclist_0 = [2,2,2]			# mxc list
bndalist_0 = [1,1,1]			# bnda list
bndblist_0 = [1,1,1]			# bndb list
bndclist_0 = [1,1,1]			# bndc list
bndtlist_0 = [.5,.5,.5]			# bndt list
bndulist_0 = [.5,.5,.5]			# bndu list
bndvlist_0 = [.5,.5,.5]			# bndv list
i_0 = 0						# loop iteration counter
c_0 = 0						# note iteration counter
while i_0 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_0 in range(bpb_0) :                           # loop through the items in the rhythm list
        sb_0 = rhythmr0_0[a_0]                          # sb is current item in the rhythm list
        subeat_0 = beat_0/len(sb_0)                     # subeat is the number of sub-beats in the beat
        for b_0 in range(len(sb_0)) :                   # loop through the items in the beat string
            if sb_0[b_0].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_0[b_0])                   # get ascii number of the character
                if sb_0[b_0].isdigit() :                # check if character is numeric
                    amp_0 = (asky-47)                   # assign amplitude
                elif sb_0[b_0].isupper() :              # check if character is uppercase
                    amp_0 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_0 = (asky-60)                   # assign amplitude
            elif sb_0[b_0] == &apos;-&apos; : amp_0 = 0           # character for amp = 0                         
            elif sb_0[b_0] == &apos;&gt;&apos; : amp_0 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_0 = blueDuration + 1           # set notetime_0 &gt; blueduration
                scoreText_0 = &apos;&apos;                        # clear scoreText_0
            if notetime_0 &gt;= blueDuration : break       # break out of the loop
	    if amp_0 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_0 = durlist_0[c_0]			# get duration from durlist
		amp_0 = amp_0-62			# move amp value to correct dbfs range (max=1)
		note_0 = notelist_0[c_0]		# get note from notelist
	        sp_0 = splist_0[c_0]			# get subpatch from splist
		pana_0 = panalist_0[c_0]		# get pana from panalist
		panb_0 = panblist_0[c_0]		# get panb from panblist
		nvat_0 = nvatlist_0[c_0]		# get nvat from nvatlist
		nvac_0 = nvaclist_0[c_0]		# get nvac from nvatlist
		nvpa_0 = nvpalist_0[c_0]		# get nvpa from nvpalist
		nvta_0 = nvtalist_0[c_0]		# get nvta from nvtalist
		nvxa_0 = nvxalist_0[c_0]		# get nvxa from nvxalist
		nvpb_0 = nvpblist_0[c_0]		# get nvpb from nvpblist
		nvxb_0 = nvxblist_0[c_0]		# get nvxb from nvxblist
		nvpc_0 = nvpclist_0[c_0]		# get nvpc from nvpclist
		nvtc_0 = nvtclist_0[c_0]		# get nvtc from nvtclist
		nvxc_0 = nvxclist_0[c_0]		# get nvxc from nvxclist
		mat_0 = matlist_0[c_0]			# get mat from matlist
		mac_0 = maclist_0[c_0]			# get mac from maclist
		mpa_0 = mpalist_0[c_0]			# get mpa from mpalist
		mta_0 = mtalist_0[c_0]			# get mta from mtalist
		mxa_0 = mxalist_0[c_0]			# get mxa from mxalist
		mpb_0 = mpblist_0[c_0]			# get mpb from mpblist
		mxb_0 = mxblist_0[c_0]			# get mxb from mxblist
		mpc_0 = mpclist_0[c_0]			# get mpc from mpclist
		mtc_0 = mtclist_0[c_0]			# get mtc from mtclist
		mxc_0 = mxclist_0[c_0]			# get mxc from mxclist
		bnda_0 = bndalist_0[c_0]		# get bnda from bndalist
		bndb_0 = bndblist_0[c_0]		# get bndb from bndblist
		bndc_0 = bndclist_0[c_0]		# get bndc from bndclist
		bndt_0 = bndtlist_0[c_0]		# get bndt from bndtlist		
		bndu_0 = bndulist_0[c_0]		# get bndu from bndulist		
		bndv_0 = bndvlist_0[c_0]		# get bndv from bndvlist		
                c_0 = c_0 + 1
                scoreText_0 += &quot;i1 &quot;+str(notetime_0)+&quot; &quot;+str(dur_0)+&quot; &quot;+str(amp_0)+&quot; &quot;+str(note_0)+&quot; &quot;+str(sp_0)+&quot; &quot;+str(pana_0)+&quot; &quot;+str(panb_0)+&quot; &quot;+str(nvat_0)+&quot; &quot;+str(nvac_0)+&quot; &quot;+str(nvpa_0)+&quot; &quot;+str(nvta_0)+&quot; &quot;+str(nvxa_0)+&quot; &quot;+str(nvpb_0)+&quot; &quot;+str(nvxb_0)+&quot; &quot;+str(nvpc_0)+&quot; &quot;+str(nvtc_0)+&quot; &quot;+str(nvxc_0)+&quot; &quot;+str(mat_0)+&quot; &quot;+str(mac_0)+&quot; &quot;+str(mpa_0)+&quot; &quot;+str(mta_0)+&quot; &quot;+str(mxa_0)+&quot; &quot;+str(mpb_0)+&quot; &quot;+str(mxb_0)+&quot; &quot;+str(mpc_0)+&quot; &quot;+str(mtc_0)+&quot; &quot;+str(mxc_0)+&quot; &quot;+str(bnda_0)+&quot; &quot;+str(bndb_0)+&quot; &quot;+str(bndc_0)+&quot; &quot;+str(bndt_0)+&quot; &quot;+str(bndu_0)+&quot; &quot;+str(bndv_0)+&quot; \n&quot;
            notetime_0 = notetime_0 + subeat_0                      # increment notetime by subeat time value
    i_0 = i_0 + 1
    c_0 = 0
score = scoreText_0
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>71.0</startTime>
          <name>Ringer_4b</name>
          <backgroundColor>-11495836</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_0 - 3h13TET
scoreText_0 = &quot;&quot;                              	# scoreText_0 is cleared
bart_0 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_0 = [&apos;e&apos;,&apos;d&apos;,&apos;f&apos;]			# rhythm
bpb_0 = len(rhythmr0_0)                         # beats per bar
beat_0 = bart_0/bpb_0                           # time of beat in seconds
notetime_0 = 0                                  # set intitial note start time
durlist_0 = [1.66,1.66,1.66]			# note duration list
notelist_0 = [52,51,50]				# note list
splist_0 = [3,3,3]				# subpatch list
panalist_0 = [-.5,-.5,-.45]			# pana list
panblist_0 = [-.45,-.55,-.5]			# panb list
nvatlist_0 = [.55,.55,.55]			# nvat list
nvaclist_0 = [0,0,0]				# nvac list
nvpalist_0 = [1,1,1]				# nvpa list
nvtalist_0 = [.55,.55,.55]			# nvta list
nvxalist_0 = [0,0,0]			# nvxa list
nvpblist_0 = [1,1,1]			# nvpb list
nvxblist_0 = [0,0,0]			# nvxb list
nvpclist_0 = [.7,.7,.7]			# nvpc list
nvtclist_0 = [.3,.3,.3]			# nvtc list
nvxclist_0 = [2,2,2]			# nvxc list
matlist_0 = [.55,.55,.55]		# mat list
maclist_0 = [0,0,0]			# mac list
mpalist_0 = [.3,.3,.3]			# mpa list
mtalist_0 = [.55,.55,.55]		# mta list
mxalist_0 = [0,0,0]			# mxa list
mpblist_0 = [.3,.3,.3]			# mpb list
mxblist_0 = [0,0,0]			# mxb list
mpclist_0 = [.1,.1,.1]		# mpc list
mtclist_0 = [.3,.3,.3]			# mtc list
mxclist_0 = [2,2,2]			# mxc list
bndalist_0 = [1,1,1]			# bnda list
bndblist_0 = [1,1,1]			# bndb list
bndclist_0 = [1,1,1]			# bndc list
bndtlist_0 = [.5,.5,.5]			# bndt list
bndulist_0 = [.5,.5,.5]			# bndu list
bndvlist_0 = [.5,.5,.5]			# bndv list
i_0 = 0						# loop iteration counter
c_0 = 0						# note iteration counter
while i_0 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_0 in range(bpb_0) :                           # loop through the items in the rhythm list
        sb_0 = rhythmr0_0[a_0]                          # sb is current item in the rhythm list
        subeat_0 = beat_0/len(sb_0)                     # subeat is the number of sub-beats in the beat
        for b_0 in range(len(sb_0)) :                   # loop through the items in the beat string
            if sb_0[b_0].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_0[b_0])                   # get ascii number of the character
                if sb_0[b_0].isdigit() :                # check if character is numeric
                    amp_0 = (asky-47)                   # assign amplitude
                elif sb_0[b_0].isupper() :              # check if character is uppercase
                    amp_0 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_0 = (asky-60)                   # assign amplitude
            elif sb_0[b_0] == &apos;-&apos; : amp_0 = 0           # character for amp = 0                         
            elif sb_0[b_0] == &apos;&gt;&apos; : amp_0 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_0 = blueDuration + 1           # set notetime_0 &gt; blueduration
                scoreText_0 = &apos;&apos;                        # clear scoreText_0
            if notetime_0 &gt;= blueDuration : break       # break out of the loop
	    if amp_0 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_0 = durlist_0[c_0]			# get duration from durlist
		amp_0 = amp_0-62			# move amp value to correct dbfs range (max=1)
		note_0 = notelist_0[c_0]		# get note from notelist
	        sp_0 = splist_0[c_0]			# get subpatch from splist
		pana_0 = panalist_0[c_0]		# get pana from panalist
		panb_0 = panblist_0[c_0]		# get panb from panblist
		nvat_0 = nvatlist_0[c_0]		# get nvat from nvatlist
		nvac_0 = nvaclist_0[c_0]		# get nvac from nvatlist
		nvpa_0 = nvpalist_0[c_0]		# get nvpa from nvpalist
		nvta_0 = nvtalist_0[c_0]		# get nvta from nvtalist
		nvxa_0 = nvxalist_0[c_0]		# get nvxa from nvxalist
		nvpb_0 = nvpblist_0[c_0]		# get nvpb from nvpblist
		nvxb_0 = nvxblist_0[c_0]		# get nvxb from nvxblist
		nvpc_0 = nvpclist_0[c_0]		# get nvpc from nvpclist
		nvtc_0 = nvtclist_0[c_0]		# get nvtc from nvtclist
		nvxc_0 = nvxclist_0[c_0]		# get nvxc from nvxclist
		mat_0 = matlist_0[c_0]			# get mat from matlist
		mac_0 = maclist_0[c_0]			# get mac from maclist
		mpa_0 = mpalist_0[c_0]			# get mpa from mpalist
		mta_0 = mtalist_0[c_0]			# get mta from mtalist
		mxa_0 = mxalist_0[c_0]			# get mxa from mxalist
		mpb_0 = mpblist_0[c_0]			# get mpb from mpblist
		mxb_0 = mxblist_0[c_0]			# get mxb from mxblist
		mpc_0 = mpclist_0[c_0]			# get mpc from mpclist
		mtc_0 = mtclist_0[c_0]			# get mtc from mtclist
		mxc_0 = mxclist_0[c_0]			# get mxc from mxclist
		bnda_0 = bndalist_0[c_0]		# get bnda from bndalist
		bndb_0 = bndblist_0[c_0]		# get bndb from bndblist
		bndc_0 = bndclist_0[c_0]		# get bndc from bndclist
		bndt_0 = bndtlist_0[c_0]		# get bndt from bndtlist		
		bndu_0 = bndulist_0[c_0]		# get bndu from bndulist		
		bndv_0 = bndvlist_0[c_0]		# get bndv from bndvlist		
                c_0 = c_0 + 1
                scoreText_0 += &quot;i1 &quot;+str(notetime_0)+&quot; &quot;+str(dur_0)+&quot; &quot;+str(amp_0)+&quot; &quot;+str(note_0)+&quot; &quot;+str(sp_0)+&quot; &quot;+str(pana_0)+&quot; &quot;+str(panb_0)+&quot; &quot;+str(nvat_0)+&quot; &quot;+str(nvac_0)+&quot; &quot;+str(nvpa_0)+&quot; &quot;+str(nvta_0)+&quot; &quot;+str(nvxa_0)+&quot; &quot;+str(nvpb_0)+&quot; &quot;+str(nvxb_0)+&quot; &quot;+str(nvpc_0)+&quot; &quot;+str(nvtc_0)+&quot; &quot;+str(nvxc_0)+&quot; &quot;+str(mat_0)+&quot; &quot;+str(mac_0)+&quot; &quot;+str(mpa_0)+&quot; &quot;+str(mta_0)+&quot; &quot;+str(mxa_0)+&quot; &quot;+str(mpb_0)+&quot; &quot;+str(mxb_0)+&quot; &quot;+str(mpc_0)+&quot; &quot;+str(mtc_0)+&quot; &quot;+str(mxc_0)+&quot; &quot;+str(bnda_0)+&quot; &quot;+str(bndb_0)+&quot; &quot;+str(bndc_0)+&quot; &quot;+str(bndt_0)+&quot; &quot;+str(bndu_0)+&quot; &quot;+str(bndv_0)+&quot; \n&quot;
            notetime_0 = notetime_0 + subeat_0                      # increment notetime by subeat time value
    i_0 = i_0 + 1
    c_0 = 0
score = scoreText_0
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>76.0</startTime>
          <name>Ringer_4c</name>
          <backgroundColor>-11495836</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_0 - 3h13TET
scoreText_0 = &quot;&quot;                              	# scoreText_0 is cleared
bart_0 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_0 = [&apos;e&apos;,&apos;d&apos;,&apos;f&apos;]			# rhythm
bpb_0 = len(rhythmr0_0)                         # beats per bar
beat_0 = bart_0/bpb_0                           # time of beat in seconds
notetime_0 = 0                                  # set intitial note start time
durlist_0 = [1.66,1.66,1.66]			# note duration list
notelist_0 = [51,52,53]				# note list
splist_0 = [3,3,3]				# subpatch list
panalist_0 = [-.5,-.5,-.45]			# pana list
panblist_0 = [-.45,-.55,-.5]			# panb list
nvatlist_0 = [.55,.55,.55]			# nvat list
nvaclist_0 = [0,0,0]				# nvac list
nvpalist_0 = [1,1,1]				# nvpa list
nvtalist_0 = [.55,.55,.55]			# nvta list
nvxalist_0 = [0,0,0]			# nvxa list
nvpblist_0 = [1,1,1]			# nvpb list
nvxblist_0 = [0,0,0]			# nvxb list
nvpclist_0 = [.7,.7,.7]			# nvpc list
nvtclist_0 = [.3,.3,.3]			# nvtc list
nvxclist_0 = [2,2,2]			# nvxc list
matlist_0 = [.55,.55,.55]		# mat list
maclist_0 = [0,0,0]			# mac list
mpalist_0 = [.3,.3,.3]			# mpa list
mtalist_0 = [.55,.55,.55]		# mta list
mxalist_0 = [0,0,0]			# mxa list
mpblist_0 = [.3,.3,.3]			# mpb list
mxblist_0 = [0,0,0]			# mxb list
mpclist_0 = [.1,.1,.1]		# mpc list
mtclist_0 = [.3,.3,.3]			# mtc list
mxclist_0 = [2,2,2]			# mxc list
bndalist_0 = [1,1,1]			# bnda list
bndblist_0 = [1,1,1]			# bndb list
bndclist_0 = [1,1,1]			# bndc list
bndtlist_0 = [.5,.5,.5]			# bndt list
bndulist_0 = [.5,.5,.5]			# bndu list
bndvlist_0 = [.5,.5,.5]			# bndv list
i_0 = 0						# loop iteration counter
c_0 = 0						# note iteration counter
while i_0 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_0 in range(bpb_0) :                           # loop through the items in the rhythm list
        sb_0 = rhythmr0_0[a_0]                          # sb is current item in the rhythm list
        subeat_0 = beat_0/len(sb_0)                     # subeat is the number of sub-beats in the beat
        for b_0 in range(len(sb_0)) :                   # loop through the items in the beat string
            if sb_0[b_0].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_0[b_0])                   # get ascii number of the character
                if sb_0[b_0].isdigit() :                # check if character is numeric
                    amp_0 = (asky-47)                   # assign amplitude
                elif sb_0[b_0].isupper() :              # check if character is uppercase
                    amp_0 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_0 = (asky-60)                   # assign amplitude
            elif sb_0[b_0] == &apos;-&apos; : amp_0 = 0           # character for amp = 0                         
            elif sb_0[b_0] == &apos;&gt;&apos; : amp_0 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_0 = blueDuration + 1           # set notetime_0 &gt; blueduration
                scoreText_0 = &apos;&apos;                        # clear scoreText_0
            if notetime_0 &gt;= blueDuration : break       # break out of the loop
	    if amp_0 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_0 = durlist_0[c_0]			# get duration from durlist
		amp_0 = amp_0-62			# move amp value to correct dbfs range (max=1)
		note_0 = notelist_0[c_0]		# get note from notelist
	        sp_0 = splist_0[c_0]			# get subpatch from splist
		pana_0 = panalist_0[c_0]		# get pana from panalist
		panb_0 = panblist_0[c_0]		# get panb from panblist
		nvat_0 = nvatlist_0[c_0]		# get nvat from nvatlist
		nvac_0 = nvaclist_0[c_0]		# get nvac from nvatlist
		nvpa_0 = nvpalist_0[c_0]		# get nvpa from nvpalist
		nvta_0 = nvtalist_0[c_0]		# get nvta from nvtalist
		nvxa_0 = nvxalist_0[c_0]		# get nvxa from nvxalist
		nvpb_0 = nvpblist_0[c_0]		# get nvpb from nvpblist
		nvxb_0 = nvxblist_0[c_0]		# get nvxb from nvxblist
		nvpc_0 = nvpclist_0[c_0]		# get nvpc from nvpclist
		nvtc_0 = nvtclist_0[c_0]		# get nvtc from nvtclist
		nvxc_0 = nvxclist_0[c_0]		# get nvxc from nvxclist
		mat_0 = matlist_0[c_0]			# get mat from matlist
		mac_0 = maclist_0[c_0]			# get mac from maclist
		mpa_0 = mpalist_0[c_0]			# get mpa from mpalist
		mta_0 = mtalist_0[c_0]			# get mta from mtalist
		mxa_0 = mxalist_0[c_0]			# get mxa from mxalist
		mpb_0 = mpblist_0[c_0]			# get mpb from mpblist
		mxb_0 = mxblist_0[c_0]			# get mxb from mxblist
		mpc_0 = mpclist_0[c_0]			# get mpc from mpclist
		mtc_0 = mtclist_0[c_0]			# get mtc from mtclist
		mxc_0 = mxclist_0[c_0]			# get mxc from mxclist
		bnda_0 = bndalist_0[c_0]		# get bnda from bndalist
		bndb_0 = bndblist_0[c_0]		# get bndb from bndblist
		bndc_0 = bndclist_0[c_0]		# get bndc from bndclist
		bndt_0 = bndtlist_0[c_0]		# get bndt from bndtlist		
		bndu_0 = bndulist_0[c_0]		# get bndu from bndulist		
		bndv_0 = bndvlist_0[c_0]		# get bndv from bndvlist		
                c_0 = c_0 + 1
                scoreText_0 += &quot;i1 &quot;+str(notetime_0)+&quot; &quot;+str(dur_0)+&quot; &quot;+str(amp_0)+&quot; &quot;+str(note_0)+&quot; &quot;+str(sp_0)+&quot; &quot;+str(pana_0)+&quot; &quot;+str(panb_0)+&quot; &quot;+str(nvat_0)+&quot; &quot;+str(nvac_0)+&quot; &quot;+str(nvpa_0)+&quot; &quot;+str(nvta_0)+&quot; &quot;+str(nvxa_0)+&quot; &quot;+str(nvpb_0)+&quot; &quot;+str(nvxb_0)+&quot; &quot;+str(nvpc_0)+&quot; &quot;+str(nvtc_0)+&quot; &quot;+str(nvxc_0)+&quot; &quot;+str(mat_0)+&quot; &quot;+str(mac_0)+&quot; &quot;+str(mpa_0)+&quot; &quot;+str(mta_0)+&quot; &quot;+str(mxa_0)+&quot; &quot;+str(mpb_0)+&quot; &quot;+str(mxb_0)+&quot; &quot;+str(mpc_0)+&quot; &quot;+str(mtc_0)+&quot; &quot;+str(mxc_0)+&quot; &quot;+str(bnda_0)+&quot; &quot;+str(bndb_0)+&quot; &quot;+str(bndc_0)+&quot; &quot;+str(bndt_0)+&quot; &quot;+str(bndu_0)+&quot; &quot;+str(bndv_0)+&quot; \n&quot;
            notetime_0 = notetime_0 + subeat_0                      # increment notetime by subeat time value
    i_0 = i_0 + 1
    c_0 = 0
score = scoreText_0
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>81.0</startTime>
          <name>Ringer_4d</name>
          <backgroundColor>-11495836</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_0 - 3h13TET
scoreText_0 = &quot;&quot;                              	# scoreText_0 is cleared
bart_0 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_0 = [&apos;e&apos;,&apos;d&apos;,&apos;f&apos;]			# rhythm
bpb_0 = len(rhythmr0_0)                         # beats per bar
beat_0 = bart_0/bpb_0                           # time of beat in seconds
notetime_0 = 0                                  # set intitial note start time
durlist_0 = [1.66,1.66,1.66]			# note duration list
notelist_0 = [50,51,52]				# note list
splist_0 = [3,3,3]				# subpatch list
panalist_0 = [-.5,-.5,-.45]			# pana list
panblist_0 = [-.45,-.55,-.5]			# panb list
nvatlist_0 = [.55,.55,.55]			# nvat list
nvaclist_0 = [0,0,0]				# nvac list
nvpalist_0 = [1,1,1]				# nvpa list
nvtalist_0 = [.55,.55,.55]			# nvta list
nvxalist_0 = [0,0,0]			# nvxa list
nvpblist_0 = [1,1,1]			# nvpb list
nvxblist_0 = [0,0,0]			# nvxb list
nvpclist_0 = [.7,.7,.7]			# nvpc list
nvtclist_0 = [.3,.3,.3]			# nvtc list
nvxclist_0 = [2,2,2]			# nvxc list
matlist_0 = [.55,.55,.55]		# mat list
maclist_0 = [0,0,0]			# mac list
mpalist_0 = [.3,.3,.3]			# mpa list
mtalist_0 = [.55,.55,.55]		# mta list
mxalist_0 = [0,0,0]			# mxa list
mpblist_0 = [.3,.3,.3]			# mpb list
mxblist_0 = [0,0,0]			# mxb list
mpclist_0 = [.1,.1,.1]		# mpc list
mtclist_0 = [.3,.3,.3]			# mtc list
mxclist_0 = [2,2,2]			# mxc list
bndalist_0 = [1,1,1]			# bnda list
bndblist_0 = [1,1,1]			# bndb list
bndclist_0 = [1,1,1]			# bndc list
bndtlist_0 = [.5,.5,.5]			# bndt list
bndulist_0 = [.5,.5,.5]			# bndu list
bndvlist_0 = [.5,.5,.5]			# bndv list
i_0 = 0						# loop iteration counter
c_0 = 0						# note iteration counter
while i_0 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_0 in range(bpb_0) :                           # loop through the items in the rhythm list
        sb_0 = rhythmr0_0[a_0]                          # sb is current item in the rhythm list
        subeat_0 = beat_0/len(sb_0)                     # subeat is the number of sub-beats in the beat
        for b_0 in range(len(sb_0)) :                   # loop through the items in the beat string
            if sb_0[b_0].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_0[b_0])                   # get ascii number of the character
                if sb_0[b_0].isdigit() :                # check if character is numeric
                    amp_0 = (asky-47)                   # assign amplitude
                elif sb_0[b_0].isupper() :              # check if character is uppercase
                    amp_0 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_0 = (asky-60)                   # assign amplitude
            elif sb_0[b_0] == &apos;-&apos; : amp_0 = 0           # character for amp = 0                         
            elif sb_0[b_0] == &apos;&gt;&apos; : amp_0 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_0 = blueDuration + 1           # set notetime_0 &gt; blueduration
                scoreText_0 = &apos;&apos;                        # clear scoreText_0
            if notetime_0 &gt;= blueDuration : break       # break out of the loop
	    if amp_0 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_0 = durlist_0[c_0]			# get duration from durlist
		amp_0 = amp_0-62			# move amp value to correct dbfs range (max=1)
		note_0 = notelist_0[c_0]		# get note from notelist
	        sp_0 = splist_0[c_0]			# get subpatch from splist
		pana_0 = panalist_0[c_0]		# get pana from panalist
		panb_0 = panblist_0[c_0]		# get panb from panblist
		nvat_0 = nvatlist_0[c_0]		# get nvat from nvatlist
		nvac_0 = nvaclist_0[c_0]		# get nvac from nvatlist
		nvpa_0 = nvpalist_0[c_0]		# get nvpa from nvpalist
		nvta_0 = nvtalist_0[c_0]		# get nvta from nvtalist
		nvxa_0 = nvxalist_0[c_0]		# get nvxa from nvxalist
		nvpb_0 = nvpblist_0[c_0]		# get nvpb from nvpblist
		nvxb_0 = nvxblist_0[c_0]		# get nvxb from nvxblist
		nvpc_0 = nvpclist_0[c_0]		# get nvpc from nvpclist
		nvtc_0 = nvtclist_0[c_0]		# get nvtc from nvtclist
		nvxc_0 = nvxclist_0[c_0]		# get nvxc from nvxclist
		mat_0 = matlist_0[c_0]			# get mat from matlist
		mac_0 = maclist_0[c_0]			# get mac from maclist
		mpa_0 = mpalist_0[c_0]			# get mpa from mpalist
		mta_0 = mtalist_0[c_0]			# get mta from mtalist
		mxa_0 = mxalist_0[c_0]			# get mxa from mxalist
		mpb_0 = mpblist_0[c_0]			# get mpb from mpblist
		mxb_0 = mxblist_0[c_0]			# get mxb from mxblist
		mpc_0 = mpclist_0[c_0]			# get mpc from mpclist
		mtc_0 = mtclist_0[c_0]			# get mtc from mtclist
		mxc_0 = mxclist_0[c_0]			# get mxc from mxclist
		bnda_0 = bndalist_0[c_0]		# get bnda from bndalist
		bndb_0 = bndblist_0[c_0]		# get bndb from bndblist
		bndc_0 = bndclist_0[c_0]		# get bndc from bndclist
		bndt_0 = bndtlist_0[c_0]		# get bndt from bndtlist		
		bndu_0 = bndulist_0[c_0]		# get bndu from bndulist		
		bndv_0 = bndvlist_0[c_0]		# get bndv from bndvlist		
                c_0 = c_0 + 1
                scoreText_0 += &quot;i1 &quot;+str(notetime_0)+&quot; &quot;+str(dur_0)+&quot; &quot;+str(amp_0)+&quot; &quot;+str(note_0)+&quot; &quot;+str(sp_0)+&quot; &quot;+str(pana_0)+&quot; &quot;+str(panb_0)+&quot; &quot;+str(nvat_0)+&quot; &quot;+str(nvac_0)+&quot; &quot;+str(nvpa_0)+&quot; &quot;+str(nvta_0)+&quot; &quot;+str(nvxa_0)+&quot; &quot;+str(nvpb_0)+&quot; &quot;+str(nvxb_0)+&quot; &quot;+str(nvpc_0)+&quot; &quot;+str(nvtc_0)+&quot; &quot;+str(nvxc_0)+&quot; &quot;+str(mat_0)+&quot; &quot;+str(mac_0)+&quot; &quot;+str(mpa_0)+&quot; &quot;+str(mta_0)+&quot; &quot;+str(mxa_0)+&quot; &quot;+str(mpb_0)+&quot; &quot;+str(mxb_0)+&quot; &quot;+str(mpc_0)+&quot; &quot;+str(mtc_0)+&quot; &quot;+str(mxc_0)+&quot; &quot;+str(bnda_0)+&quot; &quot;+str(bndb_0)+&quot; &quot;+str(bndc_0)+&quot; &quot;+str(bndt_0)+&quot; &quot;+str(bndu_0)+&quot; &quot;+str(bndv_0)+&quot; \n&quot;
            notetime_0 = notetime_0 + subeat_0                      # increment notetime by subeat time value
    i_0 = i_0 + 1
    c_0 = 0
score = scoreText_0
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>86.0</startTime>
          <name>Ringer_4e</name>
          <backgroundColor>-11495836</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_0 - 3h13TET
scoreText_0 = &quot;&quot;                              	# scoreText_0 is cleared
bart_0 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_0 = [&apos;f&apos;,&apos;e&apos;,&apos;g&apos;]			# rhythm
bpb_0 = len(rhythmr0_0)                         # beats per bar
beat_0 = bart_0/bpb_0                           # time of beat in seconds
notetime_0 = 0                                  # set intitial note start time
durlist_0 = [1.66,1.66,1.66]			# note duration list
notelist_0 = [51,50,49]				# note list
splist_0 = [3,3,3]				# subpatch list
panalist_0 = [-.5,-.5,-.45]			# pana list
panblist_0 = [-.45,-.55,-.5]			# panb list
nvatlist_0 = [.55,.55,.55]			# nvat list
nvaclist_0 = [0,0,0]				# nvac list
nvpalist_0 = [1,1,1]				# nvpa list
nvtalist_0 = [.55,.55,.55]			# nvta list
nvxalist_0 = [0,0,0]			# nvxa list
nvpblist_0 = [1,1,1]			# nvpb list
nvxblist_0 = [0,0,0]			# nvxb list
nvpclist_0 = [.7,.7,.7]			# nvpc list
nvtclist_0 = [.3,.3,.3]			# nvtc list
nvxclist_0 = [2,2,2]			# nvxc list
matlist_0 = [.55,.55,.55]		# mat list
maclist_0 = [0,0,0]			# mac list
mpalist_0 = [.3,.3,.3]			# mpa list
mtalist_0 = [.55,.55,.55]		# mta list
mxalist_0 = [0,0,0]			# mxa list
mpblist_0 = [.3,.3,.3]			# mpb list
mxblist_0 = [0,0,0]			# mxb list
mpclist_0 = [.1,.1,.1]		# mpc list
mtclist_0 = [.3,.3,.3]			# mtc list
mxclist_0 = [2,2,2]			# mxc list
bndalist_0 = [1,1,1]			# bnda list
bndblist_0 = [1,1,1]			# bndb list
bndclist_0 = [1,1,1]			# bndc list
bndtlist_0 = [.5,.5,.5]			# bndt list
bndulist_0 = [.5,.5,.5]			# bndu list
bndvlist_0 = [.5,.5,.5]			# bndv list
i_0 = 0						# loop iteration counter
c_0 = 0						# note iteration counter
while i_0 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_0 in range(bpb_0) :                           # loop through the items in the rhythm list
        sb_0 = rhythmr0_0[a_0]                          # sb is current item in the rhythm list
        subeat_0 = beat_0/len(sb_0)                     # subeat is the number of sub-beats in the beat
        for b_0 in range(len(sb_0)) :                   # loop through the items in the beat string
            if sb_0[b_0].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_0[b_0])                   # get ascii number of the character
                if sb_0[b_0].isdigit() :                # check if character is numeric
                    amp_0 = (asky-47)                   # assign amplitude
                elif sb_0[b_0].isupper() :              # check if character is uppercase
                    amp_0 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_0 = (asky-60)                   # assign amplitude
            elif sb_0[b_0] == &apos;-&apos; : amp_0 = 0           # character for amp = 0                         
            elif sb_0[b_0] == &apos;&gt;&apos; : amp_0 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_0 = blueDuration + 1           # set notetime_0 &gt; blueduration
                scoreText_0 = &apos;&apos;                        # clear scoreText_0
            if notetime_0 &gt;= blueDuration : break       # break out of the loop
	    if amp_0 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_0 = durlist_0[c_0]			# get duration from durlist
		amp_0 = amp_0-62			# move amp value to correct dbfs range (max=1)
		note_0 = notelist_0[c_0]		# get note from notelist
	        sp_0 = splist_0[c_0]			# get subpatch from splist
		pana_0 = panalist_0[c_0]		# get pana from panalist
		panb_0 = panblist_0[c_0]		# get panb from panblist
		nvat_0 = nvatlist_0[c_0]		# get nvat from nvatlist
		nvac_0 = nvaclist_0[c_0]		# get nvac from nvatlist
		nvpa_0 = nvpalist_0[c_0]		# get nvpa from nvpalist
		nvta_0 = nvtalist_0[c_0]		# get nvta from nvtalist
		nvxa_0 = nvxalist_0[c_0]		# get nvxa from nvxalist
		nvpb_0 = nvpblist_0[c_0]		# get nvpb from nvpblist
		nvxb_0 = nvxblist_0[c_0]		# get nvxb from nvxblist
		nvpc_0 = nvpclist_0[c_0]		# get nvpc from nvpclist
		nvtc_0 = nvtclist_0[c_0]		# get nvtc from nvtclist
		nvxc_0 = nvxclist_0[c_0]		# get nvxc from nvxclist
		mat_0 = matlist_0[c_0]			# get mat from matlist
		mac_0 = maclist_0[c_0]			# get mac from maclist
		mpa_0 = mpalist_0[c_0]			# get mpa from mpalist
		mta_0 = mtalist_0[c_0]			# get mta from mtalist
		mxa_0 = mxalist_0[c_0]			# get mxa from mxalist
		mpb_0 = mpblist_0[c_0]			# get mpb from mpblist
		mxb_0 = mxblist_0[c_0]			# get mxb from mxblist
		mpc_0 = mpclist_0[c_0]			# get mpc from mpclist
		mtc_0 = mtclist_0[c_0]			# get mtc from mtclist
		mxc_0 = mxclist_0[c_0]			# get mxc from mxclist
		bnda_0 = bndalist_0[c_0]		# get bnda from bndalist
		bndb_0 = bndblist_0[c_0]		# get bndb from bndblist
		bndc_0 = bndclist_0[c_0]		# get bndc from bndclist
		bndt_0 = bndtlist_0[c_0]		# get bndt from bndtlist		
		bndu_0 = bndulist_0[c_0]		# get bndu from bndulist		
		bndv_0 = bndvlist_0[c_0]		# get bndv from bndvlist		
                c_0 = c_0 + 1
                scoreText_0 += &quot;i1 &quot;+str(notetime_0)+&quot; &quot;+str(dur_0)+&quot; &quot;+str(amp_0)+&quot; &quot;+str(note_0)+&quot; &quot;+str(sp_0)+&quot; &quot;+str(pana_0)+&quot; &quot;+str(panb_0)+&quot; &quot;+str(nvat_0)+&quot; &quot;+str(nvac_0)+&quot; &quot;+str(nvpa_0)+&quot; &quot;+str(nvta_0)+&quot; &quot;+str(nvxa_0)+&quot; &quot;+str(nvpb_0)+&quot; &quot;+str(nvxb_0)+&quot; &quot;+str(nvpc_0)+&quot; &quot;+str(nvtc_0)+&quot; &quot;+str(nvxc_0)+&quot; &quot;+str(mat_0)+&quot; &quot;+str(mac_0)+&quot; &quot;+str(mpa_0)+&quot; &quot;+str(mta_0)+&quot; &quot;+str(mxa_0)+&quot; &quot;+str(mpb_0)+&quot; &quot;+str(mxb_0)+&quot; &quot;+str(mpc_0)+&quot; &quot;+str(mtc_0)+&quot; &quot;+str(mxc_0)+&quot; &quot;+str(bnda_0)+&quot; &quot;+str(bndb_0)+&quot; &quot;+str(bndc_0)+&quot; &quot;+str(bndt_0)+&quot; &quot;+str(bndu_0)+&quot; &quot;+str(bndv_0)+&quot; \n&quot;
            notetime_0 = notetime_0 + subeat_0                      # increment notetime by subeat time value
    i_0 = i_0 + 1
    c_0 = 0
score = scoreText_0
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>91.0</startTime>
          <name>Ringer_4a</name>
          <backgroundColor>-11495836</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_0 - 3h13TET
scoreText_0 = &quot;&quot;                              	# scoreText_0 is cleared
bart_0 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_0 = [&apos;e&apos;,&apos;d&apos;,&apos;f&apos;]			# rhythm
bpb_0 = len(rhythmr0_0)                         # beats per bar
beat_0 = bart_0/bpb_0                           # time of beat in seconds
notetime_0 = 0                                  # set intitial note start time
durlist_0 = [1.66,1.66,1.66]			# note duration list
notelist_0 = [53,52,51]				# note list
splist_0 = [3,3,3]				# subpatch list
panalist_0 = [-.5,-.5,-.45]			# pana list
panblist_0 = [-.45,-.55,-.5]			# panb list
nvatlist_0 = [.55,.55,.55]			# nvat list
nvaclist_0 = [0,0,0]				# nvac list
nvpalist_0 = [1,1,1]				# nvpa list
nvtalist_0 = [.55,.55,.55]			# nvta list
nvxalist_0 = [0,0,0]			# nvxa list
nvpblist_0 = [1,1,1]			# nvpb list
nvxblist_0 = [0,0,0]			# nvxb list
nvpclist_0 = [.7,.7,.7]			# nvpc list
nvtclist_0 = [.3,.3,.3]			# nvtc list
nvxclist_0 = [2,2,2]			# nvxc list
matlist_0 = [.55,.55,.55]		# mat list
maclist_0 = [0,0,0]			# mac list
mpalist_0 = [.3,.3,.3]			# mpa list
mtalist_0 = [.55,.55,.55]		# mta list
mxalist_0 = [0,0,0]			# mxa list
mpblist_0 = [.3,.3,.3]			# mpb list
mxblist_0 = [0,0,0]			# mxb list
mpclist_0 = [.15,.15,.15]		# mpc list
mtclist_0 = [.1,.1,.1]			# mtc list
mxclist_0 = [2,2,2]			# mxc list
bndalist_0 = [1,1,1]			# bnda list
bndblist_0 = [1,1,1]			# bndb list
bndclist_0 = [1,1,1]			# bndc list
bndtlist_0 = [.5,.5,.5]			# bndt list
bndulist_0 = [.5,.5,.5]			# bndu list
bndvlist_0 = [.5,.5,.5]			# bndv list
i_0 = 0						# loop iteration counter
c_0 = 0						# note iteration counter
while i_0 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_0 in range(bpb_0) :                           # loop through the items in the rhythm list
        sb_0 = rhythmr0_0[a_0]                          # sb is current item in the rhythm list
        subeat_0 = beat_0/len(sb_0)                     # subeat is the number of sub-beats in the beat
        for b_0 in range(len(sb_0)) :                   # loop through the items in the beat string
            if sb_0[b_0].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_0[b_0])                   # get ascii number of the character
                if sb_0[b_0].isdigit() :                # check if character is numeric
                    amp_0 = (asky-47)                   # assign amplitude
                elif sb_0[b_0].isupper() :              # check if character is uppercase
                    amp_0 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_0 = (asky-60)                   # assign amplitude
            elif sb_0[b_0] == &apos;-&apos; : amp_0 = 0           # character for amp = 0                         
            elif sb_0[b_0] == &apos;&gt;&apos; : amp_0 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_0 = blueDuration + 1           # set notetime_0 &gt; blueduration
                scoreText_0 = &apos;&apos;                        # clear scoreText_0
            if notetime_0 &gt;= blueDuration : break       # break out of the loop
	    if amp_0 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_0 = durlist_0[c_0]			# get duration from durlist
		amp_0 = amp_0-62			# move amp value to correct dbfs range (max=1)
		note_0 = notelist_0[c_0]		# get note from notelist
	        sp_0 = splist_0[c_0]			# get subpatch from splist
		pana_0 = panalist_0[c_0]		# get pana from panalist
		panb_0 = panblist_0[c_0]		# get panb from panblist
		nvat_0 = nvatlist_0[c_0]		# get nvat from nvatlist
		nvac_0 = nvaclist_0[c_0]		# get nvac from nvatlist
		nvpa_0 = nvpalist_0[c_0]		# get nvpa from nvpalist
		nvta_0 = nvtalist_0[c_0]		# get nvta from nvtalist
		nvxa_0 = nvxalist_0[c_0]		# get nvxa from nvxalist
		nvpb_0 = nvpblist_0[c_0]		# get nvpb from nvpblist
		nvxb_0 = nvxblist_0[c_0]		# get nvxb from nvxblist
		nvpc_0 = nvpclist_0[c_0]		# get nvpc from nvpclist
		nvtc_0 = nvtclist_0[c_0]		# get nvtc from nvtclist
		nvxc_0 = nvxclist_0[c_0]		# get nvxc from nvxclist
		mat_0 = matlist_0[c_0]			# get mat from matlist
		mac_0 = maclist_0[c_0]			# get mac from maclist
		mpa_0 = mpalist_0[c_0]			# get mpa from mpalist
		mta_0 = mtalist_0[c_0]			# get mta from mtalist
		mxa_0 = mxalist_0[c_0]			# get mxa from mxalist
		mpb_0 = mpblist_0[c_0]			# get mpb from mpblist
		mxb_0 = mxblist_0[c_0]			# get mxb from mxblist
		mpc_0 = mpclist_0[c_0]			# get mpc from mpclist
		mtc_0 = mtclist_0[c_0]			# get mtc from mtclist
		mxc_0 = mxclist_0[c_0]			# get mxc from mxclist
		bnda_0 = bndalist_0[c_0]		# get bnda from bndalist
		bndb_0 = bndblist_0[c_0]		# get bndb from bndblist
		bndc_0 = bndclist_0[c_0]		# get bndc from bndclist
		bndt_0 = bndtlist_0[c_0]		# get bndt from bndtlist		
		bndu_0 = bndulist_0[c_0]		# get bndu from bndulist		
		bndv_0 = bndvlist_0[c_0]		# get bndv from bndvlist		
                c_0 = c_0 + 1
                scoreText_0 += &quot;i1 &quot;+str(notetime_0)+&quot; &quot;+str(dur_0)+&quot; &quot;+str(amp_0)+&quot; &quot;+str(note_0)+&quot; &quot;+str(sp_0)+&quot; &quot;+str(pana_0)+&quot; &quot;+str(panb_0)+&quot; &quot;+str(nvat_0)+&quot; &quot;+str(nvac_0)+&quot; &quot;+str(nvpa_0)+&quot; &quot;+str(nvta_0)+&quot; &quot;+str(nvxa_0)+&quot; &quot;+str(nvpb_0)+&quot; &quot;+str(nvxb_0)+&quot; &quot;+str(nvpc_0)+&quot; &quot;+str(nvtc_0)+&quot; &quot;+str(nvxc_0)+&quot; &quot;+str(mat_0)+&quot; &quot;+str(mac_0)+&quot; &quot;+str(mpa_0)+&quot; &quot;+str(mta_0)+&quot; &quot;+str(mxa_0)+&quot; &quot;+str(mpb_0)+&quot; &quot;+str(mxb_0)+&quot; &quot;+str(mpc_0)+&quot; &quot;+str(mtc_0)+&quot; &quot;+str(mxc_0)+&quot; &quot;+str(bnda_0)+&quot; &quot;+str(bndb_0)+&quot; &quot;+str(bndc_0)+&quot; &quot;+str(bndt_0)+&quot; &quot;+str(bndu_0)+&quot; &quot;+str(bndv_0)+&quot; \n&quot;
            notetime_0 = notetime_0 + subeat_0                      # increment notetime by subeat time value
    i_0 = i_0 + 1
    c_0 = 0
score = scoreText_0
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>96.0</startTime>
          <name>Ringer_0b</name>
          <backgroundColor>-11495836</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_0 - 3h13TET
scoreText_0 = &quot;&quot;                              	# scoreText_0 is cleared
bart_0 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_0 = [&apos;e&apos;,&apos;d&apos;,&apos;f&apos;]			# rhythm
bpb_0 = len(rhythmr0_0)                         # beats per bar
beat_0 = bart_0/bpb_0                           # time of beat in seconds
notetime_0 = 0                                  # set intitial note start time
durlist_0 = [1.66,1.66,1.66]			# note duration list
notelist_0 = [57,56,54]				# note list
splist_0 = [1,1,1]				# subpatch list
panalist_0 = [-.5,-.5,-.45]			# pana list
panblist_0 = [-.45,-.55,-.5]			# panb list
nvatlist_0 = [.55,.55,.55]			# nvat list
nvaclist_0 = [0,0,0]				# nvac list
nvpalist_0 = [1,1,1]				# nvpa list
nvtalist_0 = [.55,.55,.55]			# nvta list
nvxalist_0 = [0,0,0]			# nvxa list
nvpblist_0 = [1,1,1]			# nvpb list
nvxblist_0 = [0,0,0]			# nvxb list
nvpclist_0 = [.7,.7,.7]			# nvpc list
nvtclist_0 = [.3,.3,.3]			# nvtc list
nvxclist_0 = [2,2,2]			# nvxc list
matlist_0 = [.55,.55,.55]		# mat list
maclist_0 = [0,0,0]			# mac list
mpalist_0 = [.3,.3,.3]			# mpa list
mtalist_0 = [.55,.55,.55]		# mta list
mxalist_0 = [0,0,0]			# mxa list
mpblist_0 = [.3,.3,.3]			# mpb list
mxblist_0 = [0,0,0]			# mxb list
mpclist_0 = [.1,.1,.1]		# mpc list
mtclist_0 = [.3,.3,.3]			# mtc list
mxclist_0 = [2,2,2]			# mxc list
bndalist_0 = [1,1,1]			# bnda list
bndblist_0 = [1,1,1]			# bndb list
bndclist_0 = [1,1,1]			# bndc list
bndtlist_0 = [.5,.5,.5]			# bndt list
bndulist_0 = [.5,.5,.5]			# bndu list
bndvlist_0 = [.5,.5,.5]			# bndv list
i_0 = 0						# loop iteration counter
c_0 = 0						# note iteration counter
while i_0 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_0 in range(bpb_0) :                           # loop through the items in the rhythm list
        sb_0 = rhythmr0_0[a_0]                          # sb is current item in the rhythm list
        subeat_0 = beat_0/len(sb_0)                     # subeat is the number of sub-beats in the beat
        for b_0 in range(len(sb_0)) :                   # loop through the items in the beat string
            if sb_0[b_0].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_0[b_0])                   # get ascii number of the character
                if sb_0[b_0].isdigit() :                # check if character is numeric
                    amp_0 = (asky-47)                   # assign amplitude
                elif sb_0[b_0].isupper() :              # check if character is uppercase
                    amp_0 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_0 = (asky-60)                   # assign amplitude
            elif sb_0[b_0] == &apos;-&apos; : amp_0 = 0           # character for amp = 0                         
            elif sb_0[b_0] == &apos;&gt;&apos; : amp_0 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_0 = blueDuration + 1           # set notetime_0 &gt; blueduration
                scoreText_0 = &apos;&apos;                        # clear scoreText_0
            if notetime_0 &gt;= blueDuration : break       # break out of the loop
	    if amp_0 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_0 = durlist_0[c_0]			# get duration from durlist
		amp_0 = amp_0-62			# move amp value to correct dbfs range (max=1)
		note_0 = notelist_0[c_0]		# get note from notelist
	        sp_0 = splist_0[c_0]			# get subpatch from splist
		pana_0 = panalist_0[c_0]		# get pana from panalist
		panb_0 = panblist_0[c_0]		# get panb from panblist
		nvat_0 = nvatlist_0[c_0]		# get nvat from nvatlist
		nvac_0 = nvaclist_0[c_0]		# get nvac from nvatlist
		nvpa_0 = nvpalist_0[c_0]		# get nvpa from nvpalist
		nvta_0 = nvtalist_0[c_0]		# get nvta from nvtalist
		nvxa_0 = nvxalist_0[c_0]		# get nvxa from nvxalist
		nvpb_0 = nvpblist_0[c_0]		# get nvpb from nvpblist
		nvxb_0 = nvxblist_0[c_0]		# get nvxb from nvxblist
		nvpc_0 = nvpclist_0[c_0]		# get nvpc from nvpclist
		nvtc_0 = nvtclist_0[c_0]		# get nvtc from nvtclist
		nvxc_0 = nvxclist_0[c_0]		# get nvxc from nvxclist
		mat_0 = matlist_0[c_0]			# get mat from matlist
		mac_0 = maclist_0[c_0]			# get mac from maclist
		mpa_0 = mpalist_0[c_0]			# get mpa from mpalist
		mta_0 = mtalist_0[c_0]			# get mta from mtalist
		mxa_0 = mxalist_0[c_0]			# get mxa from mxalist
		mpb_0 = mpblist_0[c_0]			# get mpb from mpblist
		mxb_0 = mxblist_0[c_0]			# get mxb from mxblist
		mpc_0 = mpclist_0[c_0]			# get mpc from mpclist
		mtc_0 = mtclist_0[c_0]			# get mtc from mtclist
		mxc_0 = mxclist_0[c_0]			# get mxc from mxclist
		bnda_0 = bndalist_0[c_0]		# get bnda from bndalist
		bndb_0 = bndblist_0[c_0]		# get bndb from bndblist
		bndc_0 = bndclist_0[c_0]		# get bndc from bndclist
		bndt_0 = bndtlist_0[c_0]		# get bndt from bndtlist		
		bndu_0 = bndulist_0[c_0]		# get bndu from bndulist		
		bndv_0 = bndvlist_0[c_0]		# get bndv from bndvlist		
                c_0 = c_0 + 1
                scoreText_0 += &quot;i1 &quot;+str(notetime_0)+&quot; &quot;+str(dur_0)+&quot; &quot;+str(amp_0)+&quot; &quot;+str(note_0)+&quot; &quot;+str(sp_0)+&quot; &quot;+str(pana_0)+&quot; &quot;+str(panb_0)+&quot; &quot;+str(nvat_0)+&quot; &quot;+str(nvac_0)+&quot; &quot;+str(nvpa_0)+&quot; &quot;+str(nvta_0)+&quot; &quot;+str(nvxa_0)+&quot; &quot;+str(nvpb_0)+&quot; &quot;+str(nvxb_0)+&quot; &quot;+str(nvpc_0)+&quot; &quot;+str(nvtc_0)+&quot; &quot;+str(nvxc_0)+&quot; &quot;+str(mat_0)+&quot; &quot;+str(mac_0)+&quot; &quot;+str(mpa_0)+&quot; &quot;+str(mta_0)+&quot; &quot;+str(mxa_0)+&quot; &quot;+str(mpb_0)+&quot; &quot;+str(mxb_0)+&quot; &quot;+str(mpc_0)+&quot; &quot;+str(mtc_0)+&quot; &quot;+str(mxc_0)+&quot; &quot;+str(bnda_0)+&quot; &quot;+str(bndb_0)+&quot; &quot;+str(bndc_0)+&quot; &quot;+str(bndt_0)+&quot; &quot;+str(bndu_0)+&quot; &quot;+str(bndv_0)+&quot; \n&quot;
            notetime_0 = notetime_0 + subeat_0                      # increment notetime by subeat time value
    i_0 = i_0 + 1
    c_0 = 0
score = scoreText_0
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>101.0</startTime>
          <name>Ringer_4c</name>
          <backgroundColor>-11495836</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_0 - 3h13TET
scoreText_0 = &quot;&quot;                              	# scoreText_0 is cleared
bart_0 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_0 = [&apos;e&apos;,&apos;d&apos;,&apos;f&apos;]			# rhythm
bpb_0 = len(rhythmr0_0)                         # beats per bar
beat_0 = bart_0/bpb_0                           # time of beat in seconds
notetime_0 = 0                                  # set intitial note start time
durlist_0 = [1.66,1.66,1.66]			# note duration list
notelist_0 = [51,52,53]				# note list
splist_0 = [3,3,3]				# subpatch list
panalist_0 = [-.5,-.5,-.45]			# pana list
panblist_0 = [-.45,-.55,-.5]			# panb list
nvatlist_0 = [.55,.55,.55]			# nvat list
nvaclist_0 = [0,0,0]				# nvac list
nvpalist_0 = [1,1,1]				# nvpa list
nvtalist_0 = [.55,.55,.55]			# nvta list
nvxalist_0 = [0,0,0]			# nvxa list
nvpblist_0 = [1,1,1]			# nvpb list
nvxblist_0 = [0,0,0]			# nvxb list
nvpclist_0 = [.7,.7,.7]			# nvpc list
nvtclist_0 = [.3,.3,.3]			# nvtc list
nvxclist_0 = [2,2,2]			# nvxc list
matlist_0 = [.55,.55,.55]		# mat list
maclist_0 = [0,0,0]			# mac list
mpalist_0 = [.3,.3,.3]			# mpa list
mtalist_0 = [.55,.55,.55]		# mta list
mxalist_0 = [0,0,0]			# mxa list
mpblist_0 = [.3,.3,.3]			# mpb list
mxblist_0 = [0,0,0]			# mxb list
mpclist_0 = [.1,.1,.1]		# mpc list
mtclist_0 = [.3,.3,.3]			# mtc list
mxclist_0 = [2,2,2]			# mxc list
bndalist_0 = [1,1,1]			# bnda list
bndblist_0 = [1,1,1]			# bndb list
bndclist_0 = [1,1,1]			# bndc list
bndtlist_0 = [.5,.5,.5]			# bndt list
bndulist_0 = [.5,.5,.5]			# bndu list
bndvlist_0 = [.5,.5,.5]			# bndv list
i_0 = 0						# loop iteration counter
c_0 = 0						# note iteration counter
while i_0 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_0 in range(bpb_0) :                           # loop through the items in the rhythm list
        sb_0 = rhythmr0_0[a_0]                          # sb is current item in the rhythm list
        subeat_0 = beat_0/len(sb_0)                     # subeat is the number of sub-beats in the beat
        for b_0 in range(len(sb_0)) :                   # loop through the items in the beat string
            if sb_0[b_0].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_0[b_0])                   # get ascii number of the character
                if sb_0[b_0].isdigit() :                # check if character is numeric
                    amp_0 = (asky-47)                   # assign amplitude
                elif sb_0[b_0].isupper() :              # check if character is uppercase
                    amp_0 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_0 = (asky-60)                   # assign amplitude
            elif sb_0[b_0] == &apos;-&apos; : amp_0 = 0           # character for amp = 0                         
            elif sb_0[b_0] == &apos;&gt;&apos; : amp_0 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_0 = blueDuration + 1           # set notetime_0 &gt; blueduration
                scoreText_0 = &apos;&apos;                        # clear scoreText_0
            if notetime_0 &gt;= blueDuration : break       # break out of the loop
	    if amp_0 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_0 = durlist_0[c_0]			# get duration from durlist
		amp_0 = amp_0-62			# move amp value to correct dbfs range (max=1)
		note_0 = notelist_0[c_0]		# get note from notelist
	        sp_0 = splist_0[c_0]			# get subpatch from splist
		pana_0 = panalist_0[c_0]		# get pana from panalist
		panb_0 = panblist_0[c_0]		# get panb from panblist
		nvat_0 = nvatlist_0[c_0]		# get nvat from nvatlist
		nvac_0 = nvaclist_0[c_0]		# get nvac from nvatlist
		nvpa_0 = nvpalist_0[c_0]		# get nvpa from nvpalist
		nvta_0 = nvtalist_0[c_0]		# get nvta from nvtalist
		nvxa_0 = nvxalist_0[c_0]		# get nvxa from nvxalist
		nvpb_0 = nvpblist_0[c_0]		# get nvpb from nvpblist
		nvxb_0 = nvxblist_0[c_0]		# get nvxb from nvxblist
		nvpc_0 = nvpclist_0[c_0]		# get nvpc from nvpclist
		nvtc_0 = nvtclist_0[c_0]		# get nvtc from nvtclist
		nvxc_0 = nvxclist_0[c_0]		# get nvxc from nvxclist
		mat_0 = matlist_0[c_0]			# get mat from matlist
		mac_0 = maclist_0[c_0]			# get mac from maclist
		mpa_0 = mpalist_0[c_0]			# get mpa from mpalist
		mta_0 = mtalist_0[c_0]			# get mta from mtalist
		mxa_0 = mxalist_0[c_0]			# get mxa from mxalist
		mpb_0 = mpblist_0[c_0]			# get mpb from mpblist
		mxb_0 = mxblist_0[c_0]			# get mxb from mxblist
		mpc_0 = mpclist_0[c_0]			# get mpc from mpclist
		mtc_0 = mtclist_0[c_0]			# get mtc from mtclist
		mxc_0 = mxclist_0[c_0]			# get mxc from mxclist
		bnda_0 = bndalist_0[c_0]		# get bnda from bndalist
		bndb_0 = bndblist_0[c_0]		# get bndb from bndblist
		bndc_0 = bndclist_0[c_0]		# get bndc from bndclist
		bndt_0 = bndtlist_0[c_0]		# get bndt from bndtlist		
		bndu_0 = bndulist_0[c_0]		# get bndu from bndulist		
		bndv_0 = bndvlist_0[c_0]		# get bndv from bndvlist		
                c_0 = c_0 + 1
                scoreText_0 += &quot;i1 &quot;+str(notetime_0)+&quot; &quot;+str(dur_0)+&quot; &quot;+str(amp_0)+&quot; &quot;+str(note_0)+&quot; &quot;+str(sp_0)+&quot; &quot;+str(pana_0)+&quot; &quot;+str(panb_0)+&quot; &quot;+str(nvat_0)+&quot; &quot;+str(nvac_0)+&quot; &quot;+str(nvpa_0)+&quot; &quot;+str(nvta_0)+&quot; &quot;+str(nvxa_0)+&quot; &quot;+str(nvpb_0)+&quot; &quot;+str(nvxb_0)+&quot; &quot;+str(nvpc_0)+&quot; &quot;+str(nvtc_0)+&quot; &quot;+str(nvxc_0)+&quot; &quot;+str(mat_0)+&quot; &quot;+str(mac_0)+&quot; &quot;+str(mpa_0)+&quot; &quot;+str(mta_0)+&quot; &quot;+str(mxa_0)+&quot; &quot;+str(mpb_0)+&quot; &quot;+str(mxb_0)+&quot; &quot;+str(mpc_0)+&quot; &quot;+str(mtc_0)+&quot; &quot;+str(mxc_0)+&quot; &quot;+str(bnda_0)+&quot; &quot;+str(bndb_0)+&quot; &quot;+str(bndc_0)+&quot; &quot;+str(bndt_0)+&quot; &quot;+str(bndu_0)+&quot; &quot;+str(bndv_0)+&quot; \n&quot;
            notetime_0 = notetime_0 + subeat_0                      # increment notetime by subeat time value
    i_0 = i_0 + 1
    c_0 = 0
score = scoreText_0
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>106.0</startTime>
          <name>Ringer_0d</name>
          <backgroundColor>-11495836</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_0 - 3h13TET
scoreText_0 = &quot;&quot;                              	# scoreText_0 is cleared
bart_0 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_0 = [&apos;e&apos;,&apos;d&apos;,&apos;f&apos;]			# rhythm
bpb_0 = len(rhythmr0_0)                         # beats per bar
beat_0 = bart_0/bpb_0                           # time of beat in seconds
notetime_0 = 0                                  # set intitial note start time
durlist_0 = [1.66,1.66,1.66]			# note duration list
notelist_0 = [54,56,57]				# note list
splist_0 = [1,1,1]				# subpatch list
panalist_0 = [-.5,-.5,-.45]			# pana list
panblist_0 = [-.45,-.55,-.5]			# panb list
nvatlist_0 = [.55,.55,.55]			# nvat list
nvaclist_0 = [0,0,0]				# nvac list
nvpalist_0 = [1,1,1]				# nvpa list
nvtalist_0 = [.55,.55,.55]			# nvta list
nvxalist_0 = [0,0,0]			# nvxa list
nvpblist_0 = [1,1,1]			# nvpb list
nvxblist_0 = [0,0,0]			# nvxb list
nvpclist_0 = [.7,.7,.7]			# nvpc list
nvtclist_0 = [.3,.3,.3]			# nvtc list
nvxclist_0 = [2,2,2]			# nvxc list
matlist_0 = [.55,.55,.55]		# mat list
maclist_0 = [0,0,0]			# mac list
mpalist_0 = [.3,.3,.3]			# mpa list
mtalist_0 = [.55,.55,.55]		# mta list
mxalist_0 = [0,0,0]			# mxa list
mpblist_0 = [.3,.3,.3]			# mpb list
mxblist_0 = [0,0,0]			# mxb list
mpclist_0 = [.1,.1,.1]		# mpc list
mtclist_0 = [.3,.3,.3]			# mtc list
mxclist_0 = [2,2,2]			# mxc list
bndalist_0 = [1,1,1]			# bnda list
bndblist_0 = [1,1,1]			# bndb list
bndclist_0 = [1,1,1]			# bndc list
bndtlist_0 = [.5,.5,.5]			# bndt list
bndulist_0 = [.5,.5,.5]			# bndu list
bndvlist_0 = [.5,.5,.5]			# bndv list
i_0 = 0						# loop iteration counter
c_0 = 0						# note iteration counter
while i_0 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_0 in range(bpb_0) :                           # loop through the items in the rhythm list
        sb_0 = rhythmr0_0[a_0]                          # sb is current item in the rhythm list
        subeat_0 = beat_0/len(sb_0)                     # subeat is the number of sub-beats in the beat
        for b_0 in range(len(sb_0)) :                   # loop through the items in the beat string
            if sb_0[b_0].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_0[b_0])                   # get ascii number of the character
                if sb_0[b_0].isdigit() :                # check if character is numeric
                    amp_0 = (asky-47)                   # assign amplitude
                elif sb_0[b_0].isupper() :              # check if character is uppercase
                    amp_0 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_0 = (asky-60)                   # assign amplitude
            elif sb_0[b_0] == &apos;-&apos; : amp_0 = 0           # character for amp = 0                         
            elif sb_0[b_0] == &apos;&gt;&apos; : amp_0 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_0 = blueDuration + 1           # set notetime_0 &gt; blueduration
                scoreText_0 = &apos;&apos;                        # clear scoreText_0
            if notetime_0 &gt;= blueDuration : break       # break out of the loop
	    if amp_0 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_0 = durlist_0[c_0]			# get duration from durlist
		amp_0 = amp_0-62			# move amp value to correct dbfs range (max=1)
		note_0 = notelist_0[c_0]		# get note from notelist
	        sp_0 = splist_0[c_0]			# get subpatch from splist
		pana_0 = panalist_0[c_0]		# get pana from panalist
		panb_0 = panblist_0[c_0]		# get panb from panblist
		nvat_0 = nvatlist_0[c_0]		# get nvat from nvatlist
		nvac_0 = nvaclist_0[c_0]		# get nvac from nvatlist
		nvpa_0 = nvpalist_0[c_0]		# get nvpa from nvpalist
		nvta_0 = nvtalist_0[c_0]		# get nvta from nvtalist
		nvxa_0 = nvxalist_0[c_0]		# get nvxa from nvxalist
		nvpb_0 = nvpblist_0[c_0]		# get nvpb from nvpblist
		nvxb_0 = nvxblist_0[c_0]		# get nvxb from nvxblist
		nvpc_0 = nvpclist_0[c_0]		# get nvpc from nvpclist
		nvtc_0 = nvtclist_0[c_0]		# get nvtc from nvtclist
		nvxc_0 = nvxclist_0[c_0]		# get nvxc from nvxclist
		mat_0 = matlist_0[c_0]			# get mat from matlist
		mac_0 = maclist_0[c_0]			# get mac from maclist
		mpa_0 = mpalist_0[c_0]			# get mpa from mpalist
		mta_0 = mtalist_0[c_0]			# get mta from mtalist
		mxa_0 = mxalist_0[c_0]			# get mxa from mxalist
		mpb_0 = mpblist_0[c_0]			# get mpb from mpblist
		mxb_0 = mxblist_0[c_0]			# get mxb from mxblist
		mpc_0 = mpclist_0[c_0]			# get mpc from mpclist
		mtc_0 = mtclist_0[c_0]			# get mtc from mtclist
		mxc_0 = mxclist_0[c_0]			# get mxc from mxclist
		bnda_0 = bndalist_0[c_0]		# get bnda from bndalist
		bndb_0 = bndblist_0[c_0]		# get bndb from bndblist
		bndc_0 = bndclist_0[c_0]		# get bndc from bndclist
		bndt_0 = bndtlist_0[c_0]		# get bndt from bndtlist		
		bndu_0 = bndulist_0[c_0]		# get bndu from bndulist		
		bndv_0 = bndvlist_0[c_0]		# get bndv from bndvlist		
                c_0 = c_0 + 1
                scoreText_0 += &quot;i1 &quot;+str(notetime_0)+&quot; &quot;+str(dur_0)+&quot; &quot;+str(amp_0)+&quot; &quot;+str(note_0)+&quot; &quot;+str(sp_0)+&quot; &quot;+str(pana_0)+&quot; &quot;+str(panb_0)+&quot; &quot;+str(nvat_0)+&quot; &quot;+str(nvac_0)+&quot; &quot;+str(nvpa_0)+&quot; &quot;+str(nvta_0)+&quot; &quot;+str(nvxa_0)+&quot; &quot;+str(nvpb_0)+&quot; &quot;+str(nvxb_0)+&quot; &quot;+str(nvpc_0)+&quot; &quot;+str(nvtc_0)+&quot; &quot;+str(nvxc_0)+&quot; &quot;+str(mat_0)+&quot; &quot;+str(mac_0)+&quot; &quot;+str(mpa_0)+&quot; &quot;+str(mta_0)+&quot; &quot;+str(mxa_0)+&quot; &quot;+str(mpb_0)+&quot; &quot;+str(mxb_0)+&quot; &quot;+str(mpc_0)+&quot; &quot;+str(mtc_0)+&quot; &quot;+str(mxc_0)+&quot; &quot;+str(bnda_0)+&quot; &quot;+str(bndb_0)+&quot; &quot;+str(bndc_0)+&quot; &quot;+str(bndt_0)+&quot; &quot;+str(bndu_0)+&quot; &quot;+str(bndv_0)+&quot; \n&quot;
            notetime_0 = notetime_0 + subeat_0                      # increment notetime by subeat time value
    i_0 = i_0 + 1
    c_0 = 0
score = scoreText_0
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>111.0</startTime>
          <name>Ringer_4e</name>
          <backgroundColor>-11495836</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_0 - 3h13TET
scoreText_0 = &quot;&quot;                              	# scoreText_0 is cleared
bart_0 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_0 = [&apos;f&apos;,&apos;e&apos;,&apos;g&apos;]			# rhythm
bpb_0 = len(rhythmr0_0)                         # beats per bar
beat_0 = bart_0/bpb_0                           # time of beat in seconds
notetime_0 = 0                                  # set intitial note start time
durlist_0 = [1.66,1.66,2.66]			# note duration list
notelist_0 = [51,50,49]				# note list
splist_0 = [3,3,3]				# subpatch list
panalist_0 = [-.5,-.5,-.45]			# pana list
panblist_0 = [-.45,-.55,-.5]			# panb list
nvatlist_0 = [.55,.55,.55]			# nvat list
nvaclist_0 = [0,0,0]				# nvac list
nvpalist_0 = [1,1,1]				# nvpa list
nvtalist_0 = [.55,.55,.55]			# nvta list
nvxalist_0 = [0,0,0]			# nvxa list
nvpblist_0 = [1,1,1]			# nvpb list
nvxblist_0 = [0,0,0]			# nvxb list
nvpclist_0 = [.7,.7,.7]			# nvpc list
nvtclist_0 = [.3,.3,1.3]			# nvtc list
nvxclist_0 = [2,2,2]			# nvxc list
matlist_0 = [.55,.55,.55]		# mat list
maclist_0 = [0,0,0]			# mac list
mpalist_0 = [.3,.3,.3]			# mpa list
mtalist_0 = [.55,.55,.55]		# mta list
mxalist_0 = [0,0,0]			# mxa list
mpblist_0 = [.3,.3,.3]			# mpb list
mxblist_0 = [0,0,0]			# mxb list
mpclist_0 = [.1,.1,.1]		# mpc list
mtclist_0 = [.3,.3,.3]			# mtc list
mxclist_0 = [2,2,2]			# mxc list
bndalist_0 = [1,1,1]			# bnda list
bndblist_0 = [1,1,1]			# bndb list
bndclist_0 = [1,1,1]			# bndc list
bndtlist_0 = [.5,.5,.5]			# bndt list
bndulist_0 = [.5,.5,.5]			# bndu list
bndvlist_0 = [.5,.5,.5]			# bndv list
i_0 = 0						# loop iteration counter
c_0 = 0						# note iteration counter
while i_0 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_0 in range(bpb_0) :                           # loop through the items in the rhythm list
        sb_0 = rhythmr0_0[a_0]                          # sb is current item in the rhythm list
        subeat_0 = beat_0/len(sb_0)                     # subeat is the number of sub-beats in the beat
        for b_0 in range(len(sb_0)) :                   # loop through the items in the beat string
            if sb_0[b_0].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_0[b_0])                   # get ascii number of the character
                if sb_0[b_0].isdigit() :                # check if character is numeric
                    amp_0 = (asky-47)                   # assign amplitude
                elif sb_0[b_0].isupper() :              # check if character is uppercase
                    amp_0 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_0 = (asky-60)                   # assign amplitude
            elif sb_0[b_0] == &apos;-&apos; : amp_0 = 0           # character for amp = 0                         
            elif sb_0[b_0] == &apos;&gt;&apos; : amp_0 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_0 = blueDuration + 1           # set notetime_0 &gt; blueduration
                scoreText_0 = &apos;&apos;                        # clear scoreText_0
            if notetime_0 &gt;= blueDuration : break       # break out of the loop
	    if amp_0 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_0 = durlist_0[c_0]			# get duration from durlist
		amp_0 = amp_0-62			# move amp value to correct dbfs range (max=1)
		note_0 = notelist_0[c_0]		# get note from notelist
	        sp_0 = splist_0[c_0]			# get subpatch from splist
		pana_0 = panalist_0[c_0]		# get pana from panalist
		panb_0 = panblist_0[c_0]		# get panb from panblist
		nvat_0 = nvatlist_0[c_0]		# get nvat from nvatlist
		nvac_0 = nvaclist_0[c_0]		# get nvac from nvatlist
		nvpa_0 = nvpalist_0[c_0]		# get nvpa from nvpalist
		nvta_0 = nvtalist_0[c_0]		# get nvta from nvtalist
		nvxa_0 = nvxalist_0[c_0]		# get nvxa from nvxalist
		nvpb_0 = nvpblist_0[c_0]		# get nvpb from nvpblist
		nvxb_0 = nvxblist_0[c_0]		# get nvxb from nvxblist
		nvpc_0 = nvpclist_0[c_0]		# get nvpc from nvpclist
		nvtc_0 = nvtclist_0[c_0]		# get nvtc from nvtclist
		nvxc_0 = nvxclist_0[c_0]		# get nvxc from nvxclist
		mat_0 = matlist_0[c_0]			# get mat from matlist
		mac_0 = maclist_0[c_0]			# get mac from maclist
		mpa_0 = mpalist_0[c_0]			# get mpa from mpalist
		mta_0 = mtalist_0[c_0]			# get mta from mtalist
		mxa_0 = mxalist_0[c_0]			# get mxa from mxalist
		mpb_0 = mpblist_0[c_0]			# get mpb from mpblist
		mxb_0 = mxblist_0[c_0]			# get mxb from mxblist
		mpc_0 = mpclist_0[c_0]			# get mpc from mpclist
		mtc_0 = mtclist_0[c_0]			# get mtc from mtclist
		mxc_0 = mxclist_0[c_0]			# get mxc from mxclist
		bnda_0 = bndalist_0[c_0]		# get bnda from bndalist
		bndb_0 = bndblist_0[c_0]		# get bndb from bndblist
		bndc_0 = bndclist_0[c_0]		# get bndc from bndclist
		bndt_0 = bndtlist_0[c_0]		# get bndt from bndtlist		
		bndu_0 = bndulist_0[c_0]		# get bndu from bndulist		
		bndv_0 = bndvlist_0[c_0]		# get bndv from bndvlist		
                c_0 = c_0 + 1
                scoreText_0 += &quot;i1 &quot;+str(notetime_0)+&quot; &quot;+str(dur_0)+&quot; &quot;+str(amp_0)+&quot; &quot;+str(note_0)+&quot; &quot;+str(sp_0)+&quot; &quot;+str(pana_0)+&quot; &quot;+str(panb_0)+&quot; &quot;+str(nvat_0)+&quot; &quot;+str(nvac_0)+&quot; &quot;+str(nvpa_0)+&quot; &quot;+str(nvta_0)+&quot; &quot;+str(nvxa_0)+&quot; &quot;+str(nvpb_0)+&quot; &quot;+str(nvxb_0)+&quot; &quot;+str(nvpc_0)+&quot; &quot;+str(nvtc_0)+&quot; &quot;+str(nvxc_0)+&quot; &quot;+str(mat_0)+&quot; &quot;+str(mac_0)+&quot; &quot;+str(mpa_0)+&quot; &quot;+str(mta_0)+&quot; &quot;+str(mxa_0)+&quot; &quot;+str(mpb_0)+&quot; &quot;+str(mxb_0)+&quot; &quot;+str(mpc_0)+&quot; &quot;+str(mtc_0)+&quot; &quot;+str(mxc_0)+&quot; &quot;+str(bnda_0)+&quot; &quot;+str(bndb_0)+&quot; &quot;+str(bndc_0)+&quot; &quot;+str(bndt_0)+&quot; &quot;+str(bndu_0)+&quot; &quot;+str(bndv_0)+&quot; \n&quot;
            notetime_0 = notetime_0 + subeat_0                      # increment notetime by subeat time value
    i_0 = i_0 + 1
    c_0 = 0
score = scoreText_0
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>121.0</startTime>
          <name>Ringer_8a</name>
          <backgroundColor>-11495836</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_0 - 3h13TET
scoreText_0 = &quot;&quot;                              	# scoreText_0 is cleared
bart_0 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_0 = [&apos;e&apos;,&apos;d&apos;,&apos;f&apos;]			# rhythm
bpb_0 = len(rhythmr0_0)                         # beats per bar
beat_0 = bart_0/bpb_0                           # time of beat in seconds
notetime_0 = 0                                  # set intitial note start time
durlist_0 = [1.66,1.66,1.66]			# note duration list
notelist_0 = [55,54,53]				# note list
splist_0 = [5,5,5]				# subpatch list
panalist_0 = [-.5,-.5,-.45]			# pana list
panblist_0 = [-.45,-.55,-.5]			# panb list
nvatlist_0 = [.55,.55,.55]			# nvat list
nvaclist_0 = [0,0,0]				# nvac list
nvpalist_0 = [1,1,1]				# nvpa list
nvtalist_0 = [.55,.55,.55]			# nvta list
nvxalist_0 = [0,0,0]			# nvxa list
nvpblist_0 = [1,1,1]			# nvpb list
nvxblist_0 = [0,0,0]			# nvxb list
nvpclist_0 = [.7,.7,.7]			# nvpc list
nvtclist_0 = [.3,.3,.3]			# nvtc list
nvxclist_0 = [2,2,2]			# nvxc list
matlist_0 = [.55,.55,.55]		# mat list
maclist_0 = [0,0,0]			# mac list
mpalist_0 = [.3,.3,.3]			# mpa list
mtalist_0 = [.55,.55,.55]		# mta list
mxalist_0 = [0,0,0]			# mxa list
mpblist_0 = [.3,.3,.3]			# mpb list
mxblist_0 = [0,0,0]			# mxb list
mpclist_0 = [.15,.15,.15]		# mpc list
mtclist_0 = [.1,.1,.1]			# mtc list
mxclist_0 = [2,2,2]			# mxc list
bndalist_0 = [1,1,1]			# bnda list
bndblist_0 = [1,1,1]			# bndb list
bndclist_0 = [1,1,1]			# bndc list
bndtlist_0 = [.5,.5,.5]			# bndt list
bndulist_0 = [.5,.5,.5]			# bndu list
bndvlist_0 = [.5,.5,.5]			# bndv list
i_0 = 0						# loop iteration counter
c_0 = 0						# note iteration counter
while i_0 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_0 in range(bpb_0) :                           # loop through the items in the rhythm list
        sb_0 = rhythmr0_0[a_0]                          # sb is current item in the rhythm list
        subeat_0 = beat_0/len(sb_0)                     # subeat is the number of sub-beats in the beat
        for b_0 in range(len(sb_0)) :                   # loop through the items in the beat string
            if sb_0[b_0].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_0[b_0])                   # get ascii number of the character
                if sb_0[b_0].isdigit() :                # check if character is numeric
                    amp_0 = (asky-47)                   # assign amplitude
                elif sb_0[b_0].isupper() :              # check if character is uppercase
                    amp_0 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_0 = (asky-60)                   # assign amplitude
            elif sb_0[b_0] == &apos;-&apos; : amp_0 = 0           # character for amp = 0                         
            elif sb_0[b_0] == &apos;&gt;&apos; : amp_0 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_0 = blueDuration + 1           # set notetime_0 &gt; blueduration
                scoreText_0 = &apos;&apos;                        # clear scoreText_0
            if notetime_0 &gt;= blueDuration : break       # break out of the loop
	    if amp_0 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_0 = durlist_0[c_0]			# get duration from durlist
		amp_0 = amp_0-62			# move amp value to correct dbfs range (max=1)
		note_0 = notelist_0[c_0]		# get note from notelist
	        sp_0 = splist_0[c_0]			# get subpatch from splist
		pana_0 = panalist_0[c_0]		# get pana from panalist
		panb_0 = panblist_0[c_0]		# get panb from panblist
		nvat_0 = nvatlist_0[c_0]		# get nvat from nvatlist
		nvac_0 = nvaclist_0[c_0]		# get nvac from nvatlist
		nvpa_0 = nvpalist_0[c_0]		# get nvpa from nvpalist
		nvta_0 = nvtalist_0[c_0]		# get nvta from nvtalist
		nvxa_0 = nvxalist_0[c_0]		# get nvxa from nvxalist
		nvpb_0 = nvpblist_0[c_0]		# get nvpb from nvpblist
		nvxb_0 = nvxblist_0[c_0]		# get nvxb from nvxblist
		nvpc_0 = nvpclist_0[c_0]		# get nvpc from nvpclist
		nvtc_0 = nvtclist_0[c_0]		# get nvtc from nvtclist
		nvxc_0 = nvxclist_0[c_0]		# get nvxc from nvxclist
		mat_0 = matlist_0[c_0]			# get mat from matlist
		mac_0 = maclist_0[c_0]			# get mac from maclist
		mpa_0 = mpalist_0[c_0]			# get mpa from mpalist
		mta_0 = mtalist_0[c_0]			# get mta from mtalist
		mxa_0 = mxalist_0[c_0]			# get mxa from mxalist
		mpb_0 = mpblist_0[c_0]			# get mpb from mpblist
		mxb_0 = mxblist_0[c_0]			# get mxb from mxblist
		mpc_0 = mpclist_0[c_0]			# get mpc from mpclist
		mtc_0 = mtclist_0[c_0]			# get mtc from mtclist
		mxc_0 = mxclist_0[c_0]			# get mxc from mxclist
		bnda_0 = bndalist_0[c_0]		# get bnda from bndalist
		bndb_0 = bndblist_0[c_0]		# get bndb from bndblist
		bndc_0 = bndclist_0[c_0]		# get bndc from bndclist
		bndt_0 = bndtlist_0[c_0]		# get bndt from bndtlist		
		bndu_0 = bndulist_0[c_0]		# get bndu from bndulist		
		bndv_0 = bndvlist_0[c_0]		# get bndv from bndvlist		
                c_0 = c_0 + 1
                scoreText_0 += &quot;i1 &quot;+str(notetime_0)+&quot; &quot;+str(dur_0)+&quot; &quot;+str(amp_0)+&quot; &quot;+str(note_0)+&quot; &quot;+str(sp_0)+&quot; &quot;+str(pana_0)+&quot; &quot;+str(panb_0)+&quot; &quot;+str(nvat_0)+&quot; &quot;+str(nvac_0)+&quot; &quot;+str(nvpa_0)+&quot; &quot;+str(nvta_0)+&quot; &quot;+str(nvxa_0)+&quot; &quot;+str(nvpb_0)+&quot; &quot;+str(nvxb_0)+&quot; &quot;+str(nvpc_0)+&quot; &quot;+str(nvtc_0)+&quot; &quot;+str(nvxc_0)+&quot; &quot;+str(mat_0)+&quot; &quot;+str(mac_0)+&quot; &quot;+str(mpa_0)+&quot; &quot;+str(mta_0)+&quot; &quot;+str(mxa_0)+&quot; &quot;+str(mpb_0)+&quot; &quot;+str(mxb_0)+&quot; &quot;+str(mpc_0)+&quot; &quot;+str(mtc_0)+&quot; &quot;+str(mxc_0)+&quot; &quot;+str(bnda_0)+&quot; &quot;+str(bndb_0)+&quot; &quot;+str(bndc_0)+&quot; &quot;+str(bndt_0)+&quot; &quot;+str(bndu_0)+&quot; &quot;+str(bndv_0)+&quot; \n&quot;
            notetime_0 = notetime_0 + subeat_0                      # increment notetime by subeat time value
    i_0 = i_0 + 1
    c_0 = 0
score = scoreText_0
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>126.0</startTime>
          <name>Ringer_4b</name>
          <backgroundColor>-11495836</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_0 - 3h13TET
scoreText_0 = &quot;&quot;                              	# scoreText_0 is cleared
bart_0 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_0 = [&apos;e&apos;,&apos;d&apos;,&apos;f&apos;]			# rhythm
bpb_0 = len(rhythmr0_0)                         # beats per bar
beat_0 = bart_0/bpb_0                           # time of beat in seconds
notetime_0 = 0                                  # set intitial note start time
durlist_0 = [1.66,1.66,1.66]			# note duration list
notelist_0 = [53,52,51]				# note list
splist_0 = [6,6,6]				# subpatch list
panalist_0 = [-.5,-.5,-.45]			# pana list
panblist_0 = [-.45,-.55,-.5]			# panb list
nvatlist_0 = [.55,.55,.55]			# nvat list
nvaclist_0 = [0,0,0]				# nvac list
nvpalist_0 = [1,1,1]				# nvpa list
nvtalist_0 = [.55,.55,.55]			# nvta list
nvxalist_0 = [0,0,0]			# nvxa list
nvpblist_0 = [1,1,1]			# nvpb list
nvxblist_0 = [0,0,0]			# nvxb list
nvpclist_0 = [.7,.7,.7]			# nvpc list
nvtclist_0 = [.3,.3,.3]			# nvtc list
nvxclist_0 = [2,2,2]			# nvxc list
matlist_0 = [.55,.55,.55]		# mat list
maclist_0 = [0,0,0]			# mac list
mpalist_0 = [.3,.3,.3]			# mpa list
mtalist_0 = [.55,.55,.55]		# mta list
mxalist_0 = [0,0,0]			# mxa list
mpblist_0 = [.3,.3,.3]			# mpb list
mxblist_0 = [0,0,0]			# mxb list
mpclist_0 = [.1,.1,.1]		# mpc list
mtclist_0 = [.3,.3,.3]			# mtc list
mxclist_0 = [2,2,2]			# mxc list
bndalist_0 = [1,1,1]			# bnda list
bndblist_0 = [1,1,1]			# bndb list
bndclist_0 = [1,1,1]			# bndc list
bndtlist_0 = [.5,.5,.5]			# bndt list
bndulist_0 = [.5,.5,.5]			# bndu list
bndvlist_0 = [.5,.5,.5]			# bndv list
i_0 = 0						# loop iteration counter
c_0 = 0						# note iteration counter
while i_0 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_0 in range(bpb_0) :                           # loop through the items in the rhythm list
        sb_0 = rhythmr0_0[a_0]                          # sb is current item in the rhythm list
        subeat_0 = beat_0/len(sb_0)                     # subeat is the number of sub-beats in the beat
        for b_0 in range(len(sb_0)) :                   # loop through the items in the beat string
            if sb_0[b_0].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_0[b_0])                   # get ascii number of the character
                if sb_0[b_0].isdigit() :                # check if character is numeric
                    amp_0 = (asky-47)                   # assign amplitude
                elif sb_0[b_0].isupper() :              # check if character is uppercase
                    amp_0 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_0 = (asky-60)                   # assign amplitude
            elif sb_0[b_0] == &apos;-&apos; : amp_0 = 0           # character for amp = 0                         
            elif sb_0[b_0] == &apos;&gt;&apos; : amp_0 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_0 = blueDuration + 1           # set notetime_0 &gt; blueduration
                scoreText_0 = &apos;&apos;                        # clear scoreText_0
            if notetime_0 &gt;= blueDuration : break       # break out of the loop
	    if amp_0 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_0 = durlist_0[c_0]			# get duration from durlist
		amp_0 = amp_0-62			# move amp value to correct dbfs range (max=1)
		note_0 = notelist_0[c_0]		# get note from notelist
	        sp_0 = splist_0[c_0]			# get subpatch from splist
		pana_0 = panalist_0[c_0]		# get pana from panalist
		panb_0 = panblist_0[c_0]		# get panb from panblist
		nvat_0 = nvatlist_0[c_0]		# get nvat from nvatlist
		nvac_0 = nvaclist_0[c_0]		# get nvac from nvatlist
		nvpa_0 = nvpalist_0[c_0]		# get nvpa from nvpalist
		nvta_0 = nvtalist_0[c_0]		# get nvta from nvtalist
		nvxa_0 = nvxalist_0[c_0]		# get nvxa from nvxalist
		nvpb_0 = nvpblist_0[c_0]		# get nvpb from nvpblist
		nvxb_0 = nvxblist_0[c_0]		# get nvxb from nvxblist
		nvpc_0 = nvpclist_0[c_0]		# get nvpc from nvpclist
		nvtc_0 = nvtclist_0[c_0]		# get nvtc from nvtclist
		nvxc_0 = nvxclist_0[c_0]		# get nvxc from nvxclist
		mat_0 = matlist_0[c_0]			# get mat from matlist
		mac_0 = maclist_0[c_0]			# get mac from maclist
		mpa_0 = mpalist_0[c_0]			# get mpa from mpalist
		mta_0 = mtalist_0[c_0]			# get mta from mtalist
		mxa_0 = mxalist_0[c_0]			# get mxa from mxalist
		mpb_0 = mpblist_0[c_0]			# get mpb from mpblist
		mxb_0 = mxblist_0[c_0]			# get mxb from mxblist
		mpc_0 = mpclist_0[c_0]			# get mpc from mpclist
		mtc_0 = mtclist_0[c_0]			# get mtc from mtclist
		mxc_0 = mxclist_0[c_0]			# get mxc from mxclist
		bnda_0 = bndalist_0[c_0]		# get bnda from bndalist
		bndb_0 = bndblist_0[c_0]		# get bndb from bndblist
		bndc_0 = bndclist_0[c_0]		# get bndc from bndclist
		bndt_0 = bndtlist_0[c_0]		# get bndt from bndtlist		
		bndu_0 = bndulist_0[c_0]		# get bndu from bndulist		
		bndv_0 = bndvlist_0[c_0]		# get bndv from bndvlist		
                c_0 = c_0 + 1
                scoreText_0 += &quot;i1 &quot;+str(notetime_0)+&quot; &quot;+str(dur_0)+&quot; &quot;+str(amp_0)+&quot; &quot;+str(note_0)+&quot; &quot;+str(sp_0)+&quot; &quot;+str(pana_0)+&quot; &quot;+str(panb_0)+&quot; &quot;+str(nvat_0)+&quot; &quot;+str(nvac_0)+&quot; &quot;+str(nvpa_0)+&quot; &quot;+str(nvta_0)+&quot; &quot;+str(nvxa_0)+&quot; &quot;+str(nvpb_0)+&quot; &quot;+str(nvxb_0)+&quot; &quot;+str(nvpc_0)+&quot; &quot;+str(nvtc_0)+&quot; &quot;+str(nvxc_0)+&quot; &quot;+str(mat_0)+&quot; &quot;+str(mac_0)+&quot; &quot;+str(mpa_0)+&quot; &quot;+str(mta_0)+&quot; &quot;+str(mxa_0)+&quot; &quot;+str(mpb_0)+&quot; &quot;+str(mxb_0)+&quot; &quot;+str(mpc_0)+&quot; &quot;+str(mtc_0)+&quot; &quot;+str(mxc_0)+&quot; &quot;+str(bnda_0)+&quot; &quot;+str(bndb_0)+&quot; &quot;+str(bndc_0)+&quot; &quot;+str(bndt_0)+&quot; &quot;+str(bndu_0)+&quot; &quot;+str(bndv_0)+&quot; \n&quot;
            notetime_0 = notetime_0 + subeat_0                      # increment notetime by subeat time value
    i_0 = i_0 + 1
    c_0 = 0
score = scoreText_0
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>131.0</startTime>
          <name>Ringer_8a</name>
          <backgroundColor>-11495836</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_0 - 3h13TET
scoreText_0 = &quot;&quot;                              	# scoreText_0 is cleared
bart_0 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_0 = [&apos;e&apos;,&apos;d&apos;,&apos;f&apos;]			# rhythm
bpb_0 = len(rhythmr0_0)                         # beats per bar
beat_0 = bart_0/bpb_0                           # time of beat in seconds
notetime_0 = 0                                  # set intitial note start time
durlist_0 = [1.66,1.66,1.66]			# note duration list
notelist_0 = [55,54,53]				# note list
splist_0 = [5,5,5]				# subpatch list
panalist_0 = [-.5,-.5,-.45]			# pana list
panblist_0 = [-.45,-.55,-.5]			# panb list
nvatlist_0 = [.55,.55,.55]			# nvat list
nvaclist_0 = [0,0,0]				# nvac list
nvpalist_0 = [1,1,1]				# nvpa list
nvtalist_0 = [.55,.55,.55]			# nvta list
nvxalist_0 = [0,0,0]			# nvxa list
nvpblist_0 = [1,1,1]			# nvpb list
nvxblist_0 = [0,0,0]			# nvxb list
nvpclist_0 = [.7,.7,.7]			# nvpc list
nvtclist_0 = [.3,.3,.3]			# nvtc list
nvxclist_0 = [2,2,2]			# nvxc list
matlist_0 = [.55,.55,.55]		# mat list
maclist_0 = [0,0,0]			# mac list
mpalist_0 = [.3,.3,.3]			# mpa list
mtalist_0 = [.55,.55,.55]		# mta list
mxalist_0 = [0,0,0]			# mxa list
mpblist_0 = [.3,.3,.3]			# mpb list
mxblist_0 = [0,0,0]			# mxb list
mpclist_0 = [.15,.15,.15]		# mpc list
mtclist_0 = [.1,.1,.1]			# mtc list
mxclist_0 = [2,2,2]			# mxc list
bndalist_0 = [1,1,1]			# bnda list
bndblist_0 = [1,1,1]			# bndb list
bndclist_0 = [1,1,1]			# bndc list
bndtlist_0 = [.5,.5,.5]			# bndt list
bndulist_0 = [.5,.5,.5]			# bndu list
bndvlist_0 = [.5,.5,.5]			# bndv list
i_0 = 0						# loop iteration counter
c_0 = 0						# note iteration counter
while i_0 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_0 in range(bpb_0) :                           # loop through the items in the rhythm list
        sb_0 = rhythmr0_0[a_0]                          # sb is current item in the rhythm list
        subeat_0 = beat_0/len(sb_0)                     # subeat is the number of sub-beats in the beat
        for b_0 in range(len(sb_0)) :                   # loop through the items in the beat string
            if sb_0[b_0].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_0[b_0])                   # get ascii number of the character
                if sb_0[b_0].isdigit() :                # check if character is numeric
                    amp_0 = (asky-47)                   # assign amplitude
                elif sb_0[b_0].isupper() :              # check if character is uppercase
                    amp_0 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_0 = (asky-60)                   # assign amplitude
            elif sb_0[b_0] == &apos;-&apos; : amp_0 = 0           # character for amp = 0                         
            elif sb_0[b_0] == &apos;&gt;&apos; : amp_0 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_0 = blueDuration + 1           # set notetime_0 &gt; blueduration
                scoreText_0 = &apos;&apos;                        # clear scoreText_0
            if notetime_0 &gt;= blueDuration : break       # break out of the loop
	    if amp_0 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_0 = durlist_0[c_0]			# get duration from durlist
		amp_0 = amp_0-62			# move amp value to correct dbfs range (max=1)
		note_0 = notelist_0[c_0]		# get note from notelist
	        sp_0 = splist_0[c_0]			# get subpatch from splist
		pana_0 = panalist_0[c_0]		# get pana from panalist
		panb_0 = panblist_0[c_0]		# get panb from panblist
		nvat_0 = nvatlist_0[c_0]		# get nvat from nvatlist
		nvac_0 = nvaclist_0[c_0]		# get nvac from nvatlist
		nvpa_0 = nvpalist_0[c_0]		# get nvpa from nvpalist
		nvta_0 = nvtalist_0[c_0]		# get nvta from nvtalist
		nvxa_0 = nvxalist_0[c_0]		# get nvxa from nvxalist
		nvpb_0 = nvpblist_0[c_0]		# get nvpb from nvpblist
		nvxb_0 = nvxblist_0[c_0]		# get nvxb from nvxblist
		nvpc_0 = nvpclist_0[c_0]		# get nvpc from nvpclist
		nvtc_0 = nvtclist_0[c_0]		# get nvtc from nvtclist
		nvxc_0 = nvxclist_0[c_0]		# get nvxc from nvxclist
		mat_0 = matlist_0[c_0]			# get mat from matlist
		mac_0 = maclist_0[c_0]			# get mac from maclist
		mpa_0 = mpalist_0[c_0]			# get mpa from mpalist
		mta_0 = mtalist_0[c_0]			# get mta from mtalist
		mxa_0 = mxalist_0[c_0]			# get mxa from mxalist
		mpb_0 = mpblist_0[c_0]			# get mpb from mpblist
		mxb_0 = mxblist_0[c_0]			# get mxb from mxblist
		mpc_0 = mpclist_0[c_0]			# get mpc from mpclist
		mtc_0 = mtclist_0[c_0]			# get mtc from mtclist
		mxc_0 = mxclist_0[c_0]			# get mxc from mxclist
		bnda_0 = bndalist_0[c_0]		# get bnda from bndalist
		bndb_0 = bndblist_0[c_0]		# get bndb from bndblist
		bndc_0 = bndclist_0[c_0]		# get bndc from bndclist
		bndt_0 = bndtlist_0[c_0]		# get bndt from bndtlist		
		bndu_0 = bndulist_0[c_0]		# get bndu from bndulist		
		bndv_0 = bndvlist_0[c_0]		# get bndv from bndvlist		
                c_0 = c_0 + 1
                scoreText_0 += &quot;i1 &quot;+str(notetime_0)+&quot; &quot;+str(dur_0)+&quot; &quot;+str(amp_0)+&quot; &quot;+str(note_0)+&quot; &quot;+str(sp_0)+&quot; &quot;+str(pana_0)+&quot; &quot;+str(panb_0)+&quot; &quot;+str(nvat_0)+&quot; &quot;+str(nvac_0)+&quot; &quot;+str(nvpa_0)+&quot; &quot;+str(nvta_0)+&quot; &quot;+str(nvxa_0)+&quot; &quot;+str(nvpb_0)+&quot; &quot;+str(nvxb_0)+&quot; &quot;+str(nvpc_0)+&quot; &quot;+str(nvtc_0)+&quot; &quot;+str(nvxc_0)+&quot; &quot;+str(mat_0)+&quot; &quot;+str(mac_0)+&quot; &quot;+str(mpa_0)+&quot; &quot;+str(mta_0)+&quot; &quot;+str(mxa_0)+&quot; &quot;+str(mpb_0)+&quot; &quot;+str(mxb_0)+&quot; &quot;+str(mpc_0)+&quot; &quot;+str(mtc_0)+&quot; &quot;+str(mxc_0)+&quot; &quot;+str(bnda_0)+&quot; &quot;+str(bndb_0)+&quot; &quot;+str(bndc_0)+&quot; &quot;+str(bndt_0)+&quot; &quot;+str(bndu_0)+&quot; &quot;+str(bndv_0)+&quot; \n&quot;
            notetime_0 = notetime_0 + subeat_0                      # increment notetime by subeat time value
    i_0 = i_0 + 1
    c_0 = 0
score = scoreText_0
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>136.0</startTime>
          <name>Ringer_8a</name>
          <backgroundColor>-11495836</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_0 - 3h13TET
scoreText_0 = &quot;&quot;                              	# scoreText_0 is cleared
bart_0 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_0 = [&apos;e&apos;,&apos;d&apos;,&apos;f&apos;]			# rhythm
bpb_0 = len(rhythmr0_0)                         # beats per bar
beat_0 = bart_0/bpb_0                           # time of beat in seconds
notetime_0 = 0                                  # set intitial note start time
durlist_0 = [1.66,1.66,1.66]			# note duration list
notelist_0 = [52,51,50]				# note list
splist_0 = [6,6,6]				# subpatch list
panalist_0 = [-.5,-.5,-.45]			# pana list
panblist_0 = [-.45,-.55,-.5]			# panb list
nvatlist_0 = [.55,.55,.55]			# nvat list
nvaclist_0 = [0,0,0]				# nvac list
nvpalist_0 = [1,1,1]				# nvpa list
nvtalist_0 = [.55,.55,.55]			# nvta list
nvxalist_0 = [0,0,0]			# nvxa list
nvpblist_0 = [1,1,1]			# nvpb list
nvxblist_0 = [0,0,0]			# nvxb list
nvpclist_0 = [.7,.7,.7]			# nvpc list
nvtclist_0 = [.3,.3,.3]			# nvtc list
nvxclist_0 = [2,2,3]			# nvxc list
matlist_0 = [.55,.55,.55]		# mat list
maclist_0 = [0,0,0]			# mac list
mpalist_0 = [.3,.3,.3]			# mpa list
mtalist_0 = [.55,.55,.55]		# mta list
mxalist_0 = [0,0,0]			# mxa list
mpblist_0 = [.3,.3,.3]			# mpb list
mxblist_0 = [0,0,0]			# mxb list
mpclist_0 = [.1,.1,.1]		# mpc list
mtclist_0 = [.3,.3,.3]			# mtc list
mxclist_0 = [2,2,4]			# mxc list
bndalist_0 = [1,1,1]			# bnda list
bndblist_0 = [1,1,1]			# bndb list
bndclist_0 = [1,1,1]			# bndc list
bndtlist_0 = [.5,.5,.5]			# bndt list
bndulist_0 = [.5,.5,.5]			# bndu list
bndvlist_0 = [.5,.5,.5]			# bndv list
i_0 = 0						# loop iteration counter
c_0 = 0						# note iteration counter
while i_0 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_0 in range(bpb_0) :                           # loop through the items in the rhythm list
        sb_0 = rhythmr0_0[a_0]                          # sb is current item in the rhythm list
        subeat_0 = beat_0/len(sb_0)                     # subeat is the number of sub-beats in the beat
        for b_0 in range(len(sb_0)) :                   # loop through the items in the beat string
            if sb_0[b_0].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_0[b_0])                   # get ascii number of the character
                if sb_0[b_0].isdigit() :                # check if character is numeric
                    amp_0 = (asky-47)                   # assign amplitude
                elif sb_0[b_0].isupper() :              # check if character is uppercase
                    amp_0 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_0 = (asky-60)                   # assign amplitude
            elif sb_0[b_0] == &apos;-&apos; : amp_0 = 0           # character for amp = 0                         
            elif sb_0[b_0] == &apos;&gt;&apos; : amp_0 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_0 = blueDuration + 1           # set notetime_0 &gt; blueduration
                scoreText_0 = &apos;&apos;                        # clear scoreText_0
            if notetime_0 &gt;= blueDuration : break       # break out of the loop
	    if amp_0 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_0 = durlist_0[c_0]			# get duration from durlist
		amp_0 = amp_0-62			# move amp value to correct dbfs range (max=1)
		note_0 = notelist_0[c_0]		# get note from notelist
	        sp_0 = splist_0[c_0]			# get subpatch from splist
		pana_0 = panalist_0[c_0]		# get pana from panalist
		panb_0 = panblist_0[c_0]		# get panb from panblist
		nvat_0 = nvatlist_0[c_0]		# get nvat from nvatlist
		nvac_0 = nvaclist_0[c_0]		# get nvac from nvatlist
		nvpa_0 = nvpalist_0[c_0]		# get nvpa from nvpalist
		nvta_0 = nvtalist_0[c_0]		# get nvta from nvtalist
		nvxa_0 = nvxalist_0[c_0]		# get nvxa from nvxalist
		nvpb_0 = nvpblist_0[c_0]		# get nvpb from nvpblist
		nvxb_0 = nvxblist_0[c_0]		# get nvxb from nvxblist
		nvpc_0 = nvpclist_0[c_0]		# get nvpc from nvpclist
		nvtc_0 = nvtclist_0[c_0]		# get nvtc from nvtclist
		nvxc_0 = nvxclist_0[c_0]		# get nvxc from nvxclist
		mat_0 = matlist_0[c_0]			# get mat from matlist
		mac_0 = maclist_0[c_0]			# get mac from maclist
		mpa_0 = mpalist_0[c_0]			# get mpa from mpalist
		mta_0 = mtalist_0[c_0]			# get mta from mtalist
		mxa_0 = mxalist_0[c_0]			# get mxa from mxalist
		mpb_0 = mpblist_0[c_0]			# get mpb from mpblist
		mxb_0 = mxblist_0[c_0]			# get mxb from mxblist
		mpc_0 = mpclist_0[c_0]			# get mpc from mpclist
		mtc_0 = mtclist_0[c_0]			# get mtc from mtclist
		mxc_0 = mxclist_0[c_0]			# get mxc from mxclist
		bnda_0 = bndalist_0[c_0]		# get bnda from bndalist
		bndb_0 = bndblist_0[c_0]		# get bndb from bndblist
		bndc_0 = bndclist_0[c_0]		# get bndc from bndclist
		bndt_0 = bndtlist_0[c_0]		# get bndt from bndtlist		
		bndu_0 = bndulist_0[c_0]		# get bndu from bndulist		
		bndv_0 = bndvlist_0[c_0]		# get bndv from bndvlist		
                c_0 = c_0 + 1
                scoreText_0 += &quot;i1 &quot;+str(notetime_0)+&quot; &quot;+str(dur_0)+&quot; &quot;+str(amp_0)+&quot; &quot;+str(note_0)+&quot; &quot;+str(sp_0)+&quot; &quot;+str(pana_0)+&quot; &quot;+str(panb_0)+&quot; &quot;+str(nvat_0)+&quot; &quot;+str(nvac_0)+&quot; &quot;+str(nvpa_0)+&quot; &quot;+str(nvta_0)+&quot; &quot;+str(nvxa_0)+&quot; &quot;+str(nvpb_0)+&quot; &quot;+str(nvxb_0)+&quot; &quot;+str(nvpc_0)+&quot; &quot;+str(nvtc_0)+&quot; &quot;+str(nvxc_0)+&quot; &quot;+str(mat_0)+&quot; &quot;+str(mac_0)+&quot; &quot;+str(mpa_0)+&quot; &quot;+str(mta_0)+&quot; &quot;+str(mxa_0)+&quot; &quot;+str(mpb_0)+&quot; &quot;+str(mxb_0)+&quot; &quot;+str(mpc_0)+&quot; &quot;+str(mtc_0)+&quot; &quot;+str(mxc_0)+&quot; &quot;+str(bnda_0)+&quot; &quot;+str(bndb_0)+&quot; &quot;+str(bndc_0)+&quot; &quot;+str(bndt_0)+&quot; &quot;+str(bndu_0)+&quot; &quot;+str(bndv_0)+&quot; \n&quot;
            notetime_0 = notetime_0 + subeat_0                      # increment notetime by subeat time value
    i_0 = i_0 + 1
    c_0 = 0
score = scoreText_0
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>141.0</startTime>
          <name>Ringer_8a</name>
          <backgroundColor>-11495836</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_0 - 3h13TET
scoreText_0 = &quot;&quot;                              	# scoreText_0 is cleared
bart_0 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_0 = [&apos;e&apos;,&apos;7&apos;,&apos;-&apos;]			# rhythm
bpb_0 = len(rhythmr0_0)                         # beats per bar
beat_0 = bart_0/bpb_0                           # time of beat in seconds
notetime_0 = 0                                  # set intitial note start time
durlist_0 = [3.33,3.33]			# note duration list
notelist_0 = [55,54]				# note list
splist_0 = [5,5]				# subpatch list
panalist_0 = [-.5,-.7]			# pana list
panblist_0 = [-.45,.7]			# panb list
nvatlist_0 = [1,.55]			# nvat list
nvaclist_0 = [0,0]				# nvac list
nvpalist_0 = [1,1]				# nvpa list
nvtalist_0 = [1,.55]			# nvta list
nvxalist_0 = [0,0]			# nvxa list
nvpblist_0 = [1,1]			# nvpb list
nvxblist_0 = [0,0]			# nvxb list
nvpclist_0 = [.7,.7]			# nvpc list
nvtclist_0 = [2.99,3.32]			# nvtc list
nvxclist_0 = [-3,2]			# nvxc list
matlist_0 = [.5,.55]		# mat list
maclist_0 = [0,0]			# mac list
mpalist_0 = [.3,.3]			# mpa list
mtalist_0 = [.55,.55]		# mta list
mxalist_0 = [0,0]			# mxa list
mpblist_0 = [.3,.3]			# mpb list
mxblist_0 = [0,0]			# mxb list
mpclist_0 = [.15,.15]		# mpc list
mtclist_0 = [2.99,3.32]			# mtc list
mxclist_0 = [-3,2]			# mxc list
bndalist_0 = [1,1]			# bnda list
bndblist_0 = [1,1]			# bndb list
bndclist_0 = [1,1]			# bndc list
bndtlist_0 = [.5,.5]			# bndt list
bndulist_0 = [.5,.5]			# bndu list
bndvlist_0 = [.5,.5]			# bndv list
i_0 = 0						# loop iteration counter
c_0 = 0						# note iteration counter
while i_0 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_0 in range(bpb_0) :                           # loop through the items in the rhythm list
        sb_0 = rhythmr0_0[a_0]                          # sb is current item in the rhythm list
        subeat_0 = beat_0/len(sb_0)                     # subeat is the number of sub-beats in the beat
        for b_0 in range(len(sb_0)) :                   # loop through the items in the beat string
            if sb_0[b_0].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_0[b_0])                   # get ascii number of the character
                if sb_0[b_0].isdigit() :                # check if character is numeric
                    amp_0 = (asky-47)                   # assign amplitude
                elif sb_0[b_0].isupper() :              # check if character is uppercase
                    amp_0 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_0 = (asky-60)                   # assign amplitude
            elif sb_0[b_0] == &apos;-&apos; : amp_0 = 0           # character for amp = 0                         
            elif sb_0[b_0] == &apos;&gt;&apos; : amp_0 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_0 = blueDuration + 1           # set notetime_0 &gt; blueduration
                scoreText_0 = &apos;&apos;                        # clear scoreText_0
            if notetime_0 &gt;= blueDuration : break       # break out of the loop
	    if amp_0 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_0 = durlist_0[c_0]			# get duration from durlist
		amp_0 = amp_0-62			# move amp value to correct dbfs range (max=1)
		note_0 = notelist_0[c_0]		# get note from notelist
	        sp_0 = splist_0[c_0]			# get subpatch from splist
		pana_0 = panalist_0[c_0]		# get pana from panalist
		panb_0 = panblist_0[c_0]		# get panb from panblist
		nvat_0 = nvatlist_0[c_0]		# get nvat from nvatlist
		nvac_0 = nvaclist_0[c_0]		# get nvac from nvatlist
		nvpa_0 = nvpalist_0[c_0]		# get nvpa from nvpalist
		nvta_0 = nvtalist_0[c_0]		# get nvta from nvtalist
		nvxa_0 = nvxalist_0[c_0]		# get nvxa from nvxalist
		nvpb_0 = nvpblist_0[c_0]		# get nvpb from nvpblist
		nvxb_0 = nvxblist_0[c_0]		# get nvxb from nvxblist
		nvpc_0 = nvpclist_0[c_0]		# get nvpc from nvpclist
		nvtc_0 = nvtclist_0[c_0]		# get nvtc from nvtclist
		nvxc_0 = nvxclist_0[c_0]		# get nvxc from nvxclist
		mat_0 = matlist_0[c_0]			# get mat from matlist
		mac_0 = maclist_0[c_0]			# get mac from maclist
		mpa_0 = mpalist_0[c_0]			# get mpa from mpalist
		mta_0 = mtalist_0[c_0]			# get mta from mtalist
		mxa_0 = mxalist_0[c_0]			# get mxa from mxalist
		mpb_0 = mpblist_0[c_0]			# get mpb from mpblist
		mxb_0 = mxblist_0[c_0]			# get mxb from mxblist
		mpc_0 = mpclist_0[c_0]			# get mpc from mpclist
		mtc_0 = mtclist_0[c_0]			# get mtc from mtclist
		mxc_0 = mxclist_0[c_0]			# get mxc from mxclist
		bnda_0 = bndalist_0[c_0]		# get bnda from bndalist
		bndb_0 = bndblist_0[c_0]		# get bndb from bndblist
		bndc_0 = bndclist_0[c_0]		# get bndc from bndclist
		bndt_0 = bndtlist_0[c_0]		# get bndt from bndtlist		
		bndu_0 = bndulist_0[c_0]		# get bndu from bndulist		
		bndv_0 = bndvlist_0[c_0]		# get bndv from bndvlist		
                c_0 = c_0 + 1
                scoreText_0 += &quot;i1 &quot;+str(notetime_0)+&quot; &quot;+str(dur_0)+&quot; &quot;+str(amp_0)+&quot; &quot;+str(note_0)+&quot; &quot;+str(sp_0)+&quot; &quot;+str(pana_0)+&quot; &quot;+str(panb_0)+&quot; &quot;+str(nvat_0)+&quot; &quot;+str(nvac_0)+&quot; &quot;+str(nvpa_0)+&quot; &quot;+str(nvta_0)+&quot; &quot;+str(nvxa_0)+&quot; &quot;+str(nvpb_0)+&quot; &quot;+str(nvxb_0)+&quot; &quot;+str(nvpc_0)+&quot; &quot;+str(nvtc_0)+&quot; &quot;+str(nvxc_0)+&quot; &quot;+str(mat_0)+&quot; &quot;+str(mac_0)+&quot; &quot;+str(mpa_0)+&quot; &quot;+str(mta_0)+&quot; &quot;+str(mxa_0)+&quot; &quot;+str(mpb_0)+&quot; &quot;+str(mxb_0)+&quot; &quot;+str(mpc_0)+&quot; &quot;+str(mtc_0)+&quot; &quot;+str(mxc_0)+&quot; &quot;+str(bnda_0)+&quot; &quot;+str(bndb_0)+&quot; &quot;+str(bndc_0)+&quot; &quot;+str(bndt_0)+&quot; &quot;+str(bndu_0)+&quot; &quot;+str(bndv_0)+&quot; \n&quot;
            notetime_0 = notetime_0 + subeat_0                      # increment notetime by subeat time value
    i_0 = i_0 + 1
    c_0 = 0
score = scoreText_0
</pythonCode>
        </soundObject>
        <parameterId>-1365060600</parameterId>
      </soundLayer>
      <soundLayer name='' muted='false' solo='false' heightIndex='0'>
        <noteProcessorChain/>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>15.0</startTime>
          <name>Ringer_1a</name>
          <backgroundColor>-14286</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_1 - 3h13TET
scoreText_1 = &quot;&quot;                              	# scoreText_1 is cleared
bart_1 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_1 = [&apos;b&apos;,&apos;a&apos;,&apos;c&apos;]			# rhythm
bpb_1 = len(rhythmr0_1)                         # beats per bar
beat_1 = bart_1/bpb_1                           # time of beat in seconds
notetime_1 = 0                                  # set intitial note start time
durlist_1 = [1.66,1.66,1.66]			# note duration list
notelist_1 = [69,70,73]				# note list
splist_1 = [1,1,1]				# subpatch list
panalist_1 = [.45,.55,.45]			# panb list
panblist_1 = [.5,.5,.5]				# pana list
nvatlist_1 = [.55,.55,.55]			# nvat list
nvaclist_1 = [0,0,0]				# nvac list
nvpalist_1 = [1,1,1]				# nvpa list
nvtalist_1 = [.55,.55,.55]			# nvta list
nvxalist_1 = [0,0,0]			# nvxa list
nvpblist_1 = [1,1,1]			# nvpb list
nvxblist_1 = [0,0,0]			# nvxb list
nvpclist_1 = [.7,.7,.7]			# nvpc list
nvtclist_1 = [.3,.3,.3]			# nvtc list
nvxclist_1 = [2,2,2]			# nvxc list
matlist_1 = [.55,.55,.55]		# mat list
maclist_1 = [0,0,0]			# mac list
mpalist_1 = [.3,.3,.3]			# mpa list
mtalist_1 = [.55,.55,.55]		# mta list
mxalist_1 = [0,0,0]			# mxa list
mpblist_1 = [.3,.3,.3]			# mpb list
mxblist_1 = [0,0,0]			# mxb list
mpclist_1 = [.15,.15,.15]		# mpc list
mtclist_1 = [.1,.1,.1]			# mtc list
mxclist_1 = [2,2,2]			# mxc list
bndalist_1 = [1,1,1]			# bnda list
bndblist_1 = [1,1,1]			# bndb list
bndclist_1 = [1,1,1]			# bndc list
bndtlist_1 = [.5,.5,.5]			# bndt list
bndulist_1 = [.5,.5,.5]			# bndu list
bndvlist_1 = [.5,.5,.5]			# bndv list
i_1 = 0						# loop iteration counter
c_1 = 0						# note iteration counter
while i_1 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_1 in range(bpb_1) :                           # loop through the items in the rhythm list
        sb_1 = rhythmr0_1[a_1]                          # sb is current item in the rhythm list
        subeat_1 = beat_1/len(sb_1)                     # subeat is the number of sub-beats in the beat
        for b_1 in range(len(sb_1)) :                   # loop through the items in the beat string
            if sb_1[b_1].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_1[b_1])                   # get ascii number of the character
                if sb_1[b_1].isdigit() :                # check if character is numeric
                    amp_1 = (asky-47)                   # assign amplitude
                elif sb_1[b_1].isupper() :              # check if character is uppercase
                    amp_1 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_1 = (asky-60)                   # assign amplitude
            elif sb_1[b_1] == &apos;-&apos; : amp_1 = 0           # character for amp = 0                         
            elif sb_1[b_1] == &apos;&gt;&apos; : amp_1 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_1 = blueDuration + 1           # set notetime_1 &gt; blueduration
                scoreText_1 = &apos;&apos;                        # clear scoreText_1
            if notetime_1 &gt;= blueDuration : break       # break out of the loop
	    if amp_1 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_1 = durlist_1[c_1]			# get duration from durlist
		amp_1 = amp_1-62			# move amp value to correct dbfs range (max=1)
		note_1 = notelist_1[c_1]		# get note from notelist
	        sp_1 = splist_1[c_1]			# get subpatch from splist
		pana_1 = panalist_1[c_1]		# get pana from panalist
		panb_1 = panblist_1[c_1]		# get panb from panblist
		nvat_1 = nvatlist_1[c_1]		# get nvat from nvatlist
		nvac_1 = nvaclist_1[c_1]		# get nvac from nvatlist
		nvpa_1 = nvpalist_1[c_1]		# get nvpa from nvpalist
		nvta_1 = nvtalist_1[c_1]		# get nvta from nvtalist
		nvxa_1 = nvxalist_1[c_1]		# get nvxa from nvxalist
		nvpb_1 = nvpblist_1[c_1]		# get nvpb from nvpblist
		nvxb_1 = nvxblist_1[c_1]		# get nvxb from nvxblist
		nvpc_1 = nvpclist_1[c_1]		# get nvpc from nvpclist
		nvtc_1 = nvtclist_1[c_1]		# get nvtc from nvtclist
		nvxc_1 = nvxclist_1[c_1]		# get nvxc from nvxclist
		mat_1 = matlist_1[c_1]			# get mat from matlist
		mac_1 = maclist_1[c_1]			# get mac from maclist
		mpa_1 = mpalist_1[c_1]			# get mpa from mpalist
		mta_1 = mtalist_1[c_1]			# get mta from mtalist
		mxa_1 = mxalist_1[c_1]			# get mxa from mxalist
		mpb_1 = mpblist_1[c_1]			# get mpb from mpblist
		mxb_1 = mxblist_1[c_1]			# get mxb from mxblist
		mpc_1 = mpclist_1[c_1]			# get mpc from mpclist
		mtc_1 = mtclist_1[c_1]			# get mtc from mtclist
		mxc_1 = mxclist_1[c_1]			# get mxc from mxclist
		bnda_1 = bndalist_1[c_1]		# get bnda from bndalist
		bndb_1 = bndblist_1[c_1]		# get bndb from bndblist
		bndc_1 = bndclist_1[c_1]		# get bndc from bndclist
		bndt_1 = bndtlist_1[c_1]		# get bndt from bndtlist		
		bndu_1 = bndulist_1[c_1]		# get bndu from bndulist		
		bndv_1 = bndvlist_1[c_1]		# get bndv from bndvlist		
                c_1 = c_1 + 1
                scoreText_1 += &quot;i1 &quot;+str(notetime_1)+&quot; &quot;+str(dur_1)+&quot; &quot;+str(amp_1)+&quot; &quot;+str(note_1)+&quot; &quot;+str(sp_1)+&quot; &quot;+str(pana_1)+&quot; &quot;+str(panb_1)+&quot; &quot;+str(nvat_1)+&quot; &quot;+str(nvac_1)+&quot; &quot;+str(nvpa_1)+&quot; &quot;+str(nvta_1)+&quot; &quot;+str(nvxa_1)+&quot; &quot;+str(nvpb_1)+&quot; &quot;+str(nvxb_1)+&quot; &quot;+str(nvpc_1)+&quot; &quot;+str(nvtc_1)+&quot; &quot;+str(nvxc_1)+&quot; &quot;+str(mat_1)+&quot; &quot;+str(mac_1)+&quot; &quot;+str(mpa_1)+&quot; &quot;+str(mta_1)+&quot; &quot;+str(mxa_1)+&quot; &quot;+str(mpb_1)+&quot; &quot;+str(mxb_1)+&quot; &quot;+str(mpc_1)+&quot; &quot;+str(mtc_1)+&quot; &quot;+str(mxc_1)+&quot; &quot;+str(bnda_1)+&quot; &quot;+str(bndb_1)+&quot; &quot;+str(bndc_1)+&quot; &quot;+str(bndt_1)+&quot; &quot;+str(bndu_1)+&quot; &quot;+str(bndv_1)+&quot; \n&quot;
            notetime_1 = notetime_1 + subeat_1                      # increment notetime by subeat time value
    i_1 = i_1 + 1
    c_1 = 0
score = scoreText_1
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>20.0</startTime>
          <name>Ringer_1b</name>
          <backgroundColor>-341966</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_1 - 3h13TET
scoreText_1 = &quot;&quot;                              	# scoreText_1 is cleared
bart_1 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_1 = [&apos;b&apos;,&apos;a&apos;,&apos;c&apos;]			# rhythm
bpb_1 = len(rhythmr0_1)                         # beats per bar
beat_1 = bart_1/bpb_1                           # time of beat in seconds
notetime_1 = 0                                  # set intitial note start time
durlist_1 = [1.66,1.66,1.66]			# note duration list
notelist_1 = [67,69,70]				# note list
splist_1 = [1,1,1]				# subpatch list
panalist_1 = [.45,.55,.45]			# panb list
panblist_1 = [.5,.5,.5]				# pana list
nvatlist_1 = [.55,.55,.55]			# nvat list
nvaclist_1 = [0,0,0]				# nvac list
nvpalist_1 = [1,1,1]				# nvpa list
nvtalist_1 = [.55,.55,.55]			# nvta list
nvxalist_1 = [0,0,0]			# nvxa list
nvpblist_1 = [1,1,1]			# nvpb list
nvxblist_1 = [0,0,0]			# nvxb list
nvpclist_1 = [.7,.7,.7]			# nvpc list
nvtclist_1 = [.3,.3,.3]			# nvtc list
nvxclist_1 = [2,2,2]			# nvxc list
matlist_1 = [.55,.55,.55]		# mat list
maclist_1 = [0,0,0]			# mac list
mpalist_1 = [.3,.3,.3]			# mpa list
mtalist_1 = [.55,.55,.55]		# mta list
mxalist_1 = [0,0,0]			# mxa list
mpblist_1 = [.3,.3,.3]			# mpb list
mxblist_1 = [0,0,0]			# mxb list
mpclist_1 = [.1,.1,.1]		# mpc list
mtclist_1 = [.3,.3,.3]			# mtc list
mxclist_1 = [2,2,2]			# mxc list
bndalist_1 = [1,1,1]			# bnda list
bndblist_1 = [1,1,1]			# bndb list
bndclist_1 = [1,1,1]			# bndc list
bndtlist_1 = [.5,.5,.5]			# bndt list
bndulist_1 = [.5,.5,.5]			# bndu list
bndvlist_1 = [.5,.5,.5]			# bndv list
i_1 = 0						# loop iteration counter
c_1 = 0						# note iteration counter
while i_1 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_1 in range(bpb_1) :                           # loop through the items in the rhythm list
        sb_1 = rhythmr0_1[a_1]                          # sb is current item in the rhythm list
        subeat_1 = beat_1/len(sb_1)                     # subeat is the number of sub-beats in the beat
        for b_1 in range(len(sb_1)) :                   # loop through the items in the beat string
            if sb_1[b_1].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_1[b_1])                   # get ascii number of the character
                if sb_1[b_1].isdigit() :                # check if character is numeric
                    amp_1 = (asky-47)                   # assign amplitude
                elif sb_1[b_1].isupper() :              # check if character is uppercase
                    amp_1 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_1 = (asky-60)                   # assign amplitude
            elif sb_1[b_1] == &apos;-&apos; : amp_1 = 0           # character for amp = 0                         
            elif sb_1[b_1] == &apos;&gt;&apos; : amp_1 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_1 = blueDuration + 1           # set notetime_1 &gt; blueduration
                scoreText_1 = &apos;&apos;                        # clear scoreText_1
            if notetime_1 &gt;= blueDuration : break       # break out of the loop
	    if amp_1 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_1 = durlist_1[c_1]			# get duration from durlist
		amp_1 = amp_1-62			# move amp value to correct dbfs range (max=1)
		note_1 = notelist_1[c_1]		# get note from notelist
	        sp_1 = splist_1[c_1]			# get subpatch from splist
		pana_1 = panalist_1[c_1]		# get pana from panalist
		panb_1 = panblist_1[c_1]		# get panb from panblist
		nvat_1 = nvatlist_1[c_1]		# get nvat from nvatlist
		nvac_1 = nvaclist_1[c_1]		# get nvac from nvatlist
		nvpa_1 = nvpalist_1[c_1]		# get nvpa from nvpalist
		nvta_1 = nvtalist_1[c_1]		# get nvta from nvtalist
		nvxa_1 = nvxalist_1[c_1]		# get nvxa from nvxalist
		nvpb_1 = nvpblist_1[c_1]		# get nvpb from nvpblist
		nvxb_1 = nvxblist_1[c_1]		# get nvxb from nvxblist
		nvpc_1 = nvpclist_1[c_1]		# get nvpc from nvpclist
		nvtc_1 = nvtclist_1[c_1]		# get nvtc from nvtclist
		nvxc_1 = nvxclist_1[c_1]		# get nvxc from nvxclist
		mat_1 = matlist_1[c_1]			# get mat from matlist
		mac_1 = maclist_1[c_1]			# get mac from maclist
		mpa_1 = mpalist_1[c_1]			# get mpa from mpalist
		mta_1 = mtalist_1[c_1]			# get mta from mtalist
		mxa_1 = mxalist_1[c_1]			# get mxa from mxalist
		mpb_1 = mpblist_1[c_1]			# get mpb from mpblist
		mxb_1 = mxblist_1[c_1]			# get mxb from mxblist
		mpc_1 = mpclist_1[c_1]			# get mpc from mpclist
		mtc_1 = mtclist_1[c_1]			# get mtc from mtclist
		mxc_1 = mxclist_1[c_1]			# get mxc from mxclist
		bnda_1 = bndalist_1[c_1]		# get bnda from bndalist
		bndb_1 = bndblist_1[c_1]		# get bndb from bndblist
		bndc_1 = bndclist_1[c_1]		# get bndc from bndclist
		bndt_1 = bndtlist_1[c_1]		# get bndt from bndtlist		
		bndu_1 = bndulist_1[c_1]		# get bndu from bndulist		
		bndv_1 = bndvlist_1[c_1]		# get bndv from bndvlist		
                c_1 = c_1 + 1
                scoreText_1 += &quot;i1 &quot;+str(notetime_1)+&quot; &quot;+str(dur_1)+&quot; &quot;+str(amp_1)+&quot; &quot;+str(note_1)+&quot; &quot;+str(sp_1)+&quot; &quot;+str(pana_1)+&quot; &quot;+str(panb_1)+&quot; &quot;+str(nvat_1)+&quot; &quot;+str(nvac_1)+&quot; &quot;+str(nvpa_1)+&quot; &quot;+str(nvta_1)+&quot; &quot;+str(nvxa_1)+&quot; &quot;+str(nvpb_1)+&quot; &quot;+str(nvxb_1)+&quot; &quot;+str(nvpc_1)+&quot; &quot;+str(nvtc_1)+&quot; &quot;+str(nvxc_1)+&quot; &quot;+str(mat_1)+&quot; &quot;+str(mac_1)+&quot; &quot;+str(mpa_1)+&quot; &quot;+str(mta_1)+&quot; &quot;+str(mxa_1)+&quot; &quot;+str(mpb_1)+&quot; &quot;+str(mxb_1)+&quot; &quot;+str(mpc_1)+&quot; &quot;+str(mtc_1)+&quot; &quot;+str(mxc_1)+&quot; &quot;+str(bnda_1)+&quot; &quot;+str(bndb_1)+&quot; &quot;+str(bndc_1)+&quot; &quot;+str(bndt_1)+&quot; &quot;+str(bndu_1)+&quot; &quot;+str(bndv_1)+&quot; \n&quot;
            notetime_1 = notetime_1 + subeat_1                      # increment notetime by subeat time value
    i_1 = i_1 + 1
    c_1 = 0
score = scoreText_1
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>25.0</startTime>
          <name>Ringer_1c</name>
          <backgroundColor>-341966</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_1 - 3h13TET
scoreText_1 = &quot;&quot;                              	# scoreText_1 is cleared
bart_1 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_1 = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]			# rhythm
bpb_1 = len(rhythmr0_1)                         # beats per bar
beat_1 = bart_1/bpb_1                           # time of beat in seconds
notetime_1 = 0                                  # set intitial note start time
durlist_1 = [1.66,1.66,1.66]			# note duration list
notelist_1 = [75,70,69]				# note list
splist_1 = [1,1,1]				# subpatch list
panalist_1 = [.45,.55,.45]			# panb list
panblist_1 = [.5,.5,.5]				# pana list
nvatlist_1 = [.55,.55,.55]			# nvat list
nvaclist_1 = [0,0,0]				# nvac list
nvpalist_1 = [1,1,1]				# nvpa list
nvtalist_1 = [.55,.55,.55]			# nvta list
nvxalist_1 = [0,0,0]			# nvxa list
nvpblist_1 = [1,1,1]			# nvpb list
nvxblist_1 = [0,0,0]			# nvxb list
nvpclist_1 = [.7,.7,.7]			# nvpc list
nvtclist_1 = [.3,.3,.3]			# nvtc list
nvxclist_1 = [2,2,2]			# nvxc list
matlist_1 = [.55,.55,.55]		# mat list
maclist_1 = [0,0,0]			# mac list
mpalist_1 = [.3,.3,.3]			# mpa list
mtalist_1 = [.55,.55,.55]		# mta list
mxalist_1 = [0,0,0]			# mxa list
mpblist_1 = [.3,.3,.3]			# mpb list
mxblist_1 = [0,0,0]			# mxb list
mpclist_1 = [.1,.1,.1]		# mpc list
mtclist_1 = [.3,.3,.3]			# mtc list
mxclist_1 = [2,2,2]			# mxc list
bndalist_1 = [1,1,1]			# bnda list
bndblist_1 = [1,1,1]			# bndb list
bndclist_1 = [1,1,1]			# bndc list
bndtlist_1 = [.5,.5,.5]			# bndt list
bndulist_1 = [.5,.5,.5]			# bndu list
bndvlist_1 = [.5,.5,.5]			# bndv list
i_1 = 0						# loop iteration counter
c_1 = 0						# note iteration counter
while i_1 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_1 in range(bpb_1) :                           # loop through the items in the rhythm list
        sb_1 = rhythmr0_1[a_1]                          # sb is current item in the rhythm list
        subeat_1 = beat_1/len(sb_1)                     # subeat is the number of sub-beats in the beat
        for b_1 in range(len(sb_1)) :                   # loop through the items in the beat string
            if sb_1[b_1].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_1[b_1])                   # get ascii number of the character
                if sb_1[b_1].isdigit() :                # check if character is numeric
                    amp_1 = (asky-47)                   # assign amplitude
                elif sb_1[b_1].isupper() :              # check if character is uppercase
                    amp_1 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_1 = (asky-60)                   # assign amplitude
            elif sb_1[b_1] == &apos;-&apos; : amp_1 = 0           # character for amp = 0                         
            elif sb_1[b_1] == &apos;&gt;&apos; : amp_1 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_1 = blueDuration + 1           # set notetime_1 &gt; blueduration
                scoreText_1 = &apos;&apos;                        # clear scoreText_1
            if notetime_1 &gt;= blueDuration : break       # break out of the loop
	    if amp_1 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_1 = durlist_1[c_1]			# get duration from durlist
		amp_1 = amp_1-62			# move amp value to correct dbfs range (max=1)
		note_1 = notelist_1[c_1]		# get note from notelist
	        sp_1 = splist_1[c_1]			# get subpatch from splist
		pana_1 = panalist_1[c_1]		# get pana from panalist
		panb_1 = panblist_1[c_1]		# get panb from panblist
		nvat_1 = nvatlist_1[c_1]		# get nvat from nvatlist
		nvac_1 = nvaclist_1[c_1]		# get nvac from nvatlist
		nvpa_1 = nvpalist_1[c_1]		# get nvpa from nvpalist
		nvta_1 = nvtalist_1[c_1]		# get nvta from nvtalist
		nvxa_1 = nvxalist_1[c_1]		# get nvxa from nvxalist
		nvpb_1 = nvpblist_1[c_1]		# get nvpb from nvpblist
		nvxb_1 = nvxblist_1[c_1]		# get nvxb from nvxblist
		nvpc_1 = nvpclist_1[c_1]		# get nvpc from nvpclist
		nvtc_1 = nvtclist_1[c_1]		# get nvtc from nvtclist
		nvxc_1 = nvxclist_1[c_1]		# get nvxc from nvxclist
		mat_1 = matlist_1[c_1]			# get mat from matlist
		mac_1 = maclist_1[c_1]			# get mac from maclist
		mpa_1 = mpalist_1[c_1]			# get mpa from mpalist
		mta_1 = mtalist_1[c_1]			# get mta from mtalist
		mxa_1 = mxalist_1[c_1]			# get mxa from mxalist
		mpb_1 = mpblist_1[c_1]			# get mpb from mpblist
		mxb_1 = mxblist_1[c_1]			# get mxb from mxblist
		mpc_1 = mpclist_1[c_1]			# get mpc from mpclist
		mtc_1 = mtclist_1[c_1]			# get mtc from mtclist
		mxc_1 = mxclist_1[c_1]			# get mxc from mxclist
		bnda_1 = bndalist_1[c_1]		# get bnda from bndalist
		bndb_1 = bndblist_1[c_1]		# get bndb from bndblist
		bndc_1 = bndclist_1[c_1]		# get bndc from bndclist
		bndt_1 = bndtlist_1[c_1]		# get bndt from bndtlist		
		bndu_1 = bndulist_1[c_1]		# get bndu from bndulist		
		bndv_1 = bndvlist_1[c_1]		# get bndv from bndvlist		
                c_1 = c_1 + 1
                scoreText_1 += &quot;i1 &quot;+str(notetime_1)+&quot; &quot;+str(dur_1)+&quot; &quot;+str(amp_1)+&quot; &quot;+str(note_1)+&quot; &quot;+str(sp_1)+&quot; &quot;+str(pana_1)+&quot; &quot;+str(panb_1)+&quot; &quot;+str(nvat_1)+&quot; &quot;+str(nvac_1)+&quot; &quot;+str(nvpa_1)+&quot; &quot;+str(nvta_1)+&quot; &quot;+str(nvxa_1)+&quot; &quot;+str(nvpb_1)+&quot; &quot;+str(nvxb_1)+&quot; &quot;+str(nvpc_1)+&quot; &quot;+str(nvtc_1)+&quot; &quot;+str(nvxc_1)+&quot; &quot;+str(mat_1)+&quot; &quot;+str(mac_1)+&quot; &quot;+str(mpa_1)+&quot; &quot;+str(mta_1)+&quot; &quot;+str(mxa_1)+&quot; &quot;+str(mpb_1)+&quot; &quot;+str(mxb_1)+&quot; &quot;+str(mpc_1)+&quot; &quot;+str(mtc_1)+&quot; &quot;+str(mxc_1)+&quot; &quot;+str(bnda_1)+&quot; &quot;+str(bndb_1)+&quot; &quot;+str(bndc_1)+&quot; &quot;+str(bndt_1)+&quot; &quot;+str(bndu_1)+&quot; &quot;+str(bndv_1)+&quot; \n&quot;
            notetime_1 = notetime_1 + subeat_1                      # increment notetime by subeat time value
    i_1 = i_1 + 1
    c_1 = 0
score = scoreText_1
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>30.0</startTime>
          <name>Ringer_1d</name>
          <backgroundColor>-341966</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_1 - 3h13TET
scoreText_1 = &quot;&quot;                              	# scoreText_1 is cleared
bart_1 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_1 = [&apos;b&apos;,&apos;a&apos;,&apos;c&apos;]			# rhythm
bpb_1 = len(rhythmr0_1)                         # beats per bar
beat_1 = bart_1/bpb_1                           # time of beat in seconds
notetime_1 = 0                                  # set intitial note start time
durlist_1 = [1.66,1.66,1.66]			# note duration list
notelist_1 = [70,69,67]				# note list
splist_1 = [1,1,1]				# subpatch list
panalist_1 = [.45,.55,.45]			# panb list
panblist_1 = [.5,.5,.5]				# pana list
nvatlist_1 = [.55,.55,.55]			# nvat list
nvaclist_1 = [0,0,0]				# nvac list
nvpalist_1 = [1,1,1]				# nvpa list
nvtalist_1 = [.55,.55,.55]			# nvta list
nvxalist_1 = [0,0,0]			# nvxa list
nvpblist_1 = [1,1,1]			# nvpb list
nvxblist_1 = [0,0,0]			# nvxb list
nvpclist_1 = [.7,.7,.7]			# nvpc list
nvtclist_1 = [.3,.3,.3]			# nvtc list
nvxclist_1 = [2,2,2]			# nvxc list
matlist_1 = [.55,.55,.55]		# mat list
maclist_1 = [0,0,0]			# mac list
mpalist_1 = [.3,.3,.3]			# mpa list
mtalist_1 = [.55,.55,.55]		# mta list
mxalist_1 = [0,0,0]			# mxa list
mpblist_1 = [.3,.3,.3]			# mpb list
mxblist_1 = [0,0,0]			# mxb list
mpclist_1 = [.1,.1,.1]		# mpc list
mtclist_1 = [.3,.3,.3]			# mtc list
mxclist_1 = [2,2,2]			# mxc list
bndalist_1 = [1,1,1]			# bnda list
bndblist_1 = [1,1,1]			# bndb list
bndclist_1 = [1,1,1]			# bndc list
bndtlist_1 = [.5,.5,.5]			# bndt list
bndulist_1 = [.5,.5,.5]			# bndu list
bndvlist_1 = [.5,.5,.5]			# bndv list
i_1 = 0						# loop iteration counter
c_1 = 0						# note iteration counter
while i_1 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_1 in range(bpb_1) :                           # loop through the items in the rhythm list
        sb_1 = rhythmr0_1[a_1]                          # sb is current item in the rhythm list
        subeat_1 = beat_1/len(sb_1)                     # subeat is the number of sub-beats in the beat
        for b_1 in range(len(sb_1)) :                   # loop through the items in the beat string
            if sb_1[b_1].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_1[b_1])                   # get ascii number of the character
                if sb_1[b_1].isdigit() :                # check if character is numeric
                    amp_1 = (asky-47)                   # assign amplitude
                elif sb_1[b_1].isupper() :              # check if character is uppercase
                    amp_1 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_1 = (asky-60)                   # assign amplitude
            elif sb_1[b_1] == &apos;-&apos; : amp_1 = 0           # character for amp = 0                         
            elif sb_1[b_1] == &apos;&gt;&apos; : amp_1 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_1 = blueDuration + 1           # set notetime_1 &gt; blueduration
                scoreText_1 = &apos;&apos;                        # clear scoreText_1
            if notetime_1 &gt;= blueDuration : break       # break out of the loop
	    if amp_1 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_1 = durlist_1[c_1]			# get duration from durlist
		amp_1 = amp_1-62			# move amp value to correct dbfs range (max=1)
		note_1 = notelist_1[c_1]		# get note from notelist
	        sp_1 = splist_1[c_1]			# get subpatch from splist
		pana_1 = panalist_1[c_1]		# get pana from panalist
		panb_1 = panblist_1[c_1]		# get panb from panblist
		nvat_1 = nvatlist_1[c_1]		# get nvat from nvatlist
		nvac_1 = nvaclist_1[c_1]		# get nvac from nvatlist
		nvpa_1 = nvpalist_1[c_1]		# get nvpa from nvpalist
		nvta_1 = nvtalist_1[c_1]		# get nvta from nvtalist
		nvxa_1 = nvxalist_1[c_1]		# get nvxa from nvxalist
		nvpb_1 = nvpblist_1[c_1]		# get nvpb from nvpblist
		nvxb_1 = nvxblist_1[c_1]		# get nvxb from nvxblist
		nvpc_1 = nvpclist_1[c_1]		# get nvpc from nvpclist
		nvtc_1 = nvtclist_1[c_1]		# get nvtc from nvtclist
		nvxc_1 = nvxclist_1[c_1]		# get nvxc from nvxclist
		mat_1 = matlist_1[c_1]			# get mat from matlist
		mac_1 = maclist_1[c_1]			# get mac from maclist
		mpa_1 = mpalist_1[c_1]			# get mpa from mpalist
		mta_1 = mtalist_1[c_1]			# get mta from mtalist
		mxa_1 = mxalist_1[c_1]			# get mxa from mxalist
		mpb_1 = mpblist_1[c_1]			# get mpb from mpblist
		mxb_1 = mxblist_1[c_1]			# get mxb from mxblist
		mpc_1 = mpclist_1[c_1]			# get mpc from mpclist
		mtc_1 = mtclist_1[c_1]			# get mtc from mtclist
		mxc_1 = mxclist_1[c_1]			# get mxc from mxclist
		bnda_1 = bndalist_1[c_1]		# get bnda from bndalist
		bndb_1 = bndblist_1[c_1]		# get bndb from bndblist
		bndc_1 = bndclist_1[c_1]		# get bndc from bndclist
		bndt_1 = bndtlist_1[c_1]		# get bndt from bndtlist		
		bndu_1 = bndulist_1[c_1]		# get bndu from bndulist		
		bndv_1 = bndvlist_1[c_1]		# get bndv from bndvlist		
                c_1 = c_1 + 1
                scoreText_1 += &quot;i1 &quot;+str(notetime_1)+&quot; &quot;+str(dur_1)+&quot; &quot;+str(amp_1)+&quot; &quot;+str(note_1)+&quot; &quot;+str(sp_1)+&quot; &quot;+str(pana_1)+&quot; &quot;+str(panb_1)+&quot; &quot;+str(nvat_1)+&quot; &quot;+str(nvac_1)+&quot; &quot;+str(nvpa_1)+&quot; &quot;+str(nvta_1)+&quot; &quot;+str(nvxa_1)+&quot; &quot;+str(nvpb_1)+&quot; &quot;+str(nvxb_1)+&quot; &quot;+str(nvpc_1)+&quot; &quot;+str(nvtc_1)+&quot; &quot;+str(nvxc_1)+&quot; &quot;+str(mat_1)+&quot; &quot;+str(mac_1)+&quot; &quot;+str(mpa_1)+&quot; &quot;+str(mta_1)+&quot; &quot;+str(mxa_1)+&quot; &quot;+str(mpb_1)+&quot; &quot;+str(mxb_1)+&quot; &quot;+str(mpc_1)+&quot; &quot;+str(mtc_1)+&quot; &quot;+str(mxc_1)+&quot; &quot;+str(bnda_1)+&quot; &quot;+str(bndb_1)+&quot; &quot;+str(bndc_1)+&quot; &quot;+str(bndt_1)+&quot; &quot;+str(bndu_1)+&quot; &quot;+str(bndv_1)+&quot; \n&quot;
            notetime_1 = notetime_1 + subeat_1                      # increment notetime by subeat time value
    i_1 = i_1 + 1
    c_1 = 0
score = scoreText_1
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>35.0</startTime>
          <name>Ringer_1e</name>
          <backgroundColor>-341966</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_1 - 3h13TET
scoreText_1 = &quot;&quot;                              	# scoreText_1 is cleared
bart_1 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_1 = [&apos;c&apos;,&apos;b&apos;,&apos;d&apos;]			# rhythm
bpb_1 = len(rhythmr0_1)                         # beats per bar
beat_1 = bart_1/bpb_1                           # time of beat in seconds
notetime_1 = 0                                  # set intitial note start time
durlist_1 = [1.66,1.66,1.66]			# note duration list
notelist_1 = [66,67,69]				# note list
splist_1 = [1,1,1]				# subpatch list
panalist_1 = [.45,.55,.45]			# panb list
panblist_1 = [.5,.5,.5]				# pana list
nvatlist_1 = [.55,.55,.55]			# nvat list
nvaclist_1 = [0,0,0]				# nvac list
nvpalist_1 = [1,1,1]				# nvpa list
nvtalist_1 = [.55,.55,.55]			# nvta list
nvxalist_1 = [0,0,0]			# nvxa list
nvpblist_1 = [1,1,1]			# nvpb list
nvxblist_1 = [0,0,0]			# nvxb list
nvpclist_1 = [.7,.7,.7]			# nvpc list
nvtclist_1 = [.3,.3,.3]			# nvtc list
nvxclist_1 = [2,2,2]			# nvxc list
matlist_1 = [.55,.55,.55]		# mat list
maclist_1 = [0,0,0]			# mac list
mpalist_1 = [.3,.3,.3]			# mpa list
mtalist_1 = [.55,.55,.55]		# mta list
mxalist_1 = [0,0,0]			# mxa list
mpblist_1 = [.3,.3,.3]			# mpb list
mxblist_1 = [0,0,0]			# mxb list
mpclist_1 = [.1,.1,.1]		# mpc list
mtclist_1 = [.3,.3,.3]			# mtc list
mxclist_1 = [2,2,2]			# mxc list
bndalist_1 = [1,1,1]			# bnda list
bndblist_1 = [1,1,1]			# bndb list
bndclist_1 = [1,1,1]			# bndc list
bndtlist_1 = [.5,.5,.5]			# bndt list
bndulist_1 = [.5,.5,.5]			# bndu list
bndvlist_1 = [.5,.5,.5]			# bndv list
i_1 = 0						# loop iteration counter
c_1 = 0						# note iteration counter
while i_1 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_1 in range(bpb_1) :                           # loop through the items in the rhythm list
        sb_1 = rhythmr0_1[a_1]                          # sb is current item in the rhythm list
        subeat_1 = beat_1/len(sb_1)                     # subeat is the number of sub-beats in the beat
        for b_1 in range(len(sb_1)) :                   # loop through the items in the beat string
            if sb_1[b_1].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_1[b_1])                   # get ascii number of the character
                if sb_1[b_1].isdigit() :                # check if character is numeric
                    amp_1 = (asky-47)                   # assign amplitude
                elif sb_1[b_1].isupper() :              # check if character is uppercase
                    amp_1 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_1 = (asky-60)                   # assign amplitude
            elif sb_1[b_1] == &apos;-&apos; : amp_1 = 0           # character for amp = 0                         
            elif sb_1[b_1] == &apos;&gt;&apos; : amp_1 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_1 = blueDuration + 1           # set notetime_1 &gt; blueduration
                scoreText_1 = &apos;&apos;                        # clear scoreText_1
            if notetime_1 &gt;= blueDuration : break       # break out of the loop
	    if amp_1 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_1 = durlist_1[c_1]			# get duration from durlist
		amp_1 = amp_1-62			# move amp value to correct dbfs range (max=1)
		note_1 = notelist_1[c_1]		# get note from notelist
	        sp_1 = splist_1[c_1]			# get subpatch from splist
		pana_1 = panalist_1[c_1]		# get pana from panalist
		panb_1 = panblist_1[c_1]		# get panb from panblist
		nvat_1 = nvatlist_1[c_1]		# get nvat from nvatlist
		nvac_1 = nvaclist_1[c_1]		# get nvac from nvatlist
		nvpa_1 = nvpalist_1[c_1]		# get nvpa from nvpalist
		nvta_1 = nvtalist_1[c_1]		# get nvta from nvtalist
		nvxa_1 = nvxalist_1[c_1]		# get nvxa from nvxalist
		nvpb_1 = nvpblist_1[c_1]		# get nvpb from nvpblist
		nvxb_1 = nvxblist_1[c_1]		# get nvxb from nvxblist
		nvpc_1 = nvpclist_1[c_1]		# get nvpc from nvpclist
		nvtc_1 = nvtclist_1[c_1]		# get nvtc from nvtclist
		nvxc_1 = nvxclist_1[c_1]		# get nvxc from nvxclist
		mat_1 = matlist_1[c_1]			# get mat from matlist
		mac_1 = maclist_1[c_1]			# get mac from maclist
		mpa_1 = mpalist_1[c_1]			# get mpa from mpalist
		mta_1 = mtalist_1[c_1]			# get mta from mtalist
		mxa_1 = mxalist_1[c_1]			# get mxa from mxalist
		mpb_1 = mpblist_1[c_1]			# get mpb from mpblist
		mxb_1 = mxblist_1[c_1]			# get mxb from mxblist
		mpc_1 = mpclist_1[c_1]			# get mpc from mpclist
		mtc_1 = mtclist_1[c_1]			# get mtc from mtclist
		mxc_1 = mxclist_1[c_1]			# get mxc from mxclist
		bnda_1 = bndalist_1[c_1]		# get bnda from bndalist
		bndb_1 = bndblist_1[c_1]		# get bndb from bndblist
		bndc_1 = bndclist_1[c_1]		# get bndc from bndclist
		bndt_1 = bndtlist_1[c_1]		# get bndt from bndtlist		
		bndu_1 = bndulist_1[c_1]		# get bndu from bndulist		
		bndv_1 = bndvlist_1[c_1]		# get bndv from bndvlist		
                c_1 = c_1 + 1
                scoreText_1 += &quot;i1 &quot;+str(notetime_1)+&quot; &quot;+str(dur_1)+&quot; &quot;+str(amp_1)+&quot; &quot;+str(note_1)+&quot; &quot;+str(sp_1)+&quot; &quot;+str(pana_1)+&quot; &quot;+str(panb_1)+&quot; &quot;+str(nvat_1)+&quot; &quot;+str(nvac_1)+&quot; &quot;+str(nvpa_1)+&quot; &quot;+str(nvta_1)+&quot; &quot;+str(nvxa_1)+&quot; &quot;+str(nvpb_1)+&quot; &quot;+str(nvxb_1)+&quot; &quot;+str(nvpc_1)+&quot; &quot;+str(nvtc_1)+&quot; &quot;+str(nvxc_1)+&quot; &quot;+str(mat_1)+&quot; &quot;+str(mac_1)+&quot; &quot;+str(mpa_1)+&quot; &quot;+str(mta_1)+&quot; &quot;+str(mxa_1)+&quot; &quot;+str(mpb_1)+&quot; &quot;+str(mxb_1)+&quot; &quot;+str(mpc_1)+&quot; &quot;+str(mtc_1)+&quot; &quot;+str(mxc_1)+&quot; &quot;+str(bnda_1)+&quot; &quot;+str(bndb_1)+&quot; &quot;+str(bndc_1)+&quot; &quot;+str(bndt_1)+&quot; &quot;+str(bndu_1)+&quot; &quot;+str(bndv_1)+&quot; \n&quot;
            notetime_1 = notetime_1 + subeat_1                      # increment notetime by subeat time value
    i_1 = i_1 + 1
    c_1 = 0
score = scoreText_1
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>40.0</startTime>
          <name>Ringer_1a</name>
          <backgroundColor>-14286</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_1 - 3h13TET
scoreText_1 = &quot;&quot;                              	# scoreText_1 is cleared
bart_1 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_1 = [&apos;b&apos;,&apos;a&apos;,&apos;c&apos;]			# rhythm
bpb_1 = len(rhythmr0_1)                         # beats per bar
beat_1 = bart_1/bpb_1                           # time of beat in seconds
notetime_1 = 0                                  # set intitial note start time
durlist_1 = [1.66,1.66,1.66]			# note duration list
notelist_1 = [69,70,73]				# note list
splist_1 = [1,1,1]				# subpatch list
panalist_1 = [.45,.55,.45]			# panb list
panblist_1 = [.5,.5,.5]				# pana list
nvatlist_1 = [.55,.55,.55]			# nvat list
nvaclist_1 = [0,0,0]				# nvac list
nvpalist_1 = [1,1,1]				# nvpa list
nvtalist_1 = [.55,.55,.55]			# nvta list
nvxalist_1 = [0,0,0]			# nvxa list
nvpblist_1 = [1,1,1]			# nvpb list
nvxblist_1 = [0,0,0]			# nvxb list
nvpclist_1 = [.7,.7,.7]			# nvpc list
nvtclist_1 = [.3,.3,.3]			# nvtc list
nvxclist_1 = [2,2,2]			# nvxc list
matlist_1 = [.55,.55,.55]		# mat list
maclist_1 = [0,0,0]			# mac list
mpalist_1 = [.3,.3,.3]			# mpa list
mtalist_1 = [.55,.55,.55]		# mta list
mxalist_1 = [0,0,0]			# mxa list
mpblist_1 = [.3,.3,.3]			# mpb list
mxblist_1 = [0,0,0]			# mxb list
mpclist_1 = [.15,.15,.15]		# mpc list
mtclist_1 = [.1,.1,.1]			# mtc list
mxclist_1 = [2,2,2]			# mxc list
bndalist_1 = [1,1,1]			# bnda list
bndblist_1 = [1,1,1]			# bndb list
bndclist_1 = [1,1,1]			# bndc list
bndtlist_1 = [.5,.5,.5]			# bndt list
bndulist_1 = [.5,.5,.5]			# bndu list
bndvlist_1 = [.5,.5,.5]			# bndv list
i_1 = 0						# loop iteration counter
c_1 = 0						# note iteration counter
while i_1 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_1 in range(bpb_1) :                           # loop through the items in the rhythm list
        sb_1 = rhythmr0_1[a_1]                          # sb is current item in the rhythm list
        subeat_1 = beat_1/len(sb_1)                     # subeat is the number of sub-beats in the beat
        for b_1 in range(len(sb_1)) :                   # loop through the items in the beat string
            if sb_1[b_1].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_1[b_1])                   # get ascii number of the character
                if sb_1[b_1].isdigit() :                # check if character is numeric
                    amp_1 = (asky-47)                   # assign amplitude
                elif sb_1[b_1].isupper() :              # check if character is uppercase
                    amp_1 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_1 = (asky-60)                   # assign amplitude
            elif sb_1[b_1] == &apos;-&apos; : amp_1 = 0           # character for amp = 0                         
            elif sb_1[b_1] == &apos;&gt;&apos; : amp_1 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_1 = blueDuration + 1           # set notetime_1 &gt; blueduration
                scoreText_1 = &apos;&apos;                        # clear scoreText_1
            if notetime_1 &gt;= blueDuration : break       # break out of the loop
	    if amp_1 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_1 = durlist_1[c_1]			# get duration from durlist
		amp_1 = amp_1-62			# move amp value to correct dbfs range (max=1)
		note_1 = notelist_1[c_1]		# get note from notelist
	        sp_1 = splist_1[c_1]			# get subpatch from splist
		pana_1 = panalist_1[c_1]		# get pana from panalist
		panb_1 = panblist_1[c_1]		# get panb from panblist
		nvat_1 = nvatlist_1[c_1]		# get nvat from nvatlist
		nvac_1 = nvaclist_1[c_1]		# get nvac from nvatlist
		nvpa_1 = nvpalist_1[c_1]		# get nvpa from nvpalist
		nvta_1 = nvtalist_1[c_1]		# get nvta from nvtalist
		nvxa_1 = nvxalist_1[c_1]		# get nvxa from nvxalist
		nvpb_1 = nvpblist_1[c_1]		# get nvpb from nvpblist
		nvxb_1 = nvxblist_1[c_1]		# get nvxb from nvxblist
		nvpc_1 = nvpclist_1[c_1]		# get nvpc from nvpclist
		nvtc_1 = nvtclist_1[c_1]		# get nvtc from nvtclist
		nvxc_1 = nvxclist_1[c_1]		# get nvxc from nvxclist
		mat_1 = matlist_1[c_1]			# get mat from matlist
		mac_1 = maclist_1[c_1]			# get mac from maclist
		mpa_1 = mpalist_1[c_1]			# get mpa from mpalist
		mta_1 = mtalist_1[c_1]			# get mta from mtalist
		mxa_1 = mxalist_1[c_1]			# get mxa from mxalist
		mpb_1 = mpblist_1[c_1]			# get mpb from mpblist
		mxb_1 = mxblist_1[c_1]			# get mxb from mxblist
		mpc_1 = mpclist_1[c_1]			# get mpc from mpclist
		mtc_1 = mtclist_1[c_1]			# get mtc from mtclist
		mxc_1 = mxclist_1[c_1]			# get mxc from mxclist
		bnda_1 = bndalist_1[c_1]		# get bnda from bndalist
		bndb_1 = bndblist_1[c_1]		# get bndb from bndblist
		bndc_1 = bndclist_1[c_1]		# get bndc from bndclist
		bndt_1 = bndtlist_1[c_1]		# get bndt from bndtlist		
		bndu_1 = bndulist_1[c_1]		# get bndu from bndulist		
		bndv_1 = bndvlist_1[c_1]		# get bndv from bndvlist		
                c_1 = c_1 + 1
                scoreText_1 += &quot;i1 &quot;+str(notetime_1)+&quot; &quot;+str(dur_1)+&quot; &quot;+str(amp_1)+&quot; &quot;+str(note_1)+&quot; &quot;+str(sp_1)+&quot; &quot;+str(pana_1)+&quot; &quot;+str(panb_1)+&quot; &quot;+str(nvat_1)+&quot; &quot;+str(nvac_1)+&quot; &quot;+str(nvpa_1)+&quot; &quot;+str(nvta_1)+&quot; &quot;+str(nvxa_1)+&quot; &quot;+str(nvpb_1)+&quot; &quot;+str(nvxb_1)+&quot; &quot;+str(nvpc_1)+&quot; &quot;+str(nvtc_1)+&quot; &quot;+str(nvxc_1)+&quot; &quot;+str(mat_1)+&quot; &quot;+str(mac_1)+&quot; &quot;+str(mpa_1)+&quot; &quot;+str(mta_1)+&quot; &quot;+str(mxa_1)+&quot; &quot;+str(mpb_1)+&quot; &quot;+str(mxb_1)+&quot; &quot;+str(mpc_1)+&quot; &quot;+str(mtc_1)+&quot; &quot;+str(mxc_1)+&quot; &quot;+str(bnda_1)+&quot; &quot;+str(bndb_1)+&quot; &quot;+str(bndc_1)+&quot; &quot;+str(bndt_1)+&quot; &quot;+str(bndu_1)+&quot; &quot;+str(bndv_1)+&quot; \n&quot;
            notetime_1 = notetime_1 + subeat_1                      # increment notetime by subeat time value
    i_1 = i_1 + 1
    c_1 = 0
score = scoreText_1
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>45.0</startTime>
          <name>Ringer_1b</name>
          <backgroundColor>-341966</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_1 - 3h13TET
scoreText_1 = &quot;&quot;                              	# scoreText_1 is cleared
bart_1 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_1 = [&apos;b&apos;,&apos;a&apos;,&apos;c&apos;]			# rhythm
bpb_1 = len(rhythmr0_1)                         # beats per bar
beat_1 = bart_1/bpb_1                           # time of beat in seconds
notetime_1 = 0                                  # set intitial note start time
durlist_1 = [1.66,1.66,1.66]			# note duration list
notelist_1 = [67,69,70]				# note list
splist_1 = [1,1,1]				# subpatch list
panalist_1 = [.45,.55,.45]			# panb list
panblist_1 = [.5,.5,.5]				# pana list
nvatlist_1 = [.55,.55,.55]			# nvat list
nvaclist_1 = [0,0,0]				# nvac list
nvpalist_1 = [1,1,1]				# nvpa list
nvtalist_1 = [.55,.55,.55]			# nvta list
nvxalist_1 = [0,0,0]			# nvxa list
nvpblist_1 = [1,1,1]			# nvpb list
nvxblist_1 = [0,0,0]			# nvxb list
nvpclist_1 = [.7,.7,.7]			# nvpc list
nvtclist_1 = [.3,.3,.3]			# nvtc list
nvxclist_1 = [2,2,2]			# nvxc list
matlist_1 = [.55,.55,.55]		# mat list
maclist_1 = [0,0,0]			# mac list
mpalist_1 = [.3,.3,.3]			# mpa list
mtalist_1 = [.55,.55,.55]		# mta list
mxalist_1 = [0,0,0]			# mxa list
mpblist_1 = [.3,.3,.3]			# mpb list
mxblist_1 = [0,0,0]			# mxb list
mpclist_1 = [.1,.1,.1]		# mpc list
mtclist_1 = [.3,.3,.3]			# mtc list
mxclist_1 = [2,2,2]			# mxc list
bndalist_1 = [1,1,1]			# bnda list
bndblist_1 = [1,1,1]			# bndb list
bndclist_1 = [1,1,1]			# bndc list
bndtlist_1 = [.5,.5,.5]			# bndt list
bndulist_1 = [.5,.5,.5]			# bndu list
bndvlist_1 = [.5,.5,.5]			# bndv list
i_1 = 0						# loop iteration counter
c_1 = 0						# note iteration counter
while i_1 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_1 in range(bpb_1) :                           # loop through the items in the rhythm list
        sb_1 = rhythmr0_1[a_1]                          # sb is current item in the rhythm list
        subeat_1 = beat_1/len(sb_1)                     # subeat is the number of sub-beats in the beat
        for b_1 in range(len(sb_1)) :                   # loop through the items in the beat string
            if sb_1[b_1].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_1[b_1])                   # get ascii number of the character
                if sb_1[b_1].isdigit() :                # check if character is numeric
                    amp_1 = (asky-47)                   # assign amplitude
                elif sb_1[b_1].isupper() :              # check if character is uppercase
                    amp_1 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_1 = (asky-60)                   # assign amplitude
            elif sb_1[b_1] == &apos;-&apos; : amp_1 = 0           # character for amp = 0                         
            elif sb_1[b_1] == &apos;&gt;&apos; : amp_1 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_1 = blueDuration + 1           # set notetime_1 &gt; blueduration
                scoreText_1 = &apos;&apos;                        # clear scoreText_1
            if notetime_1 &gt;= blueDuration : break       # break out of the loop
	    if amp_1 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_1 = durlist_1[c_1]			# get duration from durlist
		amp_1 = amp_1-62			# move amp value to correct dbfs range (max=1)
		note_1 = notelist_1[c_1]		# get note from notelist
	        sp_1 = splist_1[c_1]			# get subpatch from splist
		pana_1 = panalist_1[c_1]		# get pana from panalist
		panb_1 = panblist_1[c_1]		# get panb from panblist
		nvat_1 = nvatlist_1[c_1]		# get nvat from nvatlist
		nvac_1 = nvaclist_1[c_1]		# get nvac from nvatlist
		nvpa_1 = nvpalist_1[c_1]		# get nvpa from nvpalist
		nvta_1 = nvtalist_1[c_1]		# get nvta from nvtalist
		nvxa_1 = nvxalist_1[c_1]		# get nvxa from nvxalist
		nvpb_1 = nvpblist_1[c_1]		# get nvpb from nvpblist
		nvxb_1 = nvxblist_1[c_1]		# get nvxb from nvxblist
		nvpc_1 = nvpclist_1[c_1]		# get nvpc from nvpclist
		nvtc_1 = nvtclist_1[c_1]		# get nvtc from nvtclist
		nvxc_1 = nvxclist_1[c_1]		# get nvxc from nvxclist
		mat_1 = matlist_1[c_1]			# get mat from matlist
		mac_1 = maclist_1[c_1]			# get mac from maclist
		mpa_1 = mpalist_1[c_1]			# get mpa from mpalist
		mta_1 = mtalist_1[c_1]			# get mta from mtalist
		mxa_1 = mxalist_1[c_1]			# get mxa from mxalist
		mpb_1 = mpblist_1[c_1]			# get mpb from mpblist
		mxb_1 = mxblist_1[c_1]			# get mxb from mxblist
		mpc_1 = mpclist_1[c_1]			# get mpc from mpclist
		mtc_1 = mtclist_1[c_1]			# get mtc from mtclist
		mxc_1 = mxclist_1[c_1]			# get mxc from mxclist
		bnda_1 = bndalist_1[c_1]		# get bnda from bndalist
		bndb_1 = bndblist_1[c_1]		# get bndb from bndblist
		bndc_1 = bndclist_1[c_1]		# get bndc from bndclist
		bndt_1 = bndtlist_1[c_1]		# get bndt from bndtlist		
		bndu_1 = bndulist_1[c_1]		# get bndu from bndulist		
		bndv_1 = bndvlist_1[c_1]		# get bndv from bndvlist		
                c_1 = c_1 + 1
                scoreText_1 += &quot;i1 &quot;+str(notetime_1)+&quot; &quot;+str(dur_1)+&quot; &quot;+str(amp_1)+&quot; &quot;+str(note_1)+&quot; &quot;+str(sp_1)+&quot; &quot;+str(pana_1)+&quot; &quot;+str(panb_1)+&quot; &quot;+str(nvat_1)+&quot; &quot;+str(nvac_1)+&quot; &quot;+str(nvpa_1)+&quot; &quot;+str(nvta_1)+&quot; &quot;+str(nvxa_1)+&quot; &quot;+str(nvpb_1)+&quot; &quot;+str(nvxb_1)+&quot; &quot;+str(nvpc_1)+&quot; &quot;+str(nvtc_1)+&quot; &quot;+str(nvxc_1)+&quot; &quot;+str(mat_1)+&quot; &quot;+str(mac_1)+&quot; &quot;+str(mpa_1)+&quot; &quot;+str(mta_1)+&quot; &quot;+str(mxa_1)+&quot; &quot;+str(mpb_1)+&quot; &quot;+str(mxb_1)+&quot; &quot;+str(mpc_1)+&quot; &quot;+str(mtc_1)+&quot; &quot;+str(mxc_1)+&quot; &quot;+str(bnda_1)+&quot; &quot;+str(bndb_1)+&quot; &quot;+str(bndc_1)+&quot; &quot;+str(bndt_1)+&quot; &quot;+str(bndu_1)+&quot; &quot;+str(bndv_1)+&quot; \n&quot;
            notetime_1 = notetime_1 + subeat_1                      # increment notetime by subeat time value
    i_1 = i_1 + 1
    c_1 = 0
score = scoreText_1
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>50.0</startTime>
          <name>Ringer_1c</name>
          <backgroundColor>-341966</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_1 - 3h13TET
scoreText_1 = &quot;&quot;                              	# scoreText_1 is cleared
bart_1 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_1 = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]			# rhythm
bpb_1 = len(rhythmr0_1)                         # beats per bar
beat_1 = bart_1/bpb_1                           # time of beat in seconds
notetime_1 = 0                                  # set intitial note start time
durlist_1 = [1.66,1.66,1.66]			# note duration list
notelist_1 = [75,70,69]				# note list
splist_1 = [1,1,1]				# subpatch list
panalist_1 = [.45,.55,.45]			# panb list
panblist_1 = [.5,.5,.5]				# pana list
nvatlist_1 = [.55,.55,.55]			# nvat list
nvaclist_1 = [0,0,0]				# nvac list
nvpalist_1 = [1,1,1]				# nvpa list
nvtalist_1 = [.55,.55,.55]			# nvta list
nvxalist_1 = [0,0,0]			# nvxa list
nvpblist_1 = [1,1,1]			# nvpb list
nvxblist_1 = [0,0,0]			# nvxb list
nvpclist_1 = [.7,.7,.7]			# nvpc list
nvtclist_1 = [.3,.3,.3]			# nvtc list
nvxclist_1 = [2,2,2]			# nvxc list
matlist_1 = [.55,.55,.55]		# mat list
maclist_1 = [0,0,0]			# mac list
mpalist_1 = [.3,.3,.3]			# mpa list
mtalist_1 = [.55,.55,.55]		# mta list
mxalist_1 = [0,0,0]			# mxa list
mpblist_1 = [.3,.3,.3]			# mpb list
mxblist_1 = [0,0,0]			# mxb list
mpclist_1 = [.1,.1,.1]		# mpc list
mtclist_1 = [.3,.3,.3]			# mtc list
mxclist_1 = [2,2,2]			# mxc list
bndalist_1 = [1,1,1]			# bnda list
bndblist_1 = [1,1,1]			# bndb list
bndclist_1 = [1,1,1]			# bndc list
bndtlist_1 = [.5,.5,.5]			# bndt list
bndulist_1 = [.5,.5,.5]			# bndu list
bndvlist_1 = [.5,.5,.5]			# bndv list
i_1 = 0						# loop iteration counter
c_1 = 0						# note iteration counter
while i_1 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_1 in range(bpb_1) :                           # loop through the items in the rhythm list
        sb_1 = rhythmr0_1[a_1]                          # sb is current item in the rhythm list
        subeat_1 = beat_1/len(sb_1)                     # subeat is the number of sub-beats in the beat
        for b_1 in range(len(sb_1)) :                   # loop through the items in the beat string
            if sb_1[b_1].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_1[b_1])                   # get ascii number of the character
                if sb_1[b_1].isdigit() :                # check if character is numeric
                    amp_1 = (asky-47)                   # assign amplitude
                elif sb_1[b_1].isupper() :              # check if character is uppercase
                    amp_1 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_1 = (asky-60)                   # assign amplitude
            elif sb_1[b_1] == &apos;-&apos; : amp_1 = 0           # character for amp = 0                         
            elif sb_1[b_1] == &apos;&gt;&apos; : amp_1 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_1 = blueDuration + 1           # set notetime_1 &gt; blueduration
                scoreText_1 = &apos;&apos;                        # clear scoreText_1
            if notetime_1 &gt;= blueDuration : break       # break out of the loop
	    if amp_1 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_1 = durlist_1[c_1]			# get duration from durlist
		amp_1 = amp_1-62			# move amp value to correct dbfs range (max=1)
		note_1 = notelist_1[c_1]		# get note from notelist
	        sp_1 = splist_1[c_1]			# get subpatch from splist
		pana_1 = panalist_1[c_1]		# get pana from panalist
		panb_1 = panblist_1[c_1]		# get panb from panblist
		nvat_1 = nvatlist_1[c_1]		# get nvat from nvatlist
		nvac_1 = nvaclist_1[c_1]		# get nvac from nvatlist
		nvpa_1 = nvpalist_1[c_1]		# get nvpa from nvpalist
		nvta_1 = nvtalist_1[c_1]		# get nvta from nvtalist
		nvxa_1 = nvxalist_1[c_1]		# get nvxa from nvxalist
		nvpb_1 = nvpblist_1[c_1]		# get nvpb from nvpblist
		nvxb_1 = nvxblist_1[c_1]		# get nvxb from nvxblist
		nvpc_1 = nvpclist_1[c_1]		# get nvpc from nvpclist
		nvtc_1 = nvtclist_1[c_1]		# get nvtc from nvtclist
		nvxc_1 = nvxclist_1[c_1]		# get nvxc from nvxclist
		mat_1 = matlist_1[c_1]			# get mat from matlist
		mac_1 = maclist_1[c_1]			# get mac from maclist
		mpa_1 = mpalist_1[c_1]			# get mpa from mpalist
		mta_1 = mtalist_1[c_1]			# get mta from mtalist
		mxa_1 = mxalist_1[c_1]			# get mxa from mxalist
		mpb_1 = mpblist_1[c_1]			# get mpb from mpblist
		mxb_1 = mxblist_1[c_1]			# get mxb from mxblist
		mpc_1 = mpclist_1[c_1]			# get mpc from mpclist
		mtc_1 = mtclist_1[c_1]			# get mtc from mtclist
		mxc_1 = mxclist_1[c_1]			# get mxc from mxclist
		bnda_1 = bndalist_1[c_1]		# get bnda from bndalist
		bndb_1 = bndblist_1[c_1]		# get bndb from bndblist
		bndc_1 = bndclist_1[c_1]		# get bndc from bndclist
		bndt_1 = bndtlist_1[c_1]		# get bndt from bndtlist		
		bndu_1 = bndulist_1[c_1]		# get bndu from bndulist		
		bndv_1 = bndvlist_1[c_1]		# get bndv from bndvlist		
                c_1 = c_1 + 1
                scoreText_1 += &quot;i1 &quot;+str(notetime_1)+&quot; &quot;+str(dur_1)+&quot; &quot;+str(amp_1)+&quot; &quot;+str(note_1)+&quot; &quot;+str(sp_1)+&quot; &quot;+str(pana_1)+&quot; &quot;+str(panb_1)+&quot; &quot;+str(nvat_1)+&quot; &quot;+str(nvac_1)+&quot; &quot;+str(nvpa_1)+&quot; &quot;+str(nvta_1)+&quot; &quot;+str(nvxa_1)+&quot; &quot;+str(nvpb_1)+&quot; &quot;+str(nvxb_1)+&quot; &quot;+str(nvpc_1)+&quot; &quot;+str(nvtc_1)+&quot; &quot;+str(nvxc_1)+&quot; &quot;+str(mat_1)+&quot; &quot;+str(mac_1)+&quot; &quot;+str(mpa_1)+&quot; &quot;+str(mta_1)+&quot; &quot;+str(mxa_1)+&quot; &quot;+str(mpb_1)+&quot; &quot;+str(mxb_1)+&quot; &quot;+str(mpc_1)+&quot; &quot;+str(mtc_1)+&quot; &quot;+str(mxc_1)+&quot; &quot;+str(bnda_1)+&quot; &quot;+str(bndb_1)+&quot; &quot;+str(bndc_1)+&quot; &quot;+str(bndt_1)+&quot; &quot;+str(bndu_1)+&quot; &quot;+str(bndv_1)+&quot; \n&quot;
            notetime_1 = notetime_1 + subeat_1                      # increment notetime by subeat time value
    i_1 = i_1 + 1
    c_1 = 0
score = scoreText_1
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>55.0</startTime>
          <name>Ringer_1d</name>
          <backgroundColor>-341966</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_1 - 3h13TET
scoreText_1 = &quot;&quot;                              	# scoreText_1 is cleared
bart_1 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_1 = [&apos;b&apos;,&apos;a&apos;,&apos;c&apos;]			# rhythm
bpb_1 = len(rhythmr0_1)                         # beats per bar
beat_1 = bart_1/bpb_1                           # time of beat in seconds
notetime_1 = 0                                  # set intitial note start time
durlist_1 = [1.66,1.66,1.66]			# note duration list
notelist_1 = [70,69,67]				# note list
splist_1 = [1,1,1]				# subpatch list
panalist_1 = [.45,.55,.45]			# panb list
panblist_1 = [.5,.5,.5]				# pana list
nvatlist_1 = [.55,.55,.55]			# nvat list
nvaclist_1 = [0,0,0]				# nvac list
nvpalist_1 = [1,1,1]				# nvpa list
nvtalist_1 = [.55,.55,.55]			# nvta list
nvxalist_1 = [0,0,0]			# nvxa list
nvpblist_1 = [1,1,1]			# nvpb list
nvxblist_1 = [0,0,0]			# nvxb list
nvpclist_1 = [.7,.7,.7]			# nvpc list
nvtclist_1 = [.3,.3,.3]			# nvtc list
nvxclist_1 = [2,2,2]			# nvxc list
matlist_1 = [.55,.55,.55]		# mat list
maclist_1 = [0,0,0]			# mac list
mpalist_1 = [.3,.3,.3]			# mpa list
mtalist_1 = [.55,.55,.55]		# mta list
mxalist_1 = [0,0,0]			# mxa list
mpblist_1 = [.3,.3,.3]			# mpb list
mxblist_1 = [0,0,0]			# mxb list
mpclist_1 = [.1,.1,.1]		# mpc list
mtclist_1 = [.3,.3,.3]			# mtc list
mxclist_1 = [2,2,2]			# mxc list
bndalist_1 = [1,1,1]			# bnda list
bndblist_1 = [1,1,1]			# bndb list
bndclist_1 = [1,1,1]			# bndc list
bndtlist_1 = [.5,.5,.5]			# bndt list
bndulist_1 = [.5,.5,.5]			# bndu list
bndvlist_1 = [.5,.5,.5]			# bndv list
i_1 = 0						# loop iteration counter
c_1 = 0						# note iteration counter
while i_1 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_1 in range(bpb_1) :                           # loop through the items in the rhythm list
        sb_1 = rhythmr0_1[a_1]                          # sb is current item in the rhythm list
        subeat_1 = beat_1/len(sb_1)                     # subeat is the number of sub-beats in the beat
        for b_1 in range(len(sb_1)) :                   # loop through the items in the beat string
            if sb_1[b_1].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_1[b_1])                   # get ascii number of the character
                if sb_1[b_1].isdigit() :                # check if character is numeric
                    amp_1 = (asky-47)                   # assign amplitude
                elif sb_1[b_1].isupper() :              # check if character is uppercase
                    amp_1 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_1 = (asky-60)                   # assign amplitude
            elif sb_1[b_1] == &apos;-&apos; : amp_1 = 0           # character for amp = 0                         
            elif sb_1[b_1] == &apos;&gt;&apos; : amp_1 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_1 = blueDuration + 1           # set notetime_1 &gt; blueduration
                scoreText_1 = &apos;&apos;                        # clear scoreText_1
            if notetime_1 &gt;= blueDuration : break       # break out of the loop
	    if amp_1 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_1 = durlist_1[c_1]			# get duration from durlist
		amp_1 = amp_1-62			# move amp value to correct dbfs range (max=1)
		note_1 = notelist_1[c_1]		# get note from notelist
	        sp_1 = splist_1[c_1]			# get subpatch from splist
		pana_1 = panalist_1[c_1]		# get pana from panalist
		panb_1 = panblist_1[c_1]		# get panb from panblist
		nvat_1 = nvatlist_1[c_1]		# get nvat from nvatlist
		nvac_1 = nvaclist_1[c_1]		# get nvac from nvatlist
		nvpa_1 = nvpalist_1[c_1]		# get nvpa from nvpalist
		nvta_1 = nvtalist_1[c_1]		# get nvta from nvtalist
		nvxa_1 = nvxalist_1[c_1]		# get nvxa from nvxalist
		nvpb_1 = nvpblist_1[c_1]		# get nvpb from nvpblist
		nvxb_1 = nvxblist_1[c_1]		# get nvxb from nvxblist
		nvpc_1 = nvpclist_1[c_1]		# get nvpc from nvpclist
		nvtc_1 = nvtclist_1[c_1]		# get nvtc from nvtclist
		nvxc_1 = nvxclist_1[c_1]		# get nvxc from nvxclist
		mat_1 = matlist_1[c_1]			# get mat from matlist
		mac_1 = maclist_1[c_1]			# get mac from maclist
		mpa_1 = mpalist_1[c_1]			# get mpa from mpalist
		mta_1 = mtalist_1[c_1]			# get mta from mtalist
		mxa_1 = mxalist_1[c_1]			# get mxa from mxalist
		mpb_1 = mpblist_1[c_1]			# get mpb from mpblist
		mxb_1 = mxblist_1[c_1]			# get mxb from mxblist
		mpc_1 = mpclist_1[c_1]			# get mpc from mpclist
		mtc_1 = mtclist_1[c_1]			# get mtc from mtclist
		mxc_1 = mxclist_1[c_1]			# get mxc from mxclist
		bnda_1 = bndalist_1[c_1]		# get bnda from bndalist
		bndb_1 = bndblist_1[c_1]		# get bndb from bndblist
		bndc_1 = bndclist_1[c_1]		# get bndc from bndclist
		bndt_1 = bndtlist_1[c_1]		# get bndt from bndtlist		
		bndu_1 = bndulist_1[c_1]		# get bndu from bndulist		
		bndv_1 = bndvlist_1[c_1]		# get bndv from bndvlist		
                c_1 = c_1 + 1
                scoreText_1 += &quot;i1 &quot;+str(notetime_1)+&quot; &quot;+str(dur_1)+&quot; &quot;+str(amp_1)+&quot; &quot;+str(note_1)+&quot; &quot;+str(sp_1)+&quot; &quot;+str(pana_1)+&quot; &quot;+str(panb_1)+&quot; &quot;+str(nvat_1)+&quot; &quot;+str(nvac_1)+&quot; &quot;+str(nvpa_1)+&quot; &quot;+str(nvta_1)+&quot; &quot;+str(nvxa_1)+&quot; &quot;+str(nvpb_1)+&quot; &quot;+str(nvxb_1)+&quot; &quot;+str(nvpc_1)+&quot; &quot;+str(nvtc_1)+&quot; &quot;+str(nvxc_1)+&quot; &quot;+str(mat_1)+&quot; &quot;+str(mac_1)+&quot; &quot;+str(mpa_1)+&quot; &quot;+str(mta_1)+&quot; &quot;+str(mxa_1)+&quot; &quot;+str(mpb_1)+&quot; &quot;+str(mxb_1)+&quot; &quot;+str(mpc_1)+&quot; &quot;+str(mtc_1)+&quot; &quot;+str(mxc_1)+&quot; &quot;+str(bnda_1)+&quot; &quot;+str(bndb_1)+&quot; &quot;+str(bndc_1)+&quot; &quot;+str(bndt_1)+&quot; &quot;+str(bndu_1)+&quot; &quot;+str(bndv_1)+&quot; \n&quot;
            notetime_1 = notetime_1 + subeat_1                      # increment notetime by subeat time value
    i_1 = i_1 + 1
    c_1 = 0
score = scoreText_1
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>60.0</startTime>
          <name>Ringer_1f</name>
          <backgroundColor>-341966</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_1 - 3h13TET
scoreText_1 = &quot;&quot;                              	# scoreText_1 is cleared
bart_1 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_1 = [&apos;c&apos;,&apos;b&apos;,&apos;d&apos;]			# rhythm
bpb_1 = len(rhythmr0_1)                         # beats per bar
beat_1 = bart_1/bpb_1                           # time of beat in seconds
notetime_1 = 0                                  # set intitial note start time
durlist_1 = [1.66,1.66,2.66]			# note duration list
notelist_1 = [66,67,69]				# note list
splist_1 = [1,1,1]				# subpatch list
panalist_1 = [.45,.55,.45]			# panb list
panblist_1 = [.5,.5,.5]				# pana list
nvatlist_1 = [.55,.55,.55]			# nvat list
nvaclist_1 = [0,0,0]				# nvac list
nvpalist_1 = [1,1,1]				# nvpa list
nvtalist_1 = [.55,.55,.55]			# nvta list
nvxalist_1 = [0,0,0]			# nvxa list
nvpblist_1 = [1,1,1]			# nvpb list
nvxblist_1 = [0,0,0]			# nvxb list
nvpclist_1 = [.7,.7,.7]			# nvpc list
nvtclist_1 = [.3,.3,.3]			# nvtc list
nvxclist_1 = [2,2,2]			# nvxc list
matlist_1 = [.55,.55,.55]		# mat list
maclist_1 = [0,0,0]			# mac list
mpalist_1 = [.3,.3,.3]			# mpa list
mtalist_1 = [.55,.55,.55]		# mta list
mxalist_1 = [0,0,0]			# mxa list
mpblist_1 = [.3,.3,.3]			# mpb list
mxblist_1 = [0,0,0]			# mxb list
mpclist_1 = [.1,.1,.1]		# mpc list
mtclist_1 = [.3,.3,.3]			# mtc list
mxclist_1 = [2,2,2]			# mxc list
bndalist_1 = [1,1,1]			# bnda list
bndblist_1 = [1,1,1]			# bndb list
bndclist_1 = [1,1,1]			# bndc list
bndtlist_1 = [.5,.5,.5]			# bndt list
bndulist_1 = [.5,.5,.5]			# bndu list
bndvlist_1 = [.5,.5,.5]			# bndv list
i_1 = 0						# loop iteration counter
c_1 = 0						# note iteration counter
while i_1 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_1 in range(bpb_1) :                           # loop through the items in the rhythm list
        sb_1 = rhythmr0_1[a_1]                          # sb is current item in the rhythm list
        subeat_1 = beat_1/len(sb_1)                     # subeat is the number of sub-beats in the beat
        for b_1 in range(len(sb_1)) :                   # loop through the items in the beat string
            if sb_1[b_1].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_1[b_1])                   # get ascii number of the character
                if sb_1[b_1].isdigit() :                # check if character is numeric
                    amp_1 = (asky-47)                   # assign amplitude
                elif sb_1[b_1].isupper() :              # check if character is uppercase
                    amp_1 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_1 = (asky-60)                   # assign amplitude
            elif sb_1[b_1] == &apos;-&apos; : amp_1 = 0           # character for amp = 0                         
            elif sb_1[b_1] == &apos;&gt;&apos; : amp_1 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_1 = blueDuration + 1           # set notetime_1 &gt; blueduration
                scoreText_1 = &apos;&apos;                        # clear scoreText_1
            if notetime_1 &gt;= blueDuration : break       # break out of the loop
	    if amp_1 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_1 = durlist_1[c_1]			# get duration from durlist
		amp_1 = amp_1-62			# move amp value to correct dbfs range (max=1)
		note_1 = notelist_1[c_1]		# get note from notelist
	        sp_1 = splist_1[c_1]			# get subpatch from splist
		pana_1 = panalist_1[c_1]		# get pana from panalist
		panb_1 = panblist_1[c_1]		# get panb from panblist
		nvat_1 = nvatlist_1[c_1]		# get nvat from nvatlist
		nvac_1 = nvaclist_1[c_1]		# get nvac from nvatlist
		nvpa_1 = nvpalist_1[c_1]		# get nvpa from nvpalist
		nvta_1 = nvtalist_1[c_1]		# get nvta from nvtalist
		nvxa_1 = nvxalist_1[c_1]		# get nvxa from nvxalist
		nvpb_1 = nvpblist_1[c_1]		# get nvpb from nvpblist
		nvxb_1 = nvxblist_1[c_1]		# get nvxb from nvxblist
		nvpc_1 = nvpclist_1[c_1]		# get nvpc from nvpclist
		nvtc_1 = nvtclist_1[c_1]		# get nvtc from nvtclist
		nvxc_1 = nvxclist_1[c_1]		# get nvxc from nvxclist
		mat_1 = matlist_1[c_1]			# get mat from matlist
		mac_1 = maclist_1[c_1]			# get mac from maclist
		mpa_1 = mpalist_1[c_1]			# get mpa from mpalist
		mta_1 = mtalist_1[c_1]			# get mta from mtalist
		mxa_1 = mxalist_1[c_1]			# get mxa from mxalist
		mpb_1 = mpblist_1[c_1]			# get mpb from mpblist
		mxb_1 = mxblist_1[c_1]			# get mxb from mxblist
		mpc_1 = mpclist_1[c_1]			# get mpc from mpclist
		mtc_1 = mtclist_1[c_1]			# get mtc from mtclist
		mxc_1 = mxclist_1[c_1]			# get mxc from mxclist
		bnda_1 = bndalist_1[c_1]		# get bnda from bndalist
		bndb_1 = bndblist_1[c_1]		# get bndb from bndblist
		bndc_1 = bndclist_1[c_1]		# get bndc from bndclist
		bndt_1 = bndtlist_1[c_1]		# get bndt from bndtlist		
		bndu_1 = bndulist_1[c_1]		# get bndu from bndulist		
		bndv_1 = bndvlist_1[c_1]		# get bndv from bndvlist		
                c_1 = c_1 + 1
                scoreText_1 += &quot;i1 &quot;+str(notetime_1)+&quot; &quot;+str(dur_1)+&quot; &quot;+str(amp_1)+&quot; &quot;+str(note_1)+&quot; &quot;+str(sp_1)+&quot; &quot;+str(pana_1)+&quot; &quot;+str(panb_1)+&quot; &quot;+str(nvat_1)+&quot; &quot;+str(nvac_1)+&quot; &quot;+str(nvpa_1)+&quot; &quot;+str(nvta_1)+&quot; &quot;+str(nvxa_1)+&quot; &quot;+str(nvpb_1)+&quot; &quot;+str(nvxb_1)+&quot; &quot;+str(nvpc_1)+&quot; &quot;+str(nvtc_1)+&quot; &quot;+str(nvxc_1)+&quot; &quot;+str(mat_1)+&quot; &quot;+str(mac_1)+&quot; &quot;+str(mpa_1)+&quot; &quot;+str(mta_1)+&quot; &quot;+str(mxa_1)+&quot; &quot;+str(mpb_1)+&quot; &quot;+str(mxb_1)+&quot; &quot;+str(mpc_1)+&quot; &quot;+str(mtc_1)+&quot; &quot;+str(mxc_1)+&quot; &quot;+str(bnda_1)+&quot; &quot;+str(bndb_1)+&quot; &quot;+str(bndc_1)+&quot; &quot;+str(bndt_1)+&quot; &quot;+str(bndu_1)+&quot; &quot;+str(bndv_1)+&quot; \n&quot;
            notetime_1 = notetime_1 + subeat_1                      # increment notetime by subeat time value
    i_1 = i_1 + 1
    c_1 = 0
score = scoreText_1
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>66.0</startTime>
          <name>Ringer_5a</name>
          <backgroundColor>-14286</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_1 - 3h13TET
scoreText_1 = &quot;&quot;                              	# scoreText_1 is cleared
bart_1 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_1 = [&apos;b&apos;,&apos;a&apos;,&apos;c&apos;]			# rhythm
bpb_1 = len(rhythmr0_1)                         # beats per bar
beat_1 = bart_1/bpb_1                           # time of beat in seconds
notetime_1 = 0                                  # set intitial note start time
durlist_1 = [1.66,1.66,1.66]			# note duration list
notelist_1 = [56,57,58]				# note list
splist_1 = [3,3,3]				# subpatch list
panalist_1 = [.45,.55,.45]			# panb list
panblist_1 = [.5,.5,.5]				# pana list
nvatlist_1 = [.55,.55,.55]			# nvat list
nvaclist_1 = [0,0,0]				# nvac list
nvpalist_1 = [1,1,1]				# nvpa list
nvtalist_1 = [.55,.55,.55]			# nvta list
nvxalist_1 = [0,0,0]			# nvxa list
nvpblist_1 = [1,1,1]			# nvpb list
nvxblist_1 = [0,0,0]			# nvxb list
nvpclist_1 = [.7,.7,.7]			# nvpc list
nvtclist_1 = [.3,.3,.3]			# nvtc list
nvxclist_1 = [2,2,2]			# nvxc list
matlist_1 = [.55,.55,.55]		# mat list
maclist_1 = [0,0,0]			# mac list
mpalist_1 = [.3,.3,.3]			# mpa list
mtalist_1 = [.55,.55,.55]		# mta list
mxalist_1 = [0,0,0]			# mxa list
mpblist_1 = [.3,.3,.3]			# mpb list
mxblist_1 = [0,0,0]			# mxb list
mpclist_1 = [.15,.15,.15]		# mpc list
mtclist_1 = [.1,.1,.1]			# mtc list
mxclist_1 = [2,2,2]			# mxc list
bndalist_1 = [1,1,1]			# bnda list
bndblist_1 = [1,1,1]			# bndb list
bndclist_1 = [1,1,1]			# bndc list
bndtlist_1 = [.5,.5,.5]			# bndt list
bndulist_1 = [.5,.5,.5]			# bndu list
bndvlist_1 = [.5,.5,.5]			# bndv list
i_1 = 0						# loop iteration counter
c_1 = 0						# note iteration counter
while i_1 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_1 in range(bpb_1) :                           # loop through the items in the rhythm list
        sb_1 = rhythmr0_1[a_1]                          # sb is current item in the rhythm list
        subeat_1 = beat_1/len(sb_1)                     # subeat is the number of sub-beats in the beat
        for b_1 in range(len(sb_1)) :                   # loop through the items in the beat string
            if sb_1[b_1].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_1[b_1])                   # get ascii number of the character
                if sb_1[b_1].isdigit() :                # check if character is numeric
                    amp_1 = (asky-47)                   # assign amplitude
                elif sb_1[b_1].isupper() :              # check if character is uppercase
                    amp_1 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_1 = (asky-60)                   # assign amplitude
            elif sb_1[b_1] == &apos;-&apos; : amp_1 = 0           # character for amp = 0                         
            elif sb_1[b_1] == &apos;&gt;&apos; : amp_1 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_1 = blueDuration + 1           # set notetime_1 &gt; blueduration
                scoreText_1 = &apos;&apos;                        # clear scoreText_1
            if notetime_1 &gt;= blueDuration : break       # break out of the loop
	    if amp_1 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_1 = durlist_1[c_1]			# get duration from durlist
		amp_1 = amp_1-62			# move amp value to correct dbfs range (max=1)
		note_1 = notelist_1[c_1]		# get note from notelist
	        sp_1 = splist_1[c_1]			# get subpatch from splist
		pana_1 = panalist_1[c_1]		# get pana from panalist
		panb_1 = panblist_1[c_1]		# get panb from panblist
		nvat_1 = nvatlist_1[c_1]		# get nvat from nvatlist
		nvac_1 = nvaclist_1[c_1]		# get nvac from nvatlist
		nvpa_1 = nvpalist_1[c_1]		# get nvpa from nvpalist
		nvta_1 = nvtalist_1[c_1]		# get nvta from nvtalist
		nvxa_1 = nvxalist_1[c_1]		# get nvxa from nvxalist
		nvpb_1 = nvpblist_1[c_1]		# get nvpb from nvpblist
		nvxb_1 = nvxblist_1[c_1]		# get nvxb from nvxblist
		nvpc_1 = nvpclist_1[c_1]		# get nvpc from nvpclist
		nvtc_1 = nvtclist_1[c_1]		# get nvtc from nvtclist
		nvxc_1 = nvxclist_1[c_1]		# get nvxc from nvxclist
		mat_1 = matlist_1[c_1]			# get mat from matlist
		mac_1 = maclist_1[c_1]			# get mac from maclist
		mpa_1 = mpalist_1[c_1]			# get mpa from mpalist
		mta_1 = mtalist_1[c_1]			# get mta from mtalist
		mxa_1 = mxalist_1[c_1]			# get mxa from mxalist
		mpb_1 = mpblist_1[c_1]			# get mpb from mpblist
		mxb_1 = mxblist_1[c_1]			# get mxb from mxblist
		mpc_1 = mpclist_1[c_1]			# get mpc from mpclist
		mtc_1 = mtclist_1[c_1]			# get mtc from mtclist
		mxc_1 = mxclist_1[c_1]			# get mxc from mxclist
		bnda_1 = bndalist_1[c_1]		# get bnda from bndalist
		bndb_1 = bndblist_1[c_1]		# get bndb from bndblist
		bndc_1 = bndclist_1[c_1]		# get bndc from bndclist
		bndt_1 = bndtlist_1[c_1]		# get bndt from bndtlist		
		bndu_1 = bndulist_1[c_1]		# get bndu from bndulist		
		bndv_1 = bndvlist_1[c_1]		# get bndv from bndvlist		
                c_1 = c_1 + 1
                scoreText_1 += &quot;i1 &quot;+str(notetime_1)+&quot; &quot;+str(dur_1)+&quot; &quot;+str(amp_1)+&quot; &quot;+str(note_1)+&quot; &quot;+str(sp_1)+&quot; &quot;+str(pana_1)+&quot; &quot;+str(panb_1)+&quot; &quot;+str(nvat_1)+&quot; &quot;+str(nvac_1)+&quot; &quot;+str(nvpa_1)+&quot; &quot;+str(nvta_1)+&quot; &quot;+str(nvxa_1)+&quot; &quot;+str(nvpb_1)+&quot; &quot;+str(nvxb_1)+&quot; &quot;+str(nvpc_1)+&quot; &quot;+str(nvtc_1)+&quot; &quot;+str(nvxc_1)+&quot; &quot;+str(mat_1)+&quot; &quot;+str(mac_1)+&quot; &quot;+str(mpa_1)+&quot; &quot;+str(mta_1)+&quot; &quot;+str(mxa_1)+&quot; &quot;+str(mpb_1)+&quot; &quot;+str(mxb_1)+&quot; &quot;+str(mpc_1)+&quot; &quot;+str(mtc_1)+&quot; &quot;+str(mxc_1)+&quot; &quot;+str(bnda_1)+&quot; &quot;+str(bndb_1)+&quot; &quot;+str(bndc_1)+&quot; &quot;+str(bndt_1)+&quot; &quot;+str(bndu_1)+&quot; &quot;+str(bndv_1)+&quot; \n&quot;
            notetime_1 = notetime_1 + subeat_1                      # increment notetime by subeat time value
    i_1 = i_1 + 1
    c_1 = 0
score = scoreText_1
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>71.0</startTime>
          <name>Ringer_5b</name>
          <backgroundColor>-341966</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_1 - 3h13TET
scoreText_1 = &quot;&quot;                              	# scoreText_1 is cleared
bart_1 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_1 = [&apos;b&apos;,&apos;a&apos;,&apos;c&apos;]			# rhythm
bpb_1 = len(rhythmr0_1)                         # beats per bar
beat_1 = bart_1/bpb_1                           # time of beat in seconds
notetime_1 = 0                                  # set intitial note start time
durlist_1 = [1.66,1.66,1.66]			# note duration list
notelist_1 = [55,56,57]				# note list
splist_1 = [3,3,3]				# subpatch list
panalist_1 = [.45,.55,.45]			# panb list
panblist_1 = [.5,.5,.5]				# pana list
nvatlist_1 = [.55,.55,.55]			# nvat list
nvaclist_1 = [0,0,0]				# nvac list
nvpalist_1 = [1,1,1]				# nvpa list
nvtalist_1 = [.55,.55,.55]			# nvta list
nvxalist_1 = [0,0,0]			# nvxa list
nvpblist_1 = [1,1,1]			# nvpb list
nvxblist_1 = [0,0,0]			# nvxb list
nvpclist_1 = [.7,.7,.7]			# nvpc list
nvtclist_1 = [.3,.3,.3]			# nvtc list
nvxclist_1 = [2,2,2]			# nvxc list
matlist_1 = [.55,.55,.55]		# mat list
maclist_1 = [0,0,0]			# mac list
mpalist_1 = [.3,.3,.3]			# mpa list
mtalist_1 = [.55,.55,.55]		# mta list
mxalist_1 = [0,0,0]			# mxa list
mpblist_1 = [.3,.3,.3]			# mpb list
mxblist_1 = [0,0,0]			# mxb list
mpclist_1 = [.1,.1,.1]		# mpc list
mtclist_1 = [.3,.3,.3]			# mtc list
mxclist_1 = [2,2,2]			# mxc list
bndalist_1 = [1,1,1]			# bnda list
bndblist_1 = [1,1,1]			# bndb list
bndclist_1 = [1,1,1]			# bndc list
bndtlist_1 = [.5,.5,.5]			# bndt list
bndulist_1 = [.5,.5,.5]			# bndu list
bndvlist_1 = [.5,.5,.5]			# bndv list
i_1 = 0						# loop iteration counter
c_1 = 0						# note iteration counter
while i_1 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_1 in range(bpb_1) :                           # loop through the items in the rhythm list
        sb_1 = rhythmr0_1[a_1]                          # sb is current item in the rhythm list
        subeat_1 = beat_1/len(sb_1)                     # subeat is the number of sub-beats in the beat
        for b_1 in range(len(sb_1)) :                   # loop through the items in the beat string
            if sb_1[b_1].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_1[b_1])                   # get ascii number of the character
                if sb_1[b_1].isdigit() :                # check if character is numeric
                    amp_1 = (asky-47)                   # assign amplitude
                elif sb_1[b_1].isupper() :              # check if character is uppercase
                    amp_1 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_1 = (asky-60)                   # assign amplitude
            elif sb_1[b_1] == &apos;-&apos; : amp_1 = 0           # character for amp = 0                         
            elif sb_1[b_1] == &apos;&gt;&apos; : amp_1 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_1 = blueDuration + 1           # set notetime_1 &gt; blueduration
                scoreText_1 = &apos;&apos;                        # clear scoreText_1
            if notetime_1 &gt;= blueDuration : break       # break out of the loop
	    if amp_1 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_1 = durlist_1[c_1]			# get duration from durlist
		amp_1 = amp_1-62			# move amp value to correct dbfs range (max=1)
		note_1 = notelist_1[c_1]		# get note from notelist
	        sp_1 = splist_1[c_1]			# get subpatch from splist
		pana_1 = panalist_1[c_1]		# get pana from panalist
		panb_1 = panblist_1[c_1]		# get panb from panblist
		nvat_1 = nvatlist_1[c_1]		# get nvat from nvatlist
		nvac_1 = nvaclist_1[c_1]		# get nvac from nvatlist
		nvpa_1 = nvpalist_1[c_1]		# get nvpa from nvpalist
		nvta_1 = nvtalist_1[c_1]		# get nvta from nvtalist
		nvxa_1 = nvxalist_1[c_1]		# get nvxa from nvxalist
		nvpb_1 = nvpblist_1[c_1]		# get nvpb from nvpblist
		nvxb_1 = nvxblist_1[c_1]		# get nvxb from nvxblist
		nvpc_1 = nvpclist_1[c_1]		# get nvpc from nvpclist
		nvtc_1 = nvtclist_1[c_1]		# get nvtc from nvtclist
		nvxc_1 = nvxclist_1[c_1]		# get nvxc from nvxclist
		mat_1 = matlist_1[c_1]			# get mat from matlist
		mac_1 = maclist_1[c_1]			# get mac from maclist
		mpa_1 = mpalist_1[c_1]			# get mpa from mpalist
		mta_1 = mtalist_1[c_1]			# get mta from mtalist
		mxa_1 = mxalist_1[c_1]			# get mxa from mxalist
		mpb_1 = mpblist_1[c_1]			# get mpb from mpblist
		mxb_1 = mxblist_1[c_1]			# get mxb from mxblist
		mpc_1 = mpclist_1[c_1]			# get mpc from mpclist
		mtc_1 = mtclist_1[c_1]			# get mtc from mtclist
		mxc_1 = mxclist_1[c_1]			# get mxc from mxclist
		bnda_1 = bndalist_1[c_1]		# get bnda from bndalist
		bndb_1 = bndblist_1[c_1]		# get bndb from bndblist
		bndc_1 = bndclist_1[c_1]		# get bndc from bndclist
		bndt_1 = bndtlist_1[c_1]		# get bndt from bndtlist		
		bndu_1 = bndulist_1[c_1]		# get bndu from bndulist		
		bndv_1 = bndvlist_1[c_1]		# get bndv from bndvlist		
                c_1 = c_1 + 1
                scoreText_1 += &quot;i1 &quot;+str(notetime_1)+&quot; &quot;+str(dur_1)+&quot; &quot;+str(amp_1)+&quot; &quot;+str(note_1)+&quot; &quot;+str(sp_1)+&quot; &quot;+str(pana_1)+&quot; &quot;+str(panb_1)+&quot; &quot;+str(nvat_1)+&quot; &quot;+str(nvac_1)+&quot; &quot;+str(nvpa_1)+&quot; &quot;+str(nvta_1)+&quot; &quot;+str(nvxa_1)+&quot; &quot;+str(nvpb_1)+&quot; &quot;+str(nvxb_1)+&quot; &quot;+str(nvpc_1)+&quot; &quot;+str(nvtc_1)+&quot; &quot;+str(nvxc_1)+&quot; &quot;+str(mat_1)+&quot; &quot;+str(mac_1)+&quot; &quot;+str(mpa_1)+&quot; &quot;+str(mta_1)+&quot; &quot;+str(mxa_1)+&quot; &quot;+str(mpb_1)+&quot; &quot;+str(mxb_1)+&quot; &quot;+str(mpc_1)+&quot; &quot;+str(mtc_1)+&quot; &quot;+str(mxc_1)+&quot; &quot;+str(bnda_1)+&quot; &quot;+str(bndb_1)+&quot; &quot;+str(bndc_1)+&quot; &quot;+str(bndt_1)+&quot; &quot;+str(bndu_1)+&quot; &quot;+str(bndv_1)+&quot; \n&quot;
            notetime_1 = notetime_1 + subeat_1                      # increment notetime by subeat time value
    i_1 = i_1 + 1
    c_1 = 0
score = scoreText_1
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>76.0</startTime>
          <name>Ringer_5c</name>
          <backgroundColor>-341966</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_1 - 3h13TET
scoreText_1 = &quot;&quot;                              	# scoreText_1 is cleared
bart_1 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_1 = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]			# rhythm
bpb_1 = len(rhythmr0_1)                         # beats per bar
beat_1 = bart_1/bpb_1                           # time of beat in seconds
notetime_1 = 0                                  # set intitial note start time
durlist_1 = [1.66,1.66,1.66]			# note duration list
notelist_1 = [59,57,56]				# note list
splist_1 = [3,3,3]				# subpatch list
panalist_1 = [.45,.55,.45]			# panb list
panblist_1 = [.5,.5,.5]				# pana list
nvatlist_1 = [.55,.55,.55]			# nvat list
nvaclist_1 = [0,0,0]				# nvac list
nvpalist_1 = [1,1,1]				# nvpa list
nvtalist_1 = [.55,.55,.55]			# nvta list
nvxalist_1 = [0,0,0]			# nvxa list
nvpblist_1 = [1,1,1]			# nvpb list
nvxblist_1 = [0,0,0]			# nvxb list
nvpclist_1 = [.7,.7,.7]			# nvpc list
nvtclist_1 = [.3,.3,.3]			# nvtc list
nvxclist_1 = [2,2,2]			# nvxc list
matlist_1 = [.55,.55,.55]		# mat list
maclist_1 = [0,0,0]			# mac list
mpalist_1 = [.3,.3,.3]			# mpa list
mtalist_1 = [.55,.55,.55]		# mta list
mxalist_1 = [0,0,0]			# mxa list
mpblist_1 = [.3,.3,.3]			# mpb list
mxblist_1 = [0,0,0]			# mxb list
mpclist_1 = [.1,.1,.1]		# mpc list
mtclist_1 = [.3,.3,.3]			# mtc list
mxclist_1 = [2,2,2]			# mxc list
bndalist_1 = [1,1,1]			# bnda list
bndblist_1 = [1,1,1]			# bndb list
bndclist_1 = [1,1,1]			# bndc list
bndtlist_1 = [.5,.5,.5]			# bndt list
bndulist_1 = [.5,.5,.5]			# bndu list
bndvlist_1 = [.5,.5,.5]			# bndv list
i_1 = 0						# loop iteration counter
c_1 = 0						# note iteration counter
while i_1 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_1 in range(bpb_1) :                           # loop through the items in the rhythm list
        sb_1 = rhythmr0_1[a_1]                          # sb is current item in the rhythm list
        subeat_1 = beat_1/len(sb_1)                     # subeat is the number of sub-beats in the beat
        for b_1 in range(len(sb_1)) :                   # loop through the items in the beat string
            if sb_1[b_1].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_1[b_1])                   # get ascii number of the character
                if sb_1[b_1].isdigit() :                # check if character is numeric
                    amp_1 = (asky-47)                   # assign amplitude
                elif sb_1[b_1].isupper() :              # check if character is uppercase
                    amp_1 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_1 = (asky-60)                   # assign amplitude
            elif sb_1[b_1] == &apos;-&apos; : amp_1 = 0           # character for amp = 0                         
            elif sb_1[b_1] == &apos;&gt;&apos; : amp_1 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_1 = blueDuration + 1           # set notetime_1 &gt; blueduration
                scoreText_1 = &apos;&apos;                        # clear scoreText_1
            if notetime_1 &gt;= blueDuration : break       # break out of the loop
	    if amp_1 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_1 = durlist_1[c_1]			# get duration from durlist
		amp_1 = amp_1-62			# move amp value to correct dbfs range (max=1)
		note_1 = notelist_1[c_1]		# get note from notelist
	        sp_1 = splist_1[c_1]			# get subpatch from splist
		pana_1 = panalist_1[c_1]		# get pana from panalist
		panb_1 = panblist_1[c_1]		# get panb from panblist
		nvat_1 = nvatlist_1[c_1]		# get nvat from nvatlist
		nvac_1 = nvaclist_1[c_1]		# get nvac from nvatlist
		nvpa_1 = nvpalist_1[c_1]		# get nvpa from nvpalist
		nvta_1 = nvtalist_1[c_1]		# get nvta from nvtalist
		nvxa_1 = nvxalist_1[c_1]		# get nvxa from nvxalist
		nvpb_1 = nvpblist_1[c_1]		# get nvpb from nvpblist
		nvxb_1 = nvxblist_1[c_1]		# get nvxb from nvxblist
		nvpc_1 = nvpclist_1[c_1]		# get nvpc from nvpclist
		nvtc_1 = nvtclist_1[c_1]		# get nvtc from nvtclist
		nvxc_1 = nvxclist_1[c_1]		# get nvxc from nvxclist
		mat_1 = matlist_1[c_1]			# get mat from matlist
		mac_1 = maclist_1[c_1]			# get mac from maclist
		mpa_1 = mpalist_1[c_1]			# get mpa from mpalist
		mta_1 = mtalist_1[c_1]			# get mta from mtalist
		mxa_1 = mxalist_1[c_1]			# get mxa from mxalist
		mpb_1 = mpblist_1[c_1]			# get mpb from mpblist
		mxb_1 = mxblist_1[c_1]			# get mxb from mxblist
		mpc_1 = mpclist_1[c_1]			# get mpc from mpclist
		mtc_1 = mtclist_1[c_1]			# get mtc from mtclist
		mxc_1 = mxclist_1[c_1]			# get mxc from mxclist
		bnda_1 = bndalist_1[c_1]		# get bnda from bndalist
		bndb_1 = bndblist_1[c_1]		# get bndb from bndblist
		bndc_1 = bndclist_1[c_1]		# get bndc from bndclist
		bndt_1 = bndtlist_1[c_1]		# get bndt from bndtlist		
		bndu_1 = bndulist_1[c_1]		# get bndu from bndulist		
		bndv_1 = bndvlist_1[c_1]		# get bndv from bndvlist		
                c_1 = c_1 + 1
                scoreText_1 += &quot;i1 &quot;+str(notetime_1)+&quot; &quot;+str(dur_1)+&quot; &quot;+str(amp_1)+&quot; &quot;+str(note_1)+&quot; &quot;+str(sp_1)+&quot; &quot;+str(pana_1)+&quot; &quot;+str(panb_1)+&quot; &quot;+str(nvat_1)+&quot; &quot;+str(nvac_1)+&quot; &quot;+str(nvpa_1)+&quot; &quot;+str(nvta_1)+&quot; &quot;+str(nvxa_1)+&quot; &quot;+str(nvpb_1)+&quot; &quot;+str(nvxb_1)+&quot; &quot;+str(nvpc_1)+&quot; &quot;+str(nvtc_1)+&quot; &quot;+str(nvxc_1)+&quot; &quot;+str(mat_1)+&quot; &quot;+str(mac_1)+&quot; &quot;+str(mpa_1)+&quot; &quot;+str(mta_1)+&quot; &quot;+str(mxa_1)+&quot; &quot;+str(mpb_1)+&quot; &quot;+str(mxb_1)+&quot; &quot;+str(mpc_1)+&quot; &quot;+str(mtc_1)+&quot; &quot;+str(mxc_1)+&quot; &quot;+str(bnda_1)+&quot; &quot;+str(bndb_1)+&quot; &quot;+str(bndc_1)+&quot; &quot;+str(bndt_1)+&quot; &quot;+str(bndu_1)+&quot; &quot;+str(bndv_1)+&quot; \n&quot;
            notetime_1 = notetime_1 + subeat_1                      # increment notetime by subeat time value
    i_1 = i_1 + 1
    c_1 = 0
score = scoreText_1
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>81.0</startTime>
          <name>Ringer_5d</name>
          <backgroundColor>-341966</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_1 - 3h13TET
scoreText_1 = &quot;&quot;                              	# scoreText_1 is cleared
bart_1 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_1 = [&apos;b&apos;,&apos;a&apos;,&apos;c&apos;]			# rhythm
bpb_1 = len(rhythmr0_1)                         # beats per bar
beat_1 = bart_1/bpb_1                           # time of beat in seconds
notetime_1 = 0                                  # set intitial note start time
durlist_1 = [1.66,1.66,1.66]			# note duration list
notelist_1 = [57,56,55]				# note list
splist_1 = [3,3,3]				# subpatch list
panalist_1 = [.45,.55,.45]			# panb list
panblist_1 = [.5,.5,.5]				# pana list
nvatlist_1 = [.55,.55,.55]			# nvat list
nvaclist_1 = [0,0,0]				# nvac list
nvpalist_1 = [1,1,1]				# nvpa list
nvtalist_1 = [.55,.55,.55]			# nvta list
nvxalist_1 = [0,0,0]			# nvxa list
nvpblist_1 = [1,1,1]			# nvpb list
nvxblist_1 = [0,0,0]			# nvxb list
nvpclist_1 = [.7,.7,.7]			# nvpc list
nvtclist_1 = [.3,.3,.3]			# nvtc list
nvxclist_1 = [2,2,2]			# nvxc list
matlist_1 = [.55,.55,.55]		# mat list
maclist_1 = [0,0,0]			# mac list
mpalist_1 = [.3,.3,.3]			# mpa list
mtalist_1 = [.55,.55,.55]		# mta list
mxalist_1 = [0,0,0]			# mxa list
mpblist_1 = [.3,.3,.3]			# mpb list
mxblist_1 = [0,0,0]			# mxb list
mpclist_1 = [.1,.1,.1]		# mpc list
mtclist_1 = [.3,.3,.3]			# mtc list
mxclist_1 = [2,2,2]			# mxc list
bndalist_1 = [1,1,1]			# bnda list
bndblist_1 = [1,1,1]			# bndb list
bndclist_1 = [1,1,1]			# bndc list
bndtlist_1 = [.5,.5,.5]			# bndt list
bndulist_1 = [.5,.5,.5]			# bndu list
bndvlist_1 = [.5,.5,.5]			# bndv list
i_1 = 0						# loop iteration counter
c_1 = 0						# note iteration counter
while i_1 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_1 in range(bpb_1) :                           # loop through the items in the rhythm list
        sb_1 = rhythmr0_1[a_1]                          # sb is current item in the rhythm list
        subeat_1 = beat_1/len(sb_1)                     # subeat is the number of sub-beats in the beat
        for b_1 in range(len(sb_1)) :                   # loop through the items in the beat string
            if sb_1[b_1].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_1[b_1])                   # get ascii number of the character
                if sb_1[b_1].isdigit() :                # check if character is numeric
                    amp_1 = (asky-47)                   # assign amplitude
                elif sb_1[b_1].isupper() :              # check if character is uppercase
                    amp_1 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_1 = (asky-60)                   # assign amplitude
            elif sb_1[b_1] == &apos;-&apos; : amp_1 = 0           # character for amp = 0                         
            elif sb_1[b_1] == &apos;&gt;&apos; : amp_1 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_1 = blueDuration + 1           # set notetime_1 &gt; blueduration
                scoreText_1 = &apos;&apos;                        # clear scoreText_1
            if notetime_1 &gt;= blueDuration : break       # break out of the loop
	    if amp_1 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_1 = durlist_1[c_1]			# get duration from durlist
		amp_1 = amp_1-62			# move amp value to correct dbfs range (max=1)
		note_1 = notelist_1[c_1]		# get note from notelist
	        sp_1 = splist_1[c_1]			# get subpatch from splist
		pana_1 = panalist_1[c_1]		# get pana from panalist
		panb_1 = panblist_1[c_1]		# get panb from panblist
		nvat_1 = nvatlist_1[c_1]		# get nvat from nvatlist
		nvac_1 = nvaclist_1[c_1]		# get nvac from nvatlist
		nvpa_1 = nvpalist_1[c_1]		# get nvpa from nvpalist
		nvta_1 = nvtalist_1[c_1]		# get nvta from nvtalist
		nvxa_1 = nvxalist_1[c_1]		# get nvxa from nvxalist
		nvpb_1 = nvpblist_1[c_1]		# get nvpb from nvpblist
		nvxb_1 = nvxblist_1[c_1]		# get nvxb from nvxblist
		nvpc_1 = nvpclist_1[c_1]		# get nvpc from nvpclist
		nvtc_1 = nvtclist_1[c_1]		# get nvtc from nvtclist
		nvxc_1 = nvxclist_1[c_1]		# get nvxc from nvxclist
		mat_1 = matlist_1[c_1]			# get mat from matlist
		mac_1 = maclist_1[c_1]			# get mac from maclist
		mpa_1 = mpalist_1[c_1]			# get mpa from mpalist
		mta_1 = mtalist_1[c_1]			# get mta from mtalist
		mxa_1 = mxalist_1[c_1]			# get mxa from mxalist
		mpb_1 = mpblist_1[c_1]			# get mpb from mpblist
		mxb_1 = mxblist_1[c_1]			# get mxb from mxblist
		mpc_1 = mpclist_1[c_1]			# get mpc from mpclist
		mtc_1 = mtclist_1[c_1]			# get mtc from mtclist
		mxc_1 = mxclist_1[c_1]			# get mxc from mxclist
		bnda_1 = bndalist_1[c_1]		# get bnda from bndalist
		bndb_1 = bndblist_1[c_1]		# get bndb from bndblist
		bndc_1 = bndclist_1[c_1]		# get bndc from bndclist
		bndt_1 = bndtlist_1[c_1]		# get bndt from bndtlist		
		bndu_1 = bndulist_1[c_1]		# get bndu from bndulist		
		bndv_1 = bndvlist_1[c_1]		# get bndv from bndvlist		
                c_1 = c_1 + 1
                scoreText_1 += &quot;i1 &quot;+str(notetime_1)+&quot; &quot;+str(dur_1)+&quot; &quot;+str(amp_1)+&quot; &quot;+str(note_1)+&quot; &quot;+str(sp_1)+&quot; &quot;+str(pana_1)+&quot; &quot;+str(panb_1)+&quot; &quot;+str(nvat_1)+&quot; &quot;+str(nvac_1)+&quot; &quot;+str(nvpa_1)+&quot; &quot;+str(nvta_1)+&quot; &quot;+str(nvxa_1)+&quot; &quot;+str(nvpb_1)+&quot; &quot;+str(nvxb_1)+&quot; &quot;+str(nvpc_1)+&quot; &quot;+str(nvtc_1)+&quot; &quot;+str(nvxc_1)+&quot; &quot;+str(mat_1)+&quot; &quot;+str(mac_1)+&quot; &quot;+str(mpa_1)+&quot; &quot;+str(mta_1)+&quot; &quot;+str(mxa_1)+&quot; &quot;+str(mpb_1)+&quot; &quot;+str(mxb_1)+&quot; &quot;+str(mpc_1)+&quot; &quot;+str(mtc_1)+&quot; &quot;+str(mxc_1)+&quot; &quot;+str(bnda_1)+&quot; &quot;+str(bndb_1)+&quot; &quot;+str(bndc_1)+&quot; &quot;+str(bndt_1)+&quot; &quot;+str(bndu_1)+&quot; &quot;+str(bndv_1)+&quot; \n&quot;
            notetime_1 = notetime_1 + subeat_1                      # increment notetime by subeat time value
    i_1 = i_1 + 1
    c_1 = 0
score = scoreText_1
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>86.0</startTime>
          <name>Ringer_5e</name>
          <backgroundColor>-341966</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_1 - 3h13TET
scoreText_1 = &quot;&quot;                              	# scoreText_1 is cleared
bart_1 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_1 = [&apos;c&apos;,&apos;b&apos;,&apos;d&apos;]			# rhythm
bpb_1 = len(rhythmr0_1)                         # beats per bar
beat_1 = bart_1/bpb_1                           # time of beat in seconds
notetime_1 = 0                                  # set intitial note start time
durlist_1 = [1.66,1.66,1.66]			# note duration list
notelist_1 = [55,56,57]				# note list
splist_1 = [3,3,3]				# subpatch list
panalist_1 = [.45,.55,.45]			# panb list
panblist_1 = [.5,.5,.5]				# pana list
nvatlist_1 = [.55,.55,.55]			# nvat list
nvaclist_1 = [0,0,0]				# nvac list
nvpalist_1 = [1,1,1]				# nvpa list
nvtalist_1 = [.55,.55,.55]			# nvta list
nvxalist_1 = [0,0,0]			# nvxa list
nvpblist_1 = [1,1,1]			# nvpb list
nvxblist_1 = [0,0,0]			# nvxb list
nvpclist_1 = [.7,.7,.7]			# nvpc list
nvtclist_1 = [.3,.3,.3]			# nvtc list
nvxclist_1 = [2,2,2]			# nvxc list
matlist_1 = [.55,.55,.55]		# mat list
maclist_1 = [0,0,0]			# mac list
mpalist_1 = [.3,.3,.3]			# mpa list
mtalist_1 = [.55,.55,.55]		# mta list
mxalist_1 = [0,0,0]			# mxa list
mpblist_1 = [.3,.3,.3]			# mpb list
mxblist_1 = [0,0,0]			# mxb list
mpclist_1 = [.1,.1,.1]		# mpc list
mtclist_1 = [.3,.3,.3]			# mtc list
mxclist_1 = [2,2,2]			# mxc list
bndalist_1 = [1,1,1]			# bnda list
bndblist_1 = [1,1,1]			# bndb list
bndclist_1 = [1,1,1]			# bndc list
bndtlist_1 = [.5,.5,.5]			# bndt list
bndulist_1 = [.5,.5,.5]			# bndu list
bndvlist_1 = [.5,.5,.5]			# bndv list
i_1 = 0						# loop iteration counter
c_1 = 0						# note iteration counter
while i_1 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_1 in range(bpb_1) :                           # loop through the items in the rhythm list
        sb_1 = rhythmr0_1[a_1]                          # sb is current item in the rhythm list
        subeat_1 = beat_1/len(sb_1)                     # subeat is the number of sub-beats in the beat
        for b_1 in range(len(sb_1)) :                   # loop through the items in the beat string
            if sb_1[b_1].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_1[b_1])                   # get ascii number of the character
                if sb_1[b_1].isdigit() :                # check if character is numeric
                    amp_1 = (asky-47)                   # assign amplitude
                elif sb_1[b_1].isupper() :              # check if character is uppercase
                    amp_1 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_1 = (asky-60)                   # assign amplitude
            elif sb_1[b_1] == &apos;-&apos; : amp_1 = 0           # character for amp = 0                         
            elif sb_1[b_1] == &apos;&gt;&apos; : amp_1 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_1 = blueDuration + 1           # set notetime_1 &gt; blueduration
                scoreText_1 = &apos;&apos;                        # clear scoreText_1
            if notetime_1 &gt;= blueDuration : break       # break out of the loop
	    if amp_1 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_1 = durlist_1[c_1]			# get duration from durlist
		amp_1 = amp_1-62			# move amp value to correct dbfs range (max=1)
		note_1 = notelist_1[c_1]		# get note from notelist
	        sp_1 = splist_1[c_1]			# get subpatch from splist
		pana_1 = panalist_1[c_1]		# get pana from panalist
		panb_1 = panblist_1[c_1]		# get panb from panblist
		nvat_1 = nvatlist_1[c_1]		# get nvat from nvatlist
		nvac_1 = nvaclist_1[c_1]		# get nvac from nvatlist
		nvpa_1 = nvpalist_1[c_1]		# get nvpa from nvpalist
		nvta_1 = nvtalist_1[c_1]		# get nvta from nvtalist
		nvxa_1 = nvxalist_1[c_1]		# get nvxa from nvxalist
		nvpb_1 = nvpblist_1[c_1]		# get nvpb from nvpblist
		nvxb_1 = nvxblist_1[c_1]		# get nvxb from nvxblist
		nvpc_1 = nvpclist_1[c_1]		# get nvpc from nvpclist
		nvtc_1 = nvtclist_1[c_1]		# get nvtc from nvtclist
		nvxc_1 = nvxclist_1[c_1]		# get nvxc from nvxclist
		mat_1 = matlist_1[c_1]			# get mat from matlist
		mac_1 = maclist_1[c_1]			# get mac from maclist
		mpa_1 = mpalist_1[c_1]			# get mpa from mpalist
		mta_1 = mtalist_1[c_1]			# get mta from mtalist
		mxa_1 = mxalist_1[c_1]			# get mxa from mxalist
		mpb_1 = mpblist_1[c_1]			# get mpb from mpblist
		mxb_1 = mxblist_1[c_1]			# get mxb from mxblist
		mpc_1 = mpclist_1[c_1]			# get mpc from mpclist
		mtc_1 = mtclist_1[c_1]			# get mtc from mtclist
		mxc_1 = mxclist_1[c_1]			# get mxc from mxclist
		bnda_1 = bndalist_1[c_1]		# get bnda from bndalist
		bndb_1 = bndblist_1[c_1]		# get bndb from bndblist
		bndc_1 = bndclist_1[c_1]		# get bndc from bndclist
		bndt_1 = bndtlist_1[c_1]		# get bndt from bndtlist		
		bndu_1 = bndulist_1[c_1]		# get bndu from bndulist		
		bndv_1 = bndvlist_1[c_1]		# get bndv from bndvlist		
                c_1 = c_1 + 1
                scoreText_1 += &quot;i1 &quot;+str(notetime_1)+&quot; &quot;+str(dur_1)+&quot; &quot;+str(amp_1)+&quot; &quot;+str(note_1)+&quot; &quot;+str(sp_1)+&quot; &quot;+str(pana_1)+&quot; &quot;+str(panb_1)+&quot; &quot;+str(nvat_1)+&quot; &quot;+str(nvac_1)+&quot; &quot;+str(nvpa_1)+&quot; &quot;+str(nvta_1)+&quot; &quot;+str(nvxa_1)+&quot; &quot;+str(nvpb_1)+&quot; &quot;+str(nvxb_1)+&quot; &quot;+str(nvpc_1)+&quot; &quot;+str(nvtc_1)+&quot; &quot;+str(nvxc_1)+&quot; &quot;+str(mat_1)+&quot; &quot;+str(mac_1)+&quot; &quot;+str(mpa_1)+&quot; &quot;+str(mta_1)+&quot; &quot;+str(mxa_1)+&quot; &quot;+str(mpb_1)+&quot; &quot;+str(mxb_1)+&quot; &quot;+str(mpc_1)+&quot; &quot;+str(mtc_1)+&quot; &quot;+str(mxc_1)+&quot; &quot;+str(bnda_1)+&quot; &quot;+str(bndb_1)+&quot; &quot;+str(bndc_1)+&quot; &quot;+str(bndt_1)+&quot; &quot;+str(bndu_1)+&quot; &quot;+str(bndv_1)+&quot; \n&quot;
            notetime_1 = notetime_1 + subeat_1                      # increment notetime by subeat time value
    i_1 = i_1 + 1
    c_1 = 0
score = scoreText_1
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>91.0</startTime>
          <name>Ringer_5a</name>
          <backgroundColor>-14286</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_1 - 3h13TET
scoreText_1 = &quot;&quot;                              	# scoreText_1 is cleared
bart_1 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_1 = [&apos;b&apos;,&apos;a&apos;,&apos;c&apos;]			# rhythm
bpb_1 = len(rhythmr0_1)                         # beats per bar
beat_1 = bart_1/bpb_1                           # time of beat in seconds
notetime_1 = 0                                  # set intitial note start time
durlist_1 = [1.66,1.66,1.66]			# note duration list
notelist_1 = [56,57,58]				# note list
splist_1 = [3,3,3]				# subpatch list
panalist_1 = [.45,.55,.45]			# panb list
panblist_1 = [.5,.5,.5]				# pana list
nvatlist_1 = [.55,.55,.55]			# nvat list
nvaclist_1 = [0,0,0]				# nvac list
nvpalist_1 = [1,1,1]				# nvpa list
nvtalist_1 = [.55,.55,.55]			# nvta list
nvxalist_1 = [0,0,0]			# nvxa list
nvpblist_1 = [1,1,1]			# nvpb list
nvxblist_1 = [0,0,0]			# nvxb list
nvpclist_1 = [.7,.7,.7]			# nvpc list
nvtclist_1 = [.3,.3,.3]			# nvtc list
nvxclist_1 = [2,2,2]			# nvxc list
matlist_1 = [.55,.55,.55]		# mat list
maclist_1 = [0,0,0]			# mac list
mpalist_1 = [.3,.3,.3]			# mpa list
mtalist_1 = [.55,.55,.55]		# mta list
mxalist_1 = [0,0,0]			# mxa list
mpblist_1 = [.3,.3,.3]			# mpb list
mxblist_1 = [0,0,0]			# mxb list
mpclist_1 = [.15,.15,.15]		# mpc list
mtclist_1 = [.1,.1,.1]			# mtc list
mxclist_1 = [2,2,2]			# mxc list
bndalist_1 = [1,1,1]			# bnda list
bndblist_1 = [1,1,1]			# bndb list
bndclist_1 = [1,1,1]			# bndc list
bndtlist_1 = [.5,.5,.5]			# bndt list
bndulist_1 = [.5,.5,.5]			# bndu list
bndvlist_1 = [.5,.5,.5]			# bndv list
i_1 = 0						# loop iteration counter
c_1 = 0						# note iteration counter
while i_1 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_1 in range(bpb_1) :                           # loop through the items in the rhythm list
        sb_1 = rhythmr0_1[a_1]                          # sb is current item in the rhythm list
        subeat_1 = beat_1/len(sb_1)                     # subeat is the number of sub-beats in the beat
        for b_1 in range(len(sb_1)) :                   # loop through the items in the beat string
            if sb_1[b_1].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_1[b_1])                   # get ascii number of the character
                if sb_1[b_1].isdigit() :                # check if character is numeric
                    amp_1 = (asky-47)                   # assign amplitude
                elif sb_1[b_1].isupper() :              # check if character is uppercase
                    amp_1 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_1 = (asky-60)                   # assign amplitude
            elif sb_1[b_1] == &apos;-&apos; : amp_1 = 0           # character for amp = 0                         
            elif sb_1[b_1] == &apos;&gt;&apos; : amp_1 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_1 = blueDuration + 1           # set notetime_1 &gt; blueduration
                scoreText_1 = &apos;&apos;                        # clear scoreText_1
            if notetime_1 &gt;= blueDuration : break       # break out of the loop
	    if amp_1 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_1 = durlist_1[c_1]			# get duration from durlist
		amp_1 = amp_1-62			# move amp value to correct dbfs range (max=1)
		note_1 = notelist_1[c_1]		# get note from notelist
	        sp_1 = splist_1[c_1]			# get subpatch from splist
		pana_1 = panalist_1[c_1]		# get pana from panalist
		panb_1 = panblist_1[c_1]		# get panb from panblist
		nvat_1 = nvatlist_1[c_1]		# get nvat from nvatlist
		nvac_1 = nvaclist_1[c_1]		# get nvac from nvatlist
		nvpa_1 = nvpalist_1[c_1]		# get nvpa from nvpalist
		nvta_1 = nvtalist_1[c_1]		# get nvta from nvtalist
		nvxa_1 = nvxalist_1[c_1]		# get nvxa from nvxalist
		nvpb_1 = nvpblist_1[c_1]		# get nvpb from nvpblist
		nvxb_1 = nvxblist_1[c_1]		# get nvxb from nvxblist
		nvpc_1 = nvpclist_1[c_1]		# get nvpc from nvpclist
		nvtc_1 = nvtclist_1[c_1]		# get nvtc from nvtclist
		nvxc_1 = nvxclist_1[c_1]		# get nvxc from nvxclist
		mat_1 = matlist_1[c_1]			# get mat from matlist
		mac_1 = maclist_1[c_1]			# get mac from maclist
		mpa_1 = mpalist_1[c_1]			# get mpa from mpalist
		mta_1 = mtalist_1[c_1]			# get mta from mtalist
		mxa_1 = mxalist_1[c_1]			# get mxa from mxalist
		mpb_1 = mpblist_1[c_1]			# get mpb from mpblist
		mxb_1 = mxblist_1[c_1]			# get mxb from mxblist
		mpc_1 = mpclist_1[c_1]			# get mpc from mpclist
		mtc_1 = mtclist_1[c_1]			# get mtc from mtclist
		mxc_1 = mxclist_1[c_1]			# get mxc from mxclist
		bnda_1 = bndalist_1[c_1]		# get bnda from bndalist
		bndb_1 = bndblist_1[c_1]		# get bndb from bndblist
		bndc_1 = bndclist_1[c_1]		# get bndc from bndclist
		bndt_1 = bndtlist_1[c_1]		# get bndt from bndtlist		
		bndu_1 = bndulist_1[c_1]		# get bndu from bndulist		
		bndv_1 = bndvlist_1[c_1]		# get bndv from bndvlist		
                c_1 = c_1 + 1
                scoreText_1 += &quot;i1 &quot;+str(notetime_1)+&quot; &quot;+str(dur_1)+&quot; &quot;+str(amp_1)+&quot; &quot;+str(note_1)+&quot; &quot;+str(sp_1)+&quot; &quot;+str(pana_1)+&quot; &quot;+str(panb_1)+&quot; &quot;+str(nvat_1)+&quot; &quot;+str(nvac_1)+&quot; &quot;+str(nvpa_1)+&quot; &quot;+str(nvta_1)+&quot; &quot;+str(nvxa_1)+&quot; &quot;+str(nvpb_1)+&quot; &quot;+str(nvxb_1)+&quot; &quot;+str(nvpc_1)+&quot; &quot;+str(nvtc_1)+&quot; &quot;+str(nvxc_1)+&quot; &quot;+str(mat_1)+&quot; &quot;+str(mac_1)+&quot; &quot;+str(mpa_1)+&quot; &quot;+str(mta_1)+&quot; &quot;+str(mxa_1)+&quot; &quot;+str(mpb_1)+&quot; &quot;+str(mxb_1)+&quot; &quot;+str(mpc_1)+&quot; &quot;+str(mtc_1)+&quot; &quot;+str(mxc_1)+&quot; &quot;+str(bnda_1)+&quot; &quot;+str(bndb_1)+&quot; &quot;+str(bndc_1)+&quot; &quot;+str(bndt_1)+&quot; &quot;+str(bndu_1)+&quot; &quot;+str(bndv_1)+&quot; \n&quot;
            notetime_1 = notetime_1 + subeat_1                      # increment notetime by subeat time value
    i_1 = i_1 + 1
    c_1 = 0
score = scoreText_1
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>96.0</startTime>
          <name>Ringer_1b</name>
          <backgroundColor>-341966</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_1 - 3h13TET
scoreText_1 = &quot;&quot;                              	# scoreText_1 is cleared
bart_1 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_1 = [&apos;b&apos;,&apos;a&apos;,&apos;c&apos;]			# rhythm
bpb_1 = len(rhythmr0_1)                         # beats per bar
beat_1 = bart_1/bpb_1                           # time of beat in seconds
notetime_1 = 0                                  # set intitial note start time
durlist_1 = [1.66,1.66,1.66]			# note duration list
notelist_1 = [67,69,70]				# note list
splist_1 = [1,1,1]				# subpatch list
panalist_1 = [.45,.55,.45]			# panb list
panblist_1 = [.5,.5,.5]				# pana list
nvatlist_1 = [.55,.55,.55]			# nvat list
nvaclist_1 = [0,0,0]				# nvac list
nvpalist_1 = [1,1,1]				# nvpa list
nvtalist_1 = [.55,.55,.55]			# nvta list
nvxalist_1 = [0,0,0]			# nvxa list
nvpblist_1 = [1,1,1]			# nvpb list
nvxblist_1 = [0,0,0]			# nvxb list
nvpclist_1 = [.7,.7,.7]			# nvpc list
nvtclist_1 = [.3,.3,.3]			# nvtc list
nvxclist_1 = [2,2,2]			# nvxc list
matlist_1 = [.55,.55,.55]		# mat list
maclist_1 = [0,0,0]			# mac list
mpalist_1 = [.3,.3,.3]			# mpa list
mtalist_1 = [.55,.55,.55]		# mta list
mxalist_1 = [0,0,0]			# mxa list
mpblist_1 = [.3,.3,.3]			# mpb list
mxblist_1 = [0,0,0]			# mxb list
mpclist_1 = [.1,.1,.1]		# mpc list
mtclist_1 = [.3,.3,.3]			# mtc list
mxclist_1 = [2,2,2]			# mxc list
bndalist_1 = [1,1,1]			# bnda list
bndblist_1 = [1,1,1]			# bndb list
bndclist_1 = [1,1,1]			# bndc list
bndtlist_1 = [.5,.5,.5]			# bndt list
bndulist_1 = [.5,.5,.5]			# bndu list
bndvlist_1 = [.5,.5,.5]			# bndv list
i_1 = 0						# loop iteration counter
c_1 = 0						# note iteration counter
while i_1 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_1 in range(bpb_1) :                           # loop through the items in the rhythm list
        sb_1 = rhythmr0_1[a_1]                          # sb is current item in the rhythm list
        subeat_1 = beat_1/len(sb_1)                     # subeat is the number of sub-beats in the beat
        for b_1 in range(len(sb_1)) :                   # loop through the items in the beat string
            if sb_1[b_1].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_1[b_1])                   # get ascii number of the character
                if sb_1[b_1].isdigit() :                # check if character is numeric
                    amp_1 = (asky-47)                   # assign amplitude
                elif sb_1[b_1].isupper() :              # check if character is uppercase
                    amp_1 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_1 = (asky-60)                   # assign amplitude
            elif sb_1[b_1] == &apos;-&apos; : amp_1 = 0           # character for amp = 0                         
            elif sb_1[b_1] == &apos;&gt;&apos; : amp_1 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_1 = blueDuration + 1           # set notetime_1 &gt; blueduration
                scoreText_1 = &apos;&apos;                        # clear scoreText_1
            if notetime_1 &gt;= blueDuration : break       # break out of the loop
	    if amp_1 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_1 = durlist_1[c_1]			# get duration from durlist
		amp_1 = amp_1-62			# move amp value to correct dbfs range (max=1)
		note_1 = notelist_1[c_1]		# get note from notelist
	        sp_1 = splist_1[c_1]			# get subpatch from splist
		pana_1 = panalist_1[c_1]		# get pana from panalist
		panb_1 = panblist_1[c_1]		# get panb from panblist
		nvat_1 = nvatlist_1[c_1]		# get nvat from nvatlist
		nvac_1 = nvaclist_1[c_1]		# get nvac from nvatlist
		nvpa_1 = nvpalist_1[c_1]		# get nvpa from nvpalist
		nvta_1 = nvtalist_1[c_1]		# get nvta from nvtalist
		nvxa_1 = nvxalist_1[c_1]		# get nvxa from nvxalist
		nvpb_1 = nvpblist_1[c_1]		# get nvpb from nvpblist
		nvxb_1 = nvxblist_1[c_1]		# get nvxb from nvxblist
		nvpc_1 = nvpclist_1[c_1]		# get nvpc from nvpclist
		nvtc_1 = nvtclist_1[c_1]		# get nvtc from nvtclist
		nvxc_1 = nvxclist_1[c_1]		# get nvxc from nvxclist
		mat_1 = matlist_1[c_1]			# get mat from matlist
		mac_1 = maclist_1[c_1]			# get mac from maclist
		mpa_1 = mpalist_1[c_1]			# get mpa from mpalist
		mta_1 = mtalist_1[c_1]			# get mta from mtalist
		mxa_1 = mxalist_1[c_1]			# get mxa from mxalist
		mpb_1 = mpblist_1[c_1]			# get mpb from mpblist
		mxb_1 = mxblist_1[c_1]			# get mxb from mxblist
		mpc_1 = mpclist_1[c_1]			# get mpc from mpclist
		mtc_1 = mtclist_1[c_1]			# get mtc from mtclist
		mxc_1 = mxclist_1[c_1]			# get mxc from mxclist
		bnda_1 = bndalist_1[c_1]		# get bnda from bndalist
		bndb_1 = bndblist_1[c_1]		# get bndb from bndblist
		bndc_1 = bndclist_1[c_1]		# get bndc from bndclist
		bndt_1 = bndtlist_1[c_1]		# get bndt from bndtlist		
		bndu_1 = bndulist_1[c_1]		# get bndu from bndulist		
		bndv_1 = bndvlist_1[c_1]		# get bndv from bndvlist		
                c_1 = c_1 + 1
                scoreText_1 += &quot;i1 &quot;+str(notetime_1)+&quot; &quot;+str(dur_1)+&quot; &quot;+str(amp_1)+&quot; &quot;+str(note_1)+&quot; &quot;+str(sp_1)+&quot; &quot;+str(pana_1)+&quot; &quot;+str(panb_1)+&quot; &quot;+str(nvat_1)+&quot; &quot;+str(nvac_1)+&quot; &quot;+str(nvpa_1)+&quot; &quot;+str(nvta_1)+&quot; &quot;+str(nvxa_1)+&quot; &quot;+str(nvpb_1)+&quot; &quot;+str(nvxb_1)+&quot; &quot;+str(nvpc_1)+&quot; &quot;+str(nvtc_1)+&quot; &quot;+str(nvxc_1)+&quot; &quot;+str(mat_1)+&quot; &quot;+str(mac_1)+&quot; &quot;+str(mpa_1)+&quot; &quot;+str(mta_1)+&quot; &quot;+str(mxa_1)+&quot; &quot;+str(mpb_1)+&quot; &quot;+str(mxb_1)+&quot; &quot;+str(mpc_1)+&quot; &quot;+str(mtc_1)+&quot; &quot;+str(mxc_1)+&quot; &quot;+str(bnda_1)+&quot; &quot;+str(bndb_1)+&quot; &quot;+str(bndc_1)+&quot; &quot;+str(bndt_1)+&quot; &quot;+str(bndu_1)+&quot; &quot;+str(bndv_1)+&quot; \n&quot;
            notetime_1 = notetime_1 + subeat_1                      # increment notetime by subeat time value
    i_1 = i_1 + 1
    c_1 = 0
score = scoreText_1
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>101.0</startTime>
          <name>Ringer_5c</name>
          <backgroundColor>-341966</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_1 - 3h13TET
scoreText_1 = &quot;&quot;                              	# scoreText_1 is cleared
bart_1 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_1 = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]			# rhythm
bpb_1 = len(rhythmr0_1)                         # beats per bar
beat_1 = bart_1/bpb_1                           # time of beat in seconds
notetime_1 = 0                                  # set intitial note start time
durlist_1 = [1.66,1.66,1.66]			# note duration list
notelist_1 = [59,57,56]				# note list
splist_1 = [3,3,3]				# subpatch list
panalist_1 = [.45,.55,.45]			# panb list
panblist_1 = [.5,.5,.5]				# pana list
nvatlist_1 = [.55,.55,.55]			# nvat list
nvaclist_1 = [0,0,0]				# nvac list
nvpalist_1 = [1,1,1]				# nvpa list
nvtalist_1 = [.55,.55,.55]			# nvta list
nvxalist_1 = [0,0,0]			# nvxa list
nvpblist_1 = [1,1,1]			# nvpb list
nvxblist_1 = [0,0,0]			# nvxb list
nvpclist_1 = [.7,.7,.7]			# nvpc list
nvtclist_1 = [.3,.3,.3]			# nvtc list
nvxclist_1 = [2,2,2]			# nvxc list
matlist_1 = [.55,.55,.55]		# mat list
maclist_1 = [0,0,0]			# mac list
mpalist_1 = [.3,.3,.3]			# mpa list
mtalist_1 = [.55,.55,.55]		# mta list
mxalist_1 = [0,0,0]			# mxa list
mpblist_1 = [.3,.3,.3]			# mpb list
mxblist_1 = [0,0,0]			# mxb list
mpclist_1 = [.1,.1,.1]		# mpc list
mtclist_1 = [.3,.3,.3]			# mtc list
mxclist_1 = [2,2,2]			# mxc list
bndalist_1 = [1,1,1]			# bnda list
bndblist_1 = [1,1,1]			# bndb list
bndclist_1 = [1,1,1]			# bndc list
bndtlist_1 = [.5,.5,.5]			# bndt list
bndulist_1 = [.5,.5,.5]			# bndu list
bndvlist_1 = [.5,.5,.5]			# bndv list
i_1 = 0						# loop iteration counter
c_1 = 0						# note iteration counter
while i_1 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_1 in range(bpb_1) :                           # loop through the items in the rhythm list
        sb_1 = rhythmr0_1[a_1]                          # sb is current item in the rhythm list
        subeat_1 = beat_1/len(sb_1)                     # subeat is the number of sub-beats in the beat
        for b_1 in range(len(sb_1)) :                   # loop through the items in the beat string
            if sb_1[b_1].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_1[b_1])                   # get ascii number of the character
                if sb_1[b_1].isdigit() :                # check if character is numeric
                    amp_1 = (asky-47)                   # assign amplitude
                elif sb_1[b_1].isupper() :              # check if character is uppercase
                    amp_1 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_1 = (asky-60)                   # assign amplitude
            elif sb_1[b_1] == &apos;-&apos; : amp_1 = 0           # character for amp = 0                         
            elif sb_1[b_1] == &apos;&gt;&apos; : amp_1 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_1 = blueDuration + 1           # set notetime_1 &gt; blueduration
                scoreText_1 = &apos;&apos;                        # clear scoreText_1
            if notetime_1 &gt;= blueDuration : break       # break out of the loop
	    if amp_1 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_1 = durlist_1[c_1]			# get duration from durlist
		amp_1 = amp_1-62			# move amp value to correct dbfs range (max=1)
		note_1 = notelist_1[c_1]		# get note from notelist
	        sp_1 = splist_1[c_1]			# get subpatch from splist
		pana_1 = panalist_1[c_1]		# get pana from panalist
		panb_1 = panblist_1[c_1]		# get panb from panblist
		nvat_1 = nvatlist_1[c_1]		# get nvat from nvatlist
		nvac_1 = nvaclist_1[c_1]		# get nvac from nvatlist
		nvpa_1 = nvpalist_1[c_1]		# get nvpa from nvpalist
		nvta_1 = nvtalist_1[c_1]		# get nvta from nvtalist
		nvxa_1 = nvxalist_1[c_1]		# get nvxa from nvxalist
		nvpb_1 = nvpblist_1[c_1]		# get nvpb from nvpblist
		nvxb_1 = nvxblist_1[c_1]		# get nvxb from nvxblist
		nvpc_1 = nvpclist_1[c_1]		# get nvpc from nvpclist
		nvtc_1 = nvtclist_1[c_1]		# get nvtc from nvtclist
		nvxc_1 = nvxclist_1[c_1]		# get nvxc from nvxclist
		mat_1 = matlist_1[c_1]			# get mat from matlist
		mac_1 = maclist_1[c_1]			# get mac from maclist
		mpa_1 = mpalist_1[c_1]			# get mpa from mpalist
		mta_1 = mtalist_1[c_1]			# get mta from mtalist
		mxa_1 = mxalist_1[c_1]			# get mxa from mxalist
		mpb_1 = mpblist_1[c_1]			# get mpb from mpblist
		mxb_1 = mxblist_1[c_1]			# get mxb from mxblist
		mpc_1 = mpclist_1[c_1]			# get mpc from mpclist
		mtc_1 = mtclist_1[c_1]			# get mtc from mtclist
		mxc_1 = mxclist_1[c_1]			# get mxc from mxclist
		bnda_1 = bndalist_1[c_1]		# get bnda from bndalist
		bndb_1 = bndblist_1[c_1]		# get bndb from bndblist
		bndc_1 = bndclist_1[c_1]		# get bndc from bndclist
		bndt_1 = bndtlist_1[c_1]		# get bndt from bndtlist		
		bndu_1 = bndulist_1[c_1]		# get bndu from bndulist		
		bndv_1 = bndvlist_1[c_1]		# get bndv from bndvlist		
                c_1 = c_1 + 1
                scoreText_1 += &quot;i1 &quot;+str(notetime_1)+&quot; &quot;+str(dur_1)+&quot; &quot;+str(amp_1)+&quot; &quot;+str(note_1)+&quot; &quot;+str(sp_1)+&quot; &quot;+str(pana_1)+&quot; &quot;+str(panb_1)+&quot; &quot;+str(nvat_1)+&quot; &quot;+str(nvac_1)+&quot; &quot;+str(nvpa_1)+&quot; &quot;+str(nvta_1)+&quot; &quot;+str(nvxa_1)+&quot; &quot;+str(nvpb_1)+&quot; &quot;+str(nvxb_1)+&quot; &quot;+str(nvpc_1)+&quot; &quot;+str(nvtc_1)+&quot; &quot;+str(nvxc_1)+&quot; &quot;+str(mat_1)+&quot; &quot;+str(mac_1)+&quot; &quot;+str(mpa_1)+&quot; &quot;+str(mta_1)+&quot; &quot;+str(mxa_1)+&quot; &quot;+str(mpb_1)+&quot; &quot;+str(mxb_1)+&quot; &quot;+str(mpc_1)+&quot; &quot;+str(mtc_1)+&quot; &quot;+str(mxc_1)+&quot; &quot;+str(bnda_1)+&quot; &quot;+str(bndb_1)+&quot; &quot;+str(bndc_1)+&quot; &quot;+str(bndt_1)+&quot; &quot;+str(bndu_1)+&quot; &quot;+str(bndv_1)+&quot; \n&quot;
            notetime_1 = notetime_1 + subeat_1                      # increment notetime by subeat time value
    i_1 = i_1 + 1
    c_1 = 0
score = scoreText_1
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>106.0</startTime>
          <name>Ringer_1d</name>
          <backgroundColor>-341966</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_1 - 3h13TET
scoreText_1 = &quot;&quot;                              	# scoreText_1 is cleared
bart_1 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_1 = [&apos;b&apos;,&apos;a&apos;,&apos;c&apos;]			# rhythm
bpb_1 = len(rhythmr0_1)                         # beats per bar
beat_1 = bart_1/bpb_1                           # time of beat in seconds
notetime_1 = 0                                  # set intitial note start time
durlist_1 = [1.66,1.66,1.66]			# note duration list
notelist_1 = [70,69,67]				# note list
splist_1 = [1,1,1]				# subpatch list
panalist_1 = [.45,.55,.45]			# panb list
panblist_1 = [.5,.5,.5]				# pana list
nvatlist_1 = [.55,.55,.55]			# nvat list
nvaclist_1 = [0,0,0]				# nvac list
nvpalist_1 = [1,1,1]				# nvpa list
nvtalist_1 = [.55,.55,.55]			# nvta list
nvxalist_1 = [0,0,0]			# nvxa list
nvpblist_1 = [1,1,1]			# nvpb list
nvxblist_1 = [0,0,0]			# nvxb list
nvpclist_1 = [.7,.7,.7]			# nvpc list
nvtclist_1 = [.3,.3,.3]			# nvtc list
nvxclist_1 = [2,2,2]			# nvxc list
matlist_1 = [.55,.55,.55]		# mat list
maclist_1 = [0,0,0]			# mac list
mpalist_1 = [.3,.3,.3]			# mpa list
mtalist_1 = [.55,.55,.55]		# mta list
mxalist_1 = [0,0,0]			# mxa list
mpblist_1 = [.3,.3,.3]			# mpb list
mxblist_1 = [0,0,0]			# mxb list
mpclist_1 = [.1,.1,.1]		# mpc list
mtclist_1 = [.3,.3,.3]			# mtc list
mxclist_1 = [2,2,2]			# mxc list
bndalist_1 = [1,1,1]			# bnda list
bndblist_1 = [1,1,1]			# bndb list
bndclist_1 = [1,1,1]			# bndc list
bndtlist_1 = [.5,.5,.5]			# bndt list
bndulist_1 = [.5,.5,.5]			# bndu list
bndvlist_1 = [.5,.5,.5]			# bndv list
i_1 = 0						# loop iteration counter
c_1 = 0						# note iteration counter
while i_1 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_1 in range(bpb_1) :                           # loop through the items in the rhythm list
        sb_1 = rhythmr0_1[a_1]                          # sb is current item in the rhythm list
        subeat_1 = beat_1/len(sb_1)                     # subeat is the number of sub-beats in the beat
        for b_1 in range(len(sb_1)) :                   # loop through the items in the beat string
            if sb_1[b_1].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_1[b_1])                   # get ascii number of the character
                if sb_1[b_1].isdigit() :                # check if character is numeric
                    amp_1 = (asky-47)                   # assign amplitude
                elif sb_1[b_1].isupper() :              # check if character is uppercase
                    amp_1 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_1 = (asky-60)                   # assign amplitude
            elif sb_1[b_1] == &apos;-&apos; : amp_1 = 0           # character for amp = 0                         
            elif sb_1[b_1] == &apos;&gt;&apos; : amp_1 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_1 = blueDuration + 1           # set notetime_1 &gt; blueduration
                scoreText_1 = &apos;&apos;                        # clear scoreText_1
            if notetime_1 &gt;= blueDuration : break       # break out of the loop
	    if amp_1 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_1 = durlist_1[c_1]			# get duration from durlist
		amp_1 = amp_1-62			# move amp value to correct dbfs range (max=1)
		note_1 = notelist_1[c_1]		# get note from notelist
	        sp_1 = splist_1[c_1]			# get subpatch from splist
		pana_1 = panalist_1[c_1]		# get pana from panalist
		panb_1 = panblist_1[c_1]		# get panb from panblist
		nvat_1 = nvatlist_1[c_1]		# get nvat from nvatlist
		nvac_1 = nvaclist_1[c_1]		# get nvac from nvatlist
		nvpa_1 = nvpalist_1[c_1]		# get nvpa from nvpalist
		nvta_1 = nvtalist_1[c_1]		# get nvta from nvtalist
		nvxa_1 = nvxalist_1[c_1]		# get nvxa from nvxalist
		nvpb_1 = nvpblist_1[c_1]		# get nvpb from nvpblist
		nvxb_1 = nvxblist_1[c_1]		# get nvxb from nvxblist
		nvpc_1 = nvpclist_1[c_1]		# get nvpc from nvpclist
		nvtc_1 = nvtclist_1[c_1]		# get nvtc from nvtclist
		nvxc_1 = nvxclist_1[c_1]		# get nvxc from nvxclist
		mat_1 = matlist_1[c_1]			# get mat from matlist
		mac_1 = maclist_1[c_1]			# get mac from maclist
		mpa_1 = mpalist_1[c_1]			# get mpa from mpalist
		mta_1 = mtalist_1[c_1]			# get mta from mtalist
		mxa_1 = mxalist_1[c_1]			# get mxa from mxalist
		mpb_1 = mpblist_1[c_1]			# get mpb from mpblist
		mxb_1 = mxblist_1[c_1]			# get mxb from mxblist
		mpc_1 = mpclist_1[c_1]			# get mpc from mpclist
		mtc_1 = mtclist_1[c_1]			# get mtc from mtclist
		mxc_1 = mxclist_1[c_1]			# get mxc from mxclist
		bnda_1 = bndalist_1[c_1]		# get bnda from bndalist
		bndb_1 = bndblist_1[c_1]		# get bndb from bndblist
		bndc_1 = bndclist_1[c_1]		# get bndc from bndclist
		bndt_1 = bndtlist_1[c_1]		# get bndt from bndtlist		
		bndu_1 = bndulist_1[c_1]		# get bndu from bndulist		
		bndv_1 = bndvlist_1[c_1]		# get bndv from bndvlist		
                c_1 = c_1 + 1
                scoreText_1 += &quot;i1 &quot;+str(notetime_1)+&quot; &quot;+str(dur_1)+&quot; &quot;+str(amp_1)+&quot; &quot;+str(note_1)+&quot; &quot;+str(sp_1)+&quot; &quot;+str(pana_1)+&quot; &quot;+str(panb_1)+&quot; &quot;+str(nvat_1)+&quot; &quot;+str(nvac_1)+&quot; &quot;+str(nvpa_1)+&quot; &quot;+str(nvta_1)+&quot; &quot;+str(nvxa_1)+&quot; &quot;+str(nvpb_1)+&quot; &quot;+str(nvxb_1)+&quot; &quot;+str(nvpc_1)+&quot; &quot;+str(nvtc_1)+&quot; &quot;+str(nvxc_1)+&quot; &quot;+str(mat_1)+&quot; &quot;+str(mac_1)+&quot; &quot;+str(mpa_1)+&quot; &quot;+str(mta_1)+&quot; &quot;+str(mxa_1)+&quot; &quot;+str(mpb_1)+&quot; &quot;+str(mxb_1)+&quot; &quot;+str(mpc_1)+&quot; &quot;+str(mtc_1)+&quot; &quot;+str(mxc_1)+&quot; &quot;+str(bnda_1)+&quot; &quot;+str(bndb_1)+&quot; &quot;+str(bndc_1)+&quot; &quot;+str(bndt_1)+&quot; &quot;+str(bndu_1)+&quot; &quot;+str(bndv_1)+&quot; \n&quot;
            notetime_1 = notetime_1 + subeat_1                      # increment notetime by subeat time value
    i_1 = i_1 + 1
    c_1 = 0
score = scoreText_1
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>111.0</startTime>
          <name>Ringer_5e</name>
          <backgroundColor>-341966</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_1 - 3h13TET
scoreText_1 = &quot;&quot;                              	# scoreText_1 is cleared
bart_1 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_1 = [&apos;c&apos;,&apos;b&apos;,&apos;d&apos;]			# rhythm
bpb_1 = len(rhythmr0_1)                         # beats per bar
beat_1 = bart_1/bpb_1                           # time of beat in seconds
notetime_1 = 0                                  # set intitial note start time
durlist_1 = [1.66,1.66,2.66]			# note duration list
notelist_1 = [55,56,57]				# note list
splist_1 = [3,3,3]				# subpatch list
panalist_1 = [.45,.55,.45]			# panb list
panblist_1 = [.5,.5,.5]				# pana list
nvatlist_1 = [.55,.55,.55]			# nvat list
nvaclist_1 = [0,0,0]				# nvac list
nvpalist_1 = [1,1,1]				# nvpa list
nvtalist_1 = [.55,.55,.55]			# nvta list
nvxalist_1 = [0,0,0]			# nvxa list
nvpblist_1 = [1,1,1]			# nvpb list
nvxblist_1 = [0,0,0]			# nvxb list
nvpclist_1 = [.7,.7,.7]			# nvpc list
nvtclist_1 = [.3,.3,1.3]			# nvtc list
nvxclist_1 = [2,2,2]			# nvxc list
matlist_1 = [.55,.55,.55]		# mat list
maclist_1 = [0,0,0]			# mac list
mpalist_1 = [.3,.3,.3]			# mpa list
mtalist_1 = [.55,.55,.55]		# mta list
mxalist_1 = [0,0,0]			# mxa list
mpblist_1 = [.3,.3,.3]			# mpb list
mxblist_1 = [0,0,0]			# mxb list
mpclist_1 = [.1,.1,.1]		# mpc list
mtclist_1 = [.3,.3,.3]			# mtc list
mxclist_1 = [2,2,2]			# mxc list
bndalist_1 = [1,1,1]			# bnda list
bndblist_1 = [1,1,1]			# bndb list
bndclist_1 = [1,1,1]			# bndc list
bndtlist_1 = [.5,.5,.5]			# bndt list
bndulist_1 = [.5,.5,.5]			# bndu list
bndvlist_1 = [.5,.5,.5]			# bndv list
i_1 = 0						# loop iteration counter
c_1 = 0						# note iteration counter
while i_1 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_1 in range(bpb_1) :                           # loop through the items in the rhythm list
        sb_1 = rhythmr0_1[a_1]                          # sb is current item in the rhythm list
        subeat_1 = beat_1/len(sb_1)                     # subeat is the number of sub-beats in the beat
        for b_1 in range(len(sb_1)) :                   # loop through the items in the beat string
            if sb_1[b_1].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_1[b_1])                   # get ascii number of the character
                if sb_1[b_1].isdigit() :                # check if character is numeric
                    amp_1 = (asky-47)                   # assign amplitude
                elif sb_1[b_1].isupper() :              # check if character is uppercase
                    amp_1 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_1 = (asky-60)                   # assign amplitude
            elif sb_1[b_1] == &apos;-&apos; : amp_1 = 0           # character for amp = 0                         
            elif sb_1[b_1] == &apos;&gt;&apos; : amp_1 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_1 = blueDuration + 1           # set notetime_1 &gt; blueduration
                scoreText_1 = &apos;&apos;                        # clear scoreText_1
            if notetime_1 &gt;= blueDuration : break       # break out of the loop
	    if amp_1 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_1 = durlist_1[c_1]			# get duration from durlist
		amp_1 = amp_1-62			# move amp value to correct dbfs range (max=1)
		note_1 = notelist_1[c_1]		# get note from notelist
	        sp_1 = splist_1[c_1]			# get subpatch from splist
		pana_1 = panalist_1[c_1]		# get pana from panalist
		panb_1 = panblist_1[c_1]		# get panb from panblist
		nvat_1 = nvatlist_1[c_1]		# get nvat from nvatlist
		nvac_1 = nvaclist_1[c_1]		# get nvac from nvatlist
		nvpa_1 = nvpalist_1[c_1]		# get nvpa from nvpalist
		nvta_1 = nvtalist_1[c_1]		# get nvta from nvtalist
		nvxa_1 = nvxalist_1[c_1]		# get nvxa from nvxalist
		nvpb_1 = nvpblist_1[c_1]		# get nvpb from nvpblist
		nvxb_1 = nvxblist_1[c_1]		# get nvxb from nvxblist
		nvpc_1 = nvpclist_1[c_1]		# get nvpc from nvpclist
		nvtc_1 = nvtclist_1[c_1]		# get nvtc from nvtclist
		nvxc_1 = nvxclist_1[c_1]		# get nvxc from nvxclist
		mat_1 = matlist_1[c_1]			# get mat from matlist
		mac_1 = maclist_1[c_1]			# get mac from maclist
		mpa_1 = mpalist_1[c_1]			# get mpa from mpalist
		mta_1 = mtalist_1[c_1]			# get mta from mtalist
		mxa_1 = mxalist_1[c_1]			# get mxa from mxalist
		mpb_1 = mpblist_1[c_1]			# get mpb from mpblist
		mxb_1 = mxblist_1[c_1]			# get mxb from mxblist
		mpc_1 = mpclist_1[c_1]			# get mpc from mpclist
		mtc_1 = mtclist_1[c_1]			# get mtc from mtclist
		mxc_1 = mxclist_1[c_1]			# get mxc from mxclist
		bnda_1 = bndalist_1[c_1]		# get bnda from bndalist
		bndb_1 = bndblist_1[c_1]		# get bndb from bndblist
		bndc_1 = bndclist_1[c_1]		# get bndc from bndclist
		bndt_1 = bndtlist_1[c_1]		# get bndt from bndtlist		
		bndu_1 = bndulist_1[c_1]		# get bndu from bndulist		
		bndv_1 = bndvlist_1[c_1]		# get bndv from bndvlist		
                c_1 = c_1 + 1
                scoreText_1 += &quot;i1 &quot;+str(notetime_1)+&quot; &quot;+str(dur_1)+&quot; &quot;+str(amp_1)+&quot; &quot;+str(note_1)+&quot; &quot;+str(sp_1)+&quot; &quot;+str(pana_1)+&quot; &quot;+str(panb_1)+&quot; &quot;+str(nvat_1)+&quot; &quot;+str(nvac_1)+&quot; &quot;+str(nvpa_1)+&quot; &quot;+str(nvta_1)+&quot; &quot;+str(nvxa_1)+&quot; &quot;+str(nvpb_1)+&quot; &quot;+str(nvxb_1)+&quot; &quot;+str(nvpc_1)+&quot; &quot;+str(nvtc_1)+&quot; &quot;+str(nvxc_1)+&quot; &quot;+str(mat_1)+&quot; &quot;+str(mac_1)+&quot; &quot;+str(mpa_1)+&quot; &quot;+str(mta_1)+&quot; &quot;+str(mxa_1)+&quot; &quot;+str(mpb_1)+&quot; &quot;+str(mxb_1)+&quot; &quot;+str(mpc_1)+&quot; &quot;+str(mtc_1)+&quot; &quot;+str(mxc_1)+&quot; &quot;+str(bnda_1)+&quot; &quot;+str(bndb_1)+&quot; &quot;+str(bndc_1)+&quot; &quot;+str(bndt_1)+&quot; &quot;+str(bndu_1)+&quot; &quot;+str(bndv_1)+&quot; \n&quot;
            notetime_1 = notetime_1 + subeat_1                      # increment notetime by subeat time value
    i_1 = i_1 + 1
    c_1 = 0
score = scoreText_1
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>121.0</startTime>
          <name>Ringer_9a</name>
          <backgroundColor>-14286</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_1 - 3h13TET
scoreText_1 = &quot;&quot;                              	# scoreText_1 is cleared
bart_1 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_1 = [&apos;b&apos;,&apos;a&apos;,&apos;c&apos;]			# rhythm
bpb_1 = len(rhythmr0_1)                         # beats per bar
beat_1 = bart_1/bpb_1                           # time of beat in seconds
notetime_1 = 0                                  # set intitial note start time
durlist_1 = [1.66,1.66,1.66]			# note duration list
notelist_1 = [58,57,56]				# note list
splist_1 = [5,5,5]				# subpatch list
panalist_1 = [.45,.55,.45]			# panb list
panblist_1 = [.5,.5,.5]				# pana list
nvatlist_1 = [.55,.55,.55]			# nvat list
nvaclist_1 = [0,0,0]				# nvac list
nvpalist_1 = [1,1,1]				# nvpa list
nvtalist_1 = [.55,.55,.55]			# nvta list
nvxalist_1 = [0,0,0]			# nvxa list
nvpblist_1 = [1,1,1]			# nvpb list
nvxblist_1 = [0,0,0]			# nvxb list
nvpclist_1 = [.7,.7,.7]			# nvpc list
nvtclist_1 = [.3,.3,.3]			# nvtc list
nvxclist_1 = [2,2,2]			# nvxc list
matlist_1 = [.55,.55,.55]		# mat list
maclist_1 = [0,0,0]			# mac list
mpalist_1 = [.3,.3,.3]			# mpa list
mtalist_1 = [.55,.55,.55]		# mta list
mxalist_1 = [0,0,0]			# mxa list
mpblist_1 = [.3,.3,.3]			# mpb list
mxblist_1 = [0,0,0]			# mxb list
mpclist_1 = [.15,.15,.15]		# mpc list
mtclist_1 = [.1,.1,.1]			# mtc list
mxclist_1 = [2,2,2]			# mxc list
bndalist_1 = [1,1,1]			# bnda list
bndblist_1 = [1,1,1]			# bndb list
bndclist_1 = [1,1,1]			# bndc list
bndtlist_1 = [.5,.5,.5]			# bndt list
bndulist_1 = [.5,.5,.5]			# bndu list
bndvlist_1 = [.5,.5,.5]			# bndv list
i_1 = 0						# loop iteration counter
c_1 = 0						# note iteration counter
while i_1 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_1 in range(bpb_1) :                           # loop through the items in the rhythm list
        sb_1 = rhythmr0_1[a_1]                          # sb is current item in the rhythm list
        subeat_1 = beat_1/len(sb_1)                     # subeat is the number of sub-beats in the beat
        for b_1 in range(len(sb_1)) :                   # loop through the items in the beat string
            if sb_1[b_1].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_1[b_1])                   # get ascii number of the character
                if sb_1[b_1].isdigit() :                # check if character is numeric
                    amp_1 = (asky-47)                   # assign amplitude
                elif sb_1[b_1].isupper() :              # check if character is uppercase
                    amp_1 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_1 = (asky-60)                   # assign amplitude
            elif sb_1[b_1] == &apos;-&apos; : amp_1 = 0           # character for amp = 0                         
            elif sb_1[b_1] == &apos;&gt;&apos; : amp_1 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_1 = blueDuration + 1           # set notetime_1 &gt; blueduration
                scoreText_1 = &apos;&apos;                        # clear scoreText_1
            if notetime_1 &gt;= blueDuration : break       # break out of the loop
	    if amp_1 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_1 = durlist_1[c_1]			# get duration from durlist
		amp_1 = amp_1-62			# move amp value to correct dbfs range (max=1)
		note_1 = notelist_1[c_1]		# get note from notelist
	        sp_1 = splist_1[c_1]			# get subpatch from splist
		pana_1 = panalist_1[c_1]		# get pana from panalist
		panb_1 = panblist_1[c_1]		# get panb from panblist
		nvat_1 = nvatlist_1[c_1]		# get nvat from nvatlist
		nvac_1 = nvaclist_1[c_1]		# get nvac from nvatlist
		nvpa_1 = nvpalist_1[c_1]		# get nvpa from nvpalist
		nvta_1 = nvtalist_1[c_1]		# get nvta from nvtalist
		nvxa_1 = nvxalist_1[c_1]		# get nvxa from nvxalist
		nvpb_1 = nvpblist_1[c_1]		# get nvpb from nvpblist
		nvxb_1 = nvxblist_1[c_1]		# get nvxb from nvxblist
		nvpc_1 = nvpclist_1[c_1]		# get nvpc from nvpclist
		nvtc_1 = nvtclist_1[c_1]		# get nvtc from nvtclist
		nvxc_1 = nvxclist_1[c_1]		# get nvxc from nvxclist
		mat_1 = matlist_1[c_1]			# get mat from matlist
		mac_1 = maclist_1[c_1]			# get mac from maclist
		mpa_1 = mpalist_1[c_1]			# get mpa from mpalist
		mta_1 = mtalist_1[c_1]			# get mta from mtalist
		mxa_1 = mxalist_1[c_1]			# get mxa from mxalist
		mpb_1 = mpblist_1[c_1]			# get mpb from mpblist
		mxb_1 = mxblist_1[c_1]			# get mxb from mxblist
		mpc_1 = mpclist_1[c_1]			# get mpc from mpclist
		mtc_1 = mtclist_1[c_1]			# get mtc from mtclist
		mxc_1 = mxclist_1[c_1]			# get mxc from mxclist
		bnda_1 = bndalist_1[c_1]		# get bnda from bndalist
		bndb_1 = bndblist_1[c_1]		# get bndb from bndblist
		bndc_1 = bndclist_1[c_1]		# get bndc from bndclist
		bndt_1 = bndtlist_1[c_1]		# get bndt from bndtlist		
		bndu_1 = bndulist_1[c_1]		# get bndu from bndulist		
		bndv_1 = bndvlist_1[c_1]		# get bndv from bndvlist		
                c_1 = c_1 + 1
                scoreText_1 += &quot;i1 &quot;+str(notetime_1)+&quot; &quot;+str(dur_1)+&quot; &quot;+str(amp_1)+&quot; &quot;+str(note_1)+&quot; &quot;+str(sp_1)+&quot; &quot;+str(pana_1)+&quot; &quot;+str(panb_1)+&quot; &quot;+str(nvat_1)+&quot; &quot;+str(nvac_1)+&quot; &quot;+str(nvpa_1)+&quot; &quot;+str(nvta_1)+&quot; &quot;+str(nvxa_1)+&quot; &quot;+str(nvpb_1)+&quot; &quot;+str(nvxb_1)+&quot; &quot;+str(nvpc_1)+&quot; &quot;+str(nvtc_1)+&quot; &quot;+str(nvxc_1)+&quot; &quot;+str(mat_1)+&quot; &quot;+str(mac_1)+&quot; &quot;+str(mpa_1)+&quot; &quot;+str(mta_1)+&quot; &quot;+str(mxa_1)+&quot; &quot;+str(mpb_1)+&quot; &quot;+str(mxb_1)+&quot; &quot;+str(mpc_1)+&quot; &quot;+str(mtc_1)+&quot; &quot;+str(mxc_1)+&quot; &quot;+str(bnda_1)+&quot; &quot;+str(bndb_1)+&quot; &quot;+str(bndc_1)+&quot; &quot;+str(bndt_1)+&quot; &quot;+str(bndu_1)+&quot; &quot;+str(bndv_1)+&quot; \n&quot;
            notetime_1 = notetime_1 + subeat_1                      # increment notetime by subeat time value
    i_1 = i_1 + 1
    c_1 = 0
score = scoreText_1
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>126.0</startTime>
          <name>Ringer_9b</name>
          <backgroundColor>-341966</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_1 - 3h13TET
scoreText_1 = &quot;&quot;                              	# scoreText_1 is cleared
bart_1 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_1 = [&apos;b&apos;,&apos;a&apos;,&apos;c&apos;]			# rhythm
bpb_1 = len(rhythmr0_1)                         # beats per bar
beat_1 = bart_1/bpb_1                           # time of beat in seconds
notetime_1 = 0                                  # set intitial note start time
durlist_1 = [1.66,1.66,1.66]			# note duration list
notelist_1 = [55,57,58]				# note list
splist_1 = [6,6,6]				# subpatch list
panalist_1 = [.45,.55,.45]			# panb list
panblist_1 = [.5,.5,.5]				# pana list
nvatlist_1 = [.55,.55,.55]			# nvat list
nvaclist_1 = [0,0,0]				# nvac list
nvpalist_1 = [1,1,1]				# nvpa list
nvtalist_1 = [.55,.55,.55]			# nvta list
nvxalist_1 = [0,0,0]			# nvxa list
nvpblist_1 = [1,1,1]			# nvpb list
nvxblist_1 = [0,0,0]			# nvxb list
nvpclist_1 = [.7,.7,.7]			# nvpc list
nvtclist_1 = [.3,.3,.3]			# nvtc list
nvxclist_1 = [2,2,2]			# nvxc list
matlist_1 = [.55,.55,.55]		# mat list
maclist_1 = [0,0,0]			# mac list
mpalist_1 = [.3,.3,.3]			# mpa list
mtalist_1 = [.55,.55,.55]		# mta list
mxalist_1 = [0,0,0]			# mxa list
mpblist_1 = [.3,.3,.3]			# mpb list
mxblist_1 = [0,0,0]			# mxb list
mpclist_1 = [.1,.1,.1]		# mpc list
mtclist_1 = [.3,.3,.3]			# mtc list
mxclist_1 = [2,2,2]			# mxc list
bndalist_1 = [1,1,1]			# bnda list
bndblist_1 = [1,1,1]			# bndb list
bndclist_1 = [1,1,1]			# bndc list
bndtlist_1 = [.5,.5,.5]			# bndt list
bndulist_1 = [.5,.5,.5]			# bndu list
bndvlist_1 = [.5,.5,.5]			# bndv list
i_1 = 0						# loop iteration counter
c_1 = 0						# note iteration counter
while i_1 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_1 in range(bpb_1) :                           # loop through the items in the rhythm list
        sb_1 = rhythmr0_1[a_1]                          # sb is current item in the rhythm list
        subeat_1 = beat_1/len(sb_1)                     # subeat is the number of sub-beats in the beat
        for b_1 in range(len(sb_1)) :                   # loop through the items in the beat string
            if sb_1[b_1].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_1[b_1])                   # get ascii number of the character
                if sb_1[b_1].isdigit() :                # check if character is numeric
                    amp_1 = (asky-47)                   # assign amplitude
                elif sb_1[b_1].isupper() :              # check if character is uppercase
                    amp_1 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_1 = (asky-60)                   # assign amplitude
            elif sb_1[b_1] == &apos;-&apos; : amp_1 = 0           # character for amp = 0                         
            elif sb_1[b_1] == &apos;&gt;&apos; : amp_1 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_1 = blueDuration + 1           # set notetime_1 &gt; blueduration
                scoreText_1 = &apos;&apos;                        # clear scoreText_1
            if notetime_1 &gt;= blueDuration : break       # break out of the loop
	    if amp_1 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_1 = durlist_1[c_1]			# get duration from durlist
		amp_1 = amp_1-62			# move amp value to correct dbfs range (max=1)
		note_1 = notelist_1[c_1]		# get note from notelist
	        sp_1 = splist_1[c_1]			# get subpatch from splist
		pana_1 = panalist_1[c_1]		# get pana from panalist
		panb_1 = panblist_1[c_1]		# get panb from panblist
		nvat_1 = nvatlist_1[c_1]		# get nvat from nvatlist
		nvac_1 = nvaclist_1[c_1]		# get nvac from nvatlist
		nvpa_1 = nvpalist_1[c_1]		# get nvpa from nvpalist
		nvta_1 = nvtalist_1[c_1]		# get nvta from nvtalist
		nvxa_1 = nvxalist_1[c_1]		# get nvxa from nvxalist
		nvpb_1 = nvpblist_1[c_1]		# get nvpb from nvpblist
		nvxb_1 = nvxblist_1[c_1]		# get nvxb from nvxblist
		nvpc_1 = nvpclist_1[c_1]		# get nvpc from nvpclist
		nvtc_1 = nvtclist_1[c_1]		# get nvtc from nvtclist
		nvxc_1 = nvxclist_1[c_1]		# get nvxc from nvxclist
		mat_1 = matlist_1[c_1]			# get mat from matlist
		mac_1 = maclist_1[c_1]			# get mac from maclist
		mpa_1 = mpalist_1[c_1]			# get mpa from mpalist
		mta_1 = mtalist_1[c_1]			# get mta from mtalist
		mxa_1 = mxalist_1[c_1]			# get mxa from mxalist
		mpb_1 = mpblist_1[c_1]			# get mpb from mpblist
		mxb_1 = mxblist_1[c_1]			# get mxb from mxblist
		mpc_1 = mpclist_1[c_1]			# get mpc from mpclist
		mtc_1 = mtclist_1[c_1]			# get mtc from mtclist
		mxc_1 = mxclist_1[c_1]			# get mxc from mxclist
		bnda_1 = bndalist_1[c_1]		# get bnda from bndalist
		bndb_1 = bndblist_1[c_1]		# get bndb from bndblist
		bndc_1 = bndclist_1[c_1]		# get bndc from bndclist
		bndt_1 = bndtlist_1[c_1]		# get bndt from bndtlist		
		bndu_1 = bndulist_1[c_1]		# get bndu from bndulist		
		bndv_1 = bndvlist_1[c_1]		# get bndv from bndvlist		
                c_1 = c_1 + 1
                scoreText_1 += &quot;i1 &quot;+str(notetime_1)+&quot; &quot;+str(dur_1)+&quot; &quot;+str(amp_1)+&quot; &quot;+str(note_1)+&quot; &quot;+str(sp_1)+&quot; &quot;+str(pana_1)+&quot; &quot;+str(panb_1)+&quot; &quot;+str(nvat_1)+&quot; &quot;+str(nvac_1)+&quot; &quot;+str(nvpa_1)+&quot; &quot;+str(nvta_1)+&quot; &quot;+str(nvxa_1)+&quot; &quot;+str(nvpb_1)+&quot; &quot;+str(nvxb_1)+&quot; &quot;+str(nvpc_1)+&quot; &quot;+str(nvtc_1)+&quot; &quot;+str(nvxc_1)+&quot; &quot;+str(mat_1)+&quot; &quot;+str(mac_1)+&quot; &quot;+str(mpa_1)+&quot; &quot;+str(mta_1)+&quot; &quot;+str(mxa_1)+&quot; &quot;+str(mpb_1)+&quot; &quot;+str(mxb_1)+&quot; &quot;+str(mpc_1)+&quot; &quot;+str(mtc_1)+&quot; &quot;+str(mxc_1)+&quot; &quot;+str(bnda_1)+&quot; &quot;+str(bndb_1)+&quot; &quot;+str(bndc_1)+&quot; &quot;+str(bndt_1)+&quot; &quot;+str(bndu_1)+&quot; &quot;+str(bndv_1)+&quot; \n&quot;
            notetime_1 = notetime_1 + subeat_1                      # increment notetime by subeat time value
    i_1 = i_1 + 1
    c_1 = 0
score = scoreText_1
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>131.0</startTime>
          <name>Ringer_9a</name>
          <backgroundColor>-14286</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_1 - 3h13TET
scoreText_1 = &quot;&quot;                              	# scoreText_1 is cleared
bart_1 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_1 = [&apos;b&apos;,&apos;a&apos;,&apos;c&apos;]			# rhythm
bpb_1 = len(rhythmr0_1)                         # beats per bar
beat_1 = bart_1/bpb_1                           # time of beat in seconds
notetime_1 = 0                                  # set intitial note start time
durlist_1 = [1.66,1.66,1.66]			# note duration list
notelist_1 = [58,57,56]				# note list
splist_1 = [5,5,5]				# subpatch list
panalist_1 = [.45,.55,.45]			# panb list
panblist_1 = [.5,.5,.5]				# pana list
nvatlist_1 = [.55,.55,.55]			# nvat list
nvaclist_1 = [0,0,0]				# nvac list
nvpalist_1 = [1,1,1]				# nvpa list
nvtalist_1 = [.55,.55,.55]			# nvta list
nvxalist_1 = [0,0,0]			# nvxa list
nvpblist_1 = [1,1,1]			# nvpb list
nvxblist_1 = [0,0,0]			# nvxb list
nvpclist_1 = [.7,.7,.7]			# nvpc list
nvtclist_1 = [.3,.3,.3]			# nvtc list
nvxclist_1 = [2,2,2]			# nvxc list
matlist_1 = [.55,.55,.55]		# mat list
maclist_1 = [0,0,0]			# mac list
mpalist_1 = [.3,.3,.3]			# mpa list
mtalist_1 = [.55,.55,.55]		# mta list
mxalist_1 = [0,0,0]			# mxa list
mpblist_1 = [.3,.3,.3]			# mpb list
mxblist_1 = [0,0,0]			# mxb list
mpclist_1 = [.15,.15,.15]		# mpc list
mtclist_1 = [.1,.1,.1]			# mtc list
mxclist_1 = [2,2,2]			# mxc list
bndalist_1 = [1,1,1]			# bnda list
bndblist_1 = [1,1,1]			# bndb list
bndclist_1 = [1,1,1]			# bndc list
bndtlist_1 = [.5,.5,.5]			# bndt list
bndulist_1 = [.5,.5,.5]			# bndu list
bndvlist_1 = [.5,.5,.5]			# bndv list
i_1 = 0						# loop iteration counter
c_1 = 0						# note iteration counter
while i_1 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_1 in range(bpb_1) :                           # loop through the items in the rhythm list
        sb_1 = rhythmr0_1[a_1]                          # sb is current item in the rhythm list
        subeat_1 = beat_1/len(sb_1)                     # subeat is the number of sub-beats in the beat
        for b_1 in range(len(sb_1)) :                   # loop through the items in the beat string
            if sb_1[b_1].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_1[b_1])                   # get ascii number of the character
                if sb_1[b_1].isdigit() :                # check if character is numeric
                    amp_1 = (asky-47)                   # assign amplitude
                elif sb_1[b_1].isupper() :              # check if character is uppercase
                    amp_1 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_1 = (asky-60)                   # assign amplitude
            elif sb_1[b_1] == &apos;-&apos; : amp_1 = 0           # character for amp = 0                         
            elif sb_1[b_1] == &apos;&gt;&apos; : amp_1 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_1 = blueDuration + 1           # set notetime_1 &gt; blueduration
                scoreText_1 = &apos;&apos;                        # clear scoreText_1
            if notetime_1 &gt;= blueDuration : break       # break out of the loop
	    if amp_1 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_1 = durlist_1[c_1]			# get duration from durlist
		amp_1 = amp_1-62			# move amp value to correct dbfs range (max=1)
		note_1 = notelist_1[c_1]		# get note from notelist
	        sp_1 = splist_1[c_1]			# get subpatch from splist
		pana_1 = panalist_1[c_1]		# get pana from panalist
		panb_1 = panblist_1[c_1]		# get panb from panblist
		nvat_1 = nvatlist_1[c_1]		# get nvat from nvatlist
		nvac_1 = nvaclist_1[c_1]		# get nvac from nvatlist
		nvpa_1 = nvpalist_1[c_1]		# get nvpa from nvpalist
		nvta_1 = nvtalist_1[c_1]		# get nvta from nvtalist
		nvxa_1 = nvxalist_1[c_1]		# get nvxa from nvxalist
		nvpb_1 = nvpblist_1[c_1]		# get nvpb from nvpblist
		nvxb_1 = nvxblist_1[c_1]		# get nvxb from nvxblist
		nvpc_1 = nvpclist_1[c_1]		# get nvpc from nvpclist
		nvtc_1 = nvtclist_1[c_1]		# get nvtc from nvtclist
		nvxc_1 = nvxclist_1[c_1]		# get nvxc from nvxclist
		mat_1 = matlist_1[c_1]			# get mat from matlist
		mac_1 = maclist_1[c_1]			# get mac from maclist
		mpa_1 = mpalist_1[c_1]			# get mpa from mpalist
		mta_1 = mtalist_1[c_1]			# get mta from mtalist
		mxa_1 = mxalist_1[c_1]			# get mxa from mxalist
		mpb_1 = mpblist_1[c_1]			# get mpb from mpblist
		mxb_1 = mxblist_1[c_1]			# get mxb from mxblist
		mpc_1 = mpclist_1[c_1]			# get mpc from mpclist
		mtc_1 = mtclist_1[c_1]			# get mtc from mtclist
		mxc_1 = mxclist_1[c_1]			# get mxc from mxclist
		bnda_1 = bndalist_1[c_1]		# get bnda from bndalist
		bndb_1 = bndblist_1[c_1]		# get bndb from bndblist
		bndc_1 = bndclist_1[c_1]		# get bndc from bndclist
		bndt_1 = bndtlist_1[c_1]		# get bndt from bndtlist		
		bndu_1 = bndulist_1[c_1]		# get bndu from bndulist		
		bndv_1 = bndvlist_1[c_1]		# get bndv from bndvlist		
                c_1 = c_1 + 1
                scoreText_1 += &quot;i1 &quot;+str(notetime_1)+&quot; &quot;+str(dur_1)+&quot; &quot;+str(amp_1)+&quot; &quot;+str(note_1)+&quot; &quot;+str(sp_1)+&quot; &quot;+str(pana_1)+&quot; &quot;+str(panb_1)+&quot; &quot;+str(nvat_1)+&quot; &quot;+str(nvac_1)+&quot; &quot;+str(nvpa_1)+&quot; &quot;+str(nvta_1)+&quot; &quot;+str(nvxa_1)+&quot; &quot;+str(nvpb_1)+&quot; &quot;+str(nvxb_1)+&quot; &quot;+str(nvpc_1)+&quot; &quot;+str(nvtc_1)+&quot; &quot;+str(nvxc_1)+&quot; &quot;+str(mat_1)+&quot; &quot;+str(mac_1)+&quot; &quot;+str(mpa_1)+&quot; &quot;+str(mta_1)+&quot; &quot;+str(mxa_1)+&quot; &quot;+str(mpb_1)+&quot; &quot;+str(mxb_1)+&quot; &quot;+str(mpc_1)+&quot; &quot;+str(mtc_1)+&quot; &quot;+str(mxc_1)+&quot; &quot;+str(bnda_1)+&quot; &quot;+str(bndb_1)+&quot; &quot;+str(bndc_1)+&quot; &quot;+str(bndt_1)+&quot; &quot;+str(bndu_1)+&quot; &quot;+str(bndv_1)+&quot; \n&quot;
            notetime_1 = notetime_1 + subeat_1                      # increment notetime by subeat time value
    i_1 = i_1 + 1
    c_1 = 0
score = scoreText_1
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>136.0</startTime>
          <name>Ringer_9d</name>
          <backgroundColor>-341966</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_1 - 3h13TET
scoreText_1 = &quot;&quot;                              	# scoreText_1 is cleared
bart_1 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_1 = [&apos;b&apos;,&apos;a&apos;,&apos;c&apos;]			# rhythm
bpb_1 = len(rhythmr0_1)                         # beats per bar
beat_1 = bart_1/bpb_1                           # time of beat in seconds
notetime_1 = 0                                  # set intitial note start time
durlist_1 = [1.66,1.66,1.66]			# note duration list
notelist_1 = [54,56,57]				# note list
splist_1 = [6,6,6]				# subpatch list
panalist_1 = [.45,.55,.45]			# panb list
panblist_1 = [.5,.5,.5]				# pana list
nvatlist_1 = [.55,.55,.55]			# nvat list
nvaclist_1 = [0,0,0]				# nvac list
nvpalist_1 = [1,1,1]				# nvpa list
nvtalist_1 = [.55,.55,.55]			# nvta list
nvxalist_1 = [0,0,0]			# nvxa list
nvpblist_1 = [1,1,1]			# nvpb list
nvxblist_1 = [0,0,0]			# nvxb list
nvpclist_1 = [.7,.7,.7]			# nvpc list
nvtclist_1 = [.3,.3,.3]			# nvtc list
nvxclist_1 = [2,2,3]			# nvxc list
matlist_1 = [.55,.55,.55]		# mat list
maclist_1 = [0,0,0]			# mac list
mpalist_1 = [.3,.3,.3]			# mpa list
mtalist_1 = [.55,.55,.55]		# mta list
mxalist_1 = [0,0,0]			# mxa list
mpblist_1 = [.3,.3,.3]			# mpb list
mxblist_1 = [0,0,0]			# mxb list
mpclist_1 = [.1,.1,.1]		# mpc list
mtclist_1 = [.3,.3,.3]			# mtc list
mxclist_1 = [2,2,4]			# mxc list
bndalist_1 = [1,1,1]			# bnda list
bndblist_1 = [1,1,1]			# bndb list
bndclist_1 = [1,1,1]			# bndc list
bndtlist_1 = [.5,.5,.5]			# bndt list
bndulist_1 = [.5,.5,.5]			# bndu list
bndvlist_1 = [.5,.5,.5]			# bndv list
i_1 = 0						# loop iteration counter
c_1 = 0						# note iteration counter
while i_1 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_1 in range(bpb_1) :                           # loop through the items in the rhythm list
        sb_1 = rhythmr0_1[a_1]                          # sb is current item in the rhythm list
        subeat_1 = beat_1/len(sb_1)                     # subeat is the number of sub-beats in the beat
        for b_1 in range(len(sb_1)) :                   # loop through the items in the beat string
            if sb_1[b_1].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_1[b_1])                   # get ascii number of the character
                if sb_1[b_1].isdigit() :                # check if character is numeric
                    amp_1 = (asky-47)                   # assign amplitude
                elif sb_1[b_1].isupper() :              # check if character is uppercase
                    amp_1 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_1 = (asky-60)                   # assign amplitude
            elif sb_1[b_1] == &apos;-&apos; : amp_1 = 0           # character for amp = 0                         
            elif sb_1[b_1] == &apos;&gt;&apos; : amp_1 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_1 = blueDuration + 1           # set notetime_1 &gt; blueduration
                scoreText_1 = &apos;&apos;                        # clear scoreText_1
            if notetime_1 &gt;= blueDuration : break       # break out of the loop
	    if amp_1 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_1 = durlist_1[c_1]			# get duration from durlist
		amp_1 = amp_1-62			# move amp value to correct dbfs range (max=1)
		note_1 = notelist_1[c_1]		# get note from notelist
	        sp_1 = splist_1[c_1]			# get subpatch from splist
		pana_1 = panalist_1[c_1]		# get pana from panalist
		panb_1 = panblist_1[c_1]		# get panb from panblist
		nvat_1 = nvatlist_1[c_1]		# get nvat from nvatlist
		nvac_1 = nvaclist_1[c_1]		# get nvac from nvatlist
		nvpa_1 = nvpalist_1[c_1]		# get nvpa from nvpalist
		nvta_1 = nvtalist_1[c_1]		# get nvta from nvtalist
		nvxa_1 = nvxalist_1[c_1]		# get nvxa from nvxalist
		nvpb_1 = nvpblist_1[c_1]		# get nvpb from nvpblist
		nvxb_1 = nvxblist_1[c_1]		# get nvxb from nvxblist
		nvpc_1 = nvpclist_1[c_1]		# get nvpc from nvpclist
		nvtc_1 = nvtclist_1[c_1]		# get nvtc from nvtclist
		nvxc_1 = nvxclist_1[c_1]		# get nvxc from nvxclist
		mat_1 = matlist_1[c_1]			# get mat from matlist
		mac_1 = maclist_1[c_1]			# get mac from maclist
		mpa_1 = mpalist_1[c_1]			# get mpa from mpalist
		mta_1 = mtalist_1[c_1]			# get mta from mtalist
		mxa_1 = mxalist_1[c_1]			# get mxa from mxalist
		mpb_1 = mpblist_1[c_1]			# get mpb from mpblist
		mxb_1 = mxblist_1[c_1]			# get mxb from mxblist
		mpc_1 = mpclist_1[c_1]			# get mpc from mpclist
		mtc_1 = mtclist_1[c_1]			# get mtc from mtclist
		mxc_1 = mxclist_1[c_1]			# get mxc from mxclist
		bnda_1 = bndalist_1[c_1]		# get bnda from bndalist
		bndb_1 = bndblist_1[c_1]		# get bndb from bndblist
		bndc_1 = bndclist_1[c_1]		# get bndc from bndclist
		bndt_1 = bndtlist_1[c_1]		# get bndt from bndtlist		
		bndu_1 = bndulist_1[c_1]		# get bndu from bndulist		
		bndv_1 = bndvlist_1[c_1]		# get bndv from bndvlist		
                c_1 = c_1 + 1
                scoreText_1 += &quot;i1 &quot;+str(notetime_1)+&quot; &quot;+str(dur_1)+&quot; &quot;+str(amp_1)+&quot; &quot;+str(note_1)+&quot; &quot;+str(sp_1)+&quot; &quot;+str(pana_1)+&quot; &quot;+str(panb_1)+&quot; &quot;+str(nvat_1)+&quot; &quot;+str(nvac_1)+&quot; &quot;+str(nvpa_1)+&quot; &quot;+str(nvta_1)+&quot; &quot;+str(nvxa_1)+&quot; &quot;+str(nvpb_1)+&quot; &quot;+str(nvxb_1)+&quot; &quot;+str(nvpc_1)+&quot; &quot;+str(nvtc_1)+&quot; &quot;+str(nvxc_1)+&quot; &quot;+str(mat_1)+&quot; &quot;+str(mac_1)+&quot; &quot;+str(mpa_1)+&quot; &quot;+str(mta_1)+&quot; &quot;+str(mxa_1)+&quot; &quot;+str(mpb_1)+&quot; &quot;+str(mxb_1)+&quot; &quot;+str(mpc_1)+&quot; &quot;+str(mtc_1)+&quot; &quot;+str(mxc_1)+&quot; &quot;+str(bnda_1)+&quot; &quot;+str(bndb_1)+&quot; &quot;+str(bndc_1)+&quot; &quot;+str(bndt_1)+&quot; &quot;+str(bndu_1)+&quot; &quot;+str(bndv_1)+&quot; \n&quot;
            notetime_1 = notetime_1 + subeat_1                      # increment notetime by subeat time value
    i_1 = i_1 + 1
    c_1 = 0
score = scoreText_1
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>141.0</startTime>
          <name>Ringer_9a</name>
          <backgroundColor>-14286</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_1 - 3h13TET
scoreText_1 = &quot;&quot;                              	# scoreText_1 is cleared
bart_1 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_1 = [&apos;b&apos;,&apos;4&apos;,&apos;-&apos;]			# rhythm
bpb_1 = len(rhythmr0_1)                         # beats per bar
beat_1 = bart_1/bpb_1                           # time of beat in seconds
notetime_1 = 0                                  # set intitial note start time
durlist_1 = [5,3.33]			# note duration list
notelist_1 = [58,57]				# note list
splist_1 = [5,5]				# subpatch list
panalist_1 = [.45,.8]			# panb list
panblist_1 = [.5,-.8]				# pana list
nvatlist_1 = [1,.55]			# nvat list
nvaclist_1 = [0,0]				# nvac list
nvpalist_1 = [1,1]				# nvpa list
nvtalist_1 = [1,.55]			# nvta list
nvxalist_1 = [0,0]			# nvxa list
nvpblist_1 = [1,1]			# nvpb list
nvxblist_1 = [0,0]			# nvxb list
nvpclist_1 = [.7,.7]			# nvpc list
nvtclist_1 = [2.99,3.32]			# nvtc list
nvxclist_1 = [-3,2]			# nvxc list
matlist_1 = [1,.55]		# mat list
maclist_1 = [0,0]			# mac list
mpalist_1 = [.3,.3]			# mpa list
mtalist_1 = [1,.55]		# mta list
mxalist_1 = [0,0]			# mxa list
mpblist_1 = [.3,.3]			# mpb list
mxblist_1 = [0,0]			# mxb list
mpclist_1 = [.15,.15]		# mpc list
mtclist_1 = [2.99,3.32]			# mtc list
mxclist_1 = [-3,2]			# mxc list
bndalist_1 = [1,1]			# bnda list
bndblist_1 = [1,1]			# bndb list
bndclist_1 = [1,1]			# bndc list
bndtlist_1 = [.5,.5]			# bndt list
bndulist_1 = [.5,.5]			# bndu list
bndvlist_1 = [.5,.5]			# bndv list
i_1 = 0						# loop iteration counter
c_1 = 0						# note iteration counter
while i_1 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_1 in range(bpb_1) :                           # loop through the items in the rhythm list
        sb_1 = rhythmr0_1[a_1]                          # sb is current item in the rhythm list
        subeat_1 = beat_1/len(sb_1)                     # subeat is the number of sub-beats in the beat
        for b_1 in range(len(sb_1)) :                   # loop through the items in the beat string
            if sb_1[b_1].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_1[b_1])                   # get ascii number of the character
                if sb_1[b_1].isdigit() :                # check if character is numeric
                    amp_1 = (asky-47)                   # assign amplitude
                elif sb_1[b_1].isupper() :              # check if character is uppercase
                    amp_1 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_1 = (asky-60)                   # assign amplitude
            elif sb_1[b_1] == &apos;-&apos; : amp_1 = 0           # character for amp = 0                         
            elif sb_1[b_1] == &apos;&gt;&apos; : amp_1 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_1 = blueDuration + 1           # set notetime_1 &gt; blueduration
                scoreText_1 = &apos;&apos;                        # clear scoreText_1
            if notetime_1 &gt;= blueDuration : break       # break out of the loop
	    if amp_1 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_1 = durlist_1[c_1]			# get duration from durlist
		amp_1 = amp_1-62			# move amp value to correct dbfs range (max=1)
		note_1 = notelist_1[c_1]		# get note from notelist
	        sp_1 = splist_1[c_1]			# get subpatch from splist
		pana_1 = panalist_1[c_1]		# get pana from panalist
		panb_1 = panblist_1[c_1]		# get panb from panblist
		nvat_1 = nvatlist_1[c_1]		# get nvat from nvatlist
		nvac_1 = nvaclist_1[c_1]		# get nvac from nvatlist
		nvpa_1 = nvpalist_1[c_1]		# get nvpa from nvpalist
		nvta_1 = nvtalist_1[c_1]		# get nvta from nvtalist
		nvxa_1 = nvxalist_1[c_1]		# get nvxa from nvxalist
		nvpb_1 = nvpblist_1[c_1]		# get nvpb from nvpblist
		nvxb_1 = nvxblist_1[c_1]		# get nvxb from nvxblist
		nvpc_1 = nvpclist_1[c_1]		# get nvpc from nvpclist
		nvtc_1 = nvtclist_1[c_1]		# get nvtc from nvtclist
		nvxc_1 = nvxclist_1[c_1]		# get nvxc from nvxclist
		mat_1 = matlist_1[c_1]			# get mat from matlist
		mac_1 = maclist_1[c_1]			# get mac from maclist
		mpa_1 = mpalist_1[c_1]			# get mpa from mpalist
		mta_1 = mtalist_1[c_1]			# get mta from mtalist
		mxa_1 = mxalist_1[c_1]			# get mxa from mxalist
		mpb_1 = mpblist_1[c_1]			# get mpb from mpblist
		mxb_1 = mxblist_1[c_1]			# get mxb from mxblist
		mpc_1 = mpclist_1[c_1]			# get mpc from mpclist
		mtc_1 = mtclist_1[c_1]			# get mtc from mtclist
		mxc_1 = mxclist_1[c_1]			# get mxc from mxclist
		bnda_1 = bndalist_1[c_1]		# get bnda from bndalist
		bndb_1 = bndblist_1[c_1]		# get bndb from bndblist
		bndc_1 = bndclist_1[c_1]		# get bndc from bndclist
		bndt_1 = bndtlist_1[c_1]		# get bndt from bndtlist		
		bndu_1 = bndulist_1[c_1]		# get bndu from bndulist		
		bndv_1 = bndvlist_1[c_1]		# get bndv from bndvlist		
                c_1 = c_1 + 1
                scoreText_1 += &quot;i1 &quot;+str(notetime_1)+&quot; &quot;+str(dur_1)+&quot; &quot;+str(amp_1)+&quot; &quot;+str(note_1)+&quot; &quot;+str(sp_1)+&quot; &quot;+str(pana_1)+&quot; &quot;+str(panb_1)+&quot; &quot;+str(nvat_1)+&quot; &quot;+str(nvac_1)+&quot; &quot;+str(nvpa_1)+&quot; &quot;+str(nvta_1)+&quot; &quot;+str(nvxa_1)+&quot; &quot;+str(nvpb_1)+&quot; &quot;+str(nvxb_1)+&quot; &quot;+str(nvpc_1)+&quot; &quot;+str(nvtc_1)+&quot; &quot;+str(nvxc_1)+&quot; &quot;+str(mat_1)+&quot; &quot;+str(mac_1)+&quot; &quot;+str(mpa_1)+&quot; &quot;+str(mta_1)+&quot; &quot;+str(mxa_1)+&quot; &quot;+str(mpb_1)+&quot; &quot;+str(mxb_1)+&quot; &quot;+str(mpc_1)+&quot; &quot;+str(mtc_1)+&quot; &quot;+str(mxc_1)+&quot; &quot;+str(bnda_1)+&quot; &quot;+str(bndb_1)+&quot; &quot;+str(bndc_1)+&quot; &quot;+str(bndt_1)+&quot; &quot;+str(bndu_1)+&quot; &quot;+str(bndv_1)+&quot; \n&quot;
            notetime_1 = notetime_1 + subeat_1                      # increment notetime by subeat time value
    i_1 = i_1 + 1
    c_1 = 0
score = scoreText_1
</pythonCode>
        </soundObject>
      </soundLayer>
      <soundLayer name='' muted='false' solo='false' heightIndex='0'>
        <noteProcessorChain/>
        <soundObject type='blue.soundObject.GenericScore'>
          <subjectiveDuration>15.0</subjectiveDuration>
          <startTime>0.0</startTime>
          <name>Tapout_0</name>
          <backgroundColor>-16711736</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <score>;inst	strt	dur	vibfreq	amp	basefq		pana	panb	car	mod	ndx	ndxmul	ndxcrv
i3 	0 	15 	.06 	22000 	261.62558 	-1	1	1	3	5	.66	0
i3 	5 	10 	.04	20000 	32.7031975 	1	-1	7	11	3	.66	0
i3 	7 	8 	.028 	18500 	123.470832 	-1	1	2	5	23	.66	0

</score>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>15.0</startTime>
          <name>Ringer_2a</name>
          <backgroundColor>-10092442</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_2 - 3h13TET
scoreText_2 = &quot;&quot;                              	# scoreText_2 is cleared
bart_2 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_2 = [&apos;-&apos;,&apos;e&apos;,&apos;-&apos;,&apos;-&apos;,&apos;-&apos;]			# rhythm
bpb_2 = len(rhythmr0_2)                         # beats per bar
beat_2 = bart_2/bpb_2                           # time of beat in seconds
notetime_2 = 0                                  # set intitial note start time
durlist_2 = [2.66]			# note duration list
notelist_2 = [50]				# note list
splist_2 = [1]				# subpatch list
panalist_2 = [-.1]			# pana list
panblist_2 = [.1]			# panb list
nvatlist_2 = [1]			# nvat list
nvaclist_2 = [.5]				# nvac list
nvpalist_2 = [1]				# nvpa list
nvtalist_2 = [.5]			# nvta list
nvxalist_2 = [0]			# nvxa list
nvpblist_2 = [.9]			# nvpb list
nvxblist_2 = [.5]			# nvxb list
nvpclist_2 = [.7]			# nvpc list
nvtclist_2 = [1]			# nvtc list
nvxclist_2 = [1.5]			# nvxc list
matlist_2 = [1]		# mat list
maclist_2 = [0]			# mac list
mpalist_2 = [.5]			# mpa list
mtalist_2 = [.5]		# mta list
mxalist_2 = [.5]			# mxa list
mpblist_2 = [.5]			# mpb list
mxblist_2 = [.5]			# mxb list
mpclist_2 = [.3]		# mpc list
mtclist_2 = [1]			# mtc list
mxclist_2 = [1.5]			# mxc list
bndalist_2 = [1]			# bnda list
bndblist_2 = [1]			# bndb list
bndclist_2 = [1]			# bndc list
bndtlist_2 = [.5]			# bndt list
bndulist_2 = [.5]			# bndu list
bndvlist_2 = [.5]			# bndv list
i_2 = 0						# loop iteration counter
c_2 = 0						# note iteration counter
while i_2 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_2 in range(bpb_2) :                           # loop through the items in the rhythm list
        sb_2 = rhythmr0_2[a_2]                          # sb is current item in the rhythm list
        subeat_2 = beat_2/len(sb_2)                     # subeat is the number of sub-beats in the beat
        for b_2 in range(len(sb_2)) :                   # loop through the items in the beat string
            if sb_2[b_2].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_2[b_2])                   # get ascii number of the character
                if sb_2[b_2].isdigit() :                # check if character is numeric
                    amp_2 = (asky-47)                   # assign amplitude
                elif sb_2[b_2].isupper() :              # check if character is uppercase
                    amp_2 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_2 = (asky-60)                   # assign amplitude
            elif sb_2[b_2] == &apos;-&apos; : amp_2 = 0           # character for amp = 0                         
            elif sb_2[b_2] == &apos;&gt;&apos; : amp_2 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_2 = blueDuration + 1           # set notetime_2 &gt; blueduration
                scoreText_2 = &apos;&apos;                        # clear scoreText_2
            if notetime_2 &gt;= blueDuration : break       # break out of the loop
	    if amp_2 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_2 = durlist_2[c_2]			# get duration from durlist
		amp_2 = amp_2-62			# move amp value to correct dbfs range (max=1)
		note_2 = notelist_2[c_2]		# get note from notelist
	        sp_2 = splist_2[c_2]			# get subpatch from splist
		pana_2 = panalist_2[c_2]		# get pana from panalist
		panb_2 = panblist_2[c_2]		# get panb from panblist
		nvat_2 = nvatlist_2[c_2]		# get nvat from nvatlist
		nvac_2 = nvaclist_2[c_2]		# get nvac from nvatlist
		nvpa_2 = nvpalist_2[c_2]		# get nvpa from nvpalist
		nvta_2 = nvtalist_2[c_2]		# get nvta from nvtalist
		nvxa_2 = nvxalist_2[c_2]		# get nvxa from nvxalist
		nvpb_2 = nvpblist_2[c_2]		# get nvpb from nvpblist
		nvxb_2 = nvxblist_2[c_2]		# get nvxb from nvxblist
		nvpc_2 = nvpclist_2[c_2]		# get nvpc from nvpclist
		nvtc_2 = nvtclist_2[c_2]		# get nvtc from nvtclist
		nvxc_2 = nvxclist_2[c_2]		# get nvxc from nvxclist
		mat_2 = matlist_2[c_2]			# get mat from matlist
		mac_2 = maclist_2[c_2]			# get mac from maclist
		mpa_2 = mpalist_2[c_2]			# get mpa from mpalist
		mta_2 = mtalist_2[c_2]			# get mta from mtalist
		mxa_2 = mxalist_2[c_2]			# get mxa from mxalist
		mpb_2 = mpblist_2[c_2]			# get mpb from mpblist
		mxb_2 = mxblist_2[c_2]			# get mxb from mxblist
		mpc_2 = mpclist_2[c_2]			# get mpc from mpclist
		mtc_2 = mtclist_2[c_2]			# get mtc from mtclist
		mxc_2 = mxclist_2[c_2]			# get mxc from mxclist
		bnda_2 = bndalist_2[c_2]		# get bnda from bndalist
		bndb_2 = bndblist_2[c_2]		# get bndb from bndblist
		bndc_2 = bndclist_2[c_2]		# get bndc from bndclist
		bndt_2 = bndtlist_2[c_2]		# get bndt from bndtlist		
		bndu_2 = bndulist_2[c_2]		# get bndu from bndulist		
		bndv_2 = bndvlist_2[c_2]		# get bndv from bndvlist		
                c_2 = c_2 + 1
                scoreText_2 += &quot;i1 &quot;+str(notetime_2)+&quot; &quot;+str(dur_2)+&quot; &quot;+str(amp_2)+&quot; &quot;+str(note_2)+&quot; &quot;+str(sp_2)+&quot; &quot;+str(pana_2)+&quot; &quot;+str(panb_2)+&quot; &quot;+str(nvat_2)+&quot; &quot;+str(nvac_2)+&quot; &quot;+str(nvpa_2)+&quot; &quot;+str(nvta_2)+&quot; &quot;+str(nvxa_2)+&quot; &quot;+str(nvpb_2)+&quot; &quot;+str(nvxb_2)+&quot; &quot;+str(nvpc_2)+&quot; &quot;+str(nvtc_2)+&quot; &quot;+str(nvxc_2)+&quot; &quot;+str(mat_2)+&quot; &quot;+str(mac_2)+&quot; &quot;+str(mpa_2)+&quot; &quot;+str(mta_2)+&quot; &quot;+str(mxa_2)+&quot; &quot;+str(mpb_2)+&quot; &quot;+str(mxb_2)+&quot; &quot;+str(mpc_2)+&quot; &quot;+str(mtc_2)+&quot; &quot;+str(mxc_2)+&quot; &quot;+str(bnda_2)+&quot; &quot;+str(bndb_2)+&quot; &quot;+str(bndc_2)+&quot; &quot;+str(bndt_2)+&quot; &quot;+str(bndu_2)+&quot; &quot;+str(bndv_2)+&quot; \n&quot;
            notetime_2 = notetime_2 + subeat_2                      # increment notetime by subeat time value
    i_2 = i_2 + 1
    c_2 = 0
score = scoreText_2
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>20.0</startTime>
          <name>Ringer_2b</name>
          <backgroundColor>-10092442</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_2 - 3h13TET
scoreText_2 = &quot;&quot;                              	# scoreText_2 is cleared
bart_2 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_2 = [&apos;-&apos;,&apos;e&apos;,&apos;-&apos;,&apos;-&apos;,&apos;-&apos;]			# rhythm
bpb_2 = len(rhythmr0_2)                         # beats per bar
beat_2 = bart_2/bpb_2                           # time of beat in seconds
notetime_2 = 0                                  # set intitial note start time
durlist_2 = [2.66]			# note duration list
notelist_2 = [49]				# note list
splist_2 = [1]				# subpatch list
panalist_2 = [-.1]			# pana list
panblist_2 = [.1]			# panb list
nvatlist_2 = [1]			# nvat list
nvaclist_2 = [.5]				# nvac list
nvpalist_2 = [1]				# nvpa list
nvtalist_2 = [.5]			# nvta list
nvxalist_2 = [0]			# nvxa list
nvpblist_2 = [.9]			# nvpb list
nvxblist_2 = [.5]			# nvxb list
nvpclist_2 = [.7]			# nvpc list
nvtclist_2 = [1]			# nvtc list
nvxclist_2 = [1.5]			# nvxc list
matlist_2 = [1]		# mat list
maclist_2 = [0]			# mac list
mpalist_2 = [.5]			# mpa list
mtalist_2 = [.5]		# mta list
mxalist_2 = [.5]			# mxa list
mpblist_2 = [.5]			# mpb list
mxblist_2 = [.5]			# mxb list
mpclist_2 = [.3]		# mpc list
mtclist_2 = [1]			# mtc list
mxclist_2 = [1.5]			# mxc list
bndalist_2 = [1]			# bnda list
bndblist_2 = [1]			# bndb list
bndclist_2 = [1]			# bndc list
bndtlist_2 = [.5]			# bndt list
bndulist_2 = [.5]			# bndu list
bndvlist_2 = [.5]			# bndv list
i_2 = 0						# loop iteration counter
c_2 = 0						# note iteration counter
while i_2 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_2 in range(bpb_2) :                           # loop through the items in the rhythm list
        sb_2 = rhythmr0_2[a_2]                          # sb is current item in the rhythm list
        subeat_2 = beat_2/len(sb_2)                     # subeat is the number of sub-beats in the beat
        for b_2 in range(len(sb_2)) :                   # loop through the items in the beat string
            if sb_2[b_2].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_2[b_2])                   # get ascii number of the character
                if sb_2[b_2].isdigit() :                # check if character is numeric
                    amp_2 = (asky-47)                   # assign amplitude
                elif sb_2[b_2].isupper() :              # check if character is uppercase
                    amp_2 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_2 = (asky-60)                   # assign amplitude
            elif sb_2[b_2] == &apos;-&apos; : amp_2 = 0           # character for amp = 0                         
            elif sb_2[b_2] == &apos;&gt;&apos; : amp_2 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_2 = blueDuration + 1           # set notetime_2 &gt; blueduration
                scoreText_2 = &apos;&apos;                        # clear scoreText_2
            if notetime_2 &gt;= blueDuration : break       # break out of the loop
	    if amp_2 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_2 = durlist_2[c_2]			# get duration from durlist
		amp_2 = amp_2-62			# move amp value to correct dbfs range (max=1)
		note_2 = notelist_2[c_2]		# get note from notelist
	        sp_2 = splist_2[c_2]			# get subpatch from splist
		pana_2 = panalist_2[c_2]		# get pana from panalist
		panb_2 = panblist_2[c_2]		# get panb from panblist
		nvat_2 = nvatlist_2[c_2]		# get nvat from nvatlist
		nvac_2 = nvaclist_2[c_2]		# get nvac from nvatlist
		nvpa_2 = nvpalist_2[c_2]		# get nvpa from nvpalist
		nvta_2 = nvtalist_2[c_2]		# get nvta from nvtalist
		nvxa_2 = nvxalist_2[c_2]		# get nvxa from nvxalist
		nvpb_2 = nvpblist_2[c_2]		# get nvpb from nvpblist
		nvxb_2 = nvxblist_2[c_2]		# get nvxb from nvxblist
		nvpc_2 = nvpclist_2[c_2]		# get nvpc from nvpclist
		nvtc_2 = nvtclist_2[c_2]		# get nvtc from nvtclist
		nvxc_2 = nvxclist_2[c_2]		# get nvxc from nvxclist
		mat_2 = matlist_2[c_2]			# get mat from matlist
		mac_2 = maclist_2[c_2]			# get mac from maclist
		mpa_2 = mpalist_2[c_2]			# get mpa from mpalist
		mta_2 = mtalist_2[c_2]			# get mta from mtalist
		mxa_2 = mxalist_2[c_2]			# get mxa from mxalist
		mpb_2 = mpblist_2[c_2]			# get mpb from mpblist
		mxb_2 = mxblist_2[c_2]			# get mxb from mxblist
		mpc_2 = mpclist_2[c_2]			# get mpc from mpclist
		mtc_2 = mtclist_2[c_2]			# get mtc from mtclist
		mxc_2 = mxclist_2[c_2]			# get mxc from mxclist
		bnda_2 = bndalist_2[c_2]		# get bnda from bndalist
		bndb_2 = bndblist_2[c_2]		# get bndb from bndblist
		bndc_2 = bndclist_2[c_2]		# get bndc from bndclist
		bndt_2 = bndtlist_2[c_2]		# get bndt from bndtlist		
		bndu_2 = bndulist_2[c_2]		# get bndu from bndulist		
		bndv_2 = bndvlist_2[c_2]		# get bndv from bndvlist		
                c_2 = c_2 + 1
                scoreText_2 += &quot;i1 &quot;+str(notetime_2)+&quot; &quot;+str(dur_2)+&quot; &quot;+str(amp_2)+&quot; &quot;+str(note_2)+&quot; &quot;+str(sp_2)+&quot; &quot;+str(pana_2)+&quot; &quot;+str(panb_2)+&quot; &quot;+str(nvat_2)+&quot; &quot;+str(nvac_2)+&quot; &quot;+str(nvpa_2)+&quot; &quot;+str(nvta_2)+&quot; &quot;+str(nvxa_2)+&quot; &quot;+str(nvpb_2)+&quot; &quot;+str(nvxb_2)+&quot; &quot;+str(nvpc_2)+&quot; &quot;+str(nvtc_2)+&quot; &quot;+str(nvxc_2)+&quot; &quot;+str(mat_2)+&quot; &quot;+str(mac_2)+&quot; &quot;+str(mpa_2)+&quot; &quot;+str(mta_2)+&quot; &quot;+str(mxa_2)+&quot; &quot;+str(mpb_2)+&quot; &quot;+str(mxb_2)+&quot; &quot;+str(mpc_2)+&quot; &quot;+str(mtc_2)+&quot; &quot;+str(mxc_2)+&quot; &quot;+str(bnda_2)+&quot; &quot;+str(bndb_2)+&quot; &quot;+str(bndc_2)+&quot; &quot;+str(bndt_2)+&quot; &quot;+str(bndu_2)+&quot; &quot;+str(bndv_2)+&quot; \n&quot;
            notetime_2 = notetime_2 + subeat_2                      # increment notetime by subeat time value
    i_2 = i_2 + 1
    c_2 = 0
score = scoreText_2
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>25.0</startTime>
          <name>Ringer_2c</name>
          <backgroundColor>-10092442</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_2 - 3h13TET
scoreText_2 = &quot;&quot;                              	# scoreText_2 is cleared
bart_2 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_2 = [&apos;-&apos;,&apos;e&apos;,&apos;-&apos;,&apos;-&apos;,&apos;-&apos;]			# rhythm
bpb_2 = len(rhythmr0_2)                         # beats per bar
beat_2 = bart_2/bpb_2                           # time of beat in seconds
notetime_2 = 0                                  # set intitial note start time
durlist_2 = [2.66]			# note duration list
notelist_2 = [50]				# note list
splist_2 = [1]				# subpatch list
panalist_2 = [-.1]			# pana list
panblist_2 = [.1]			# panb list
nvatlist_2 = [1]			# nvat list
nvaclist_2 = [.5]				# nvac list
nvpalist_2 = [1]				# nvpa list
nvtalist_2 = [.5]			# nvta list
nvxalist_2 = [0]			# nvxa list
nvpblist_2 = [.9]			# nvpb list
nvxblist_2 = [.5]			# nvxb list
nvpclist_2 = [.7]			# nvpc list
nvtclist_2 = [1]			# nvtc list
nvxclist_2 = [1.5]			# nvxc list
matlist_2 = [1]		# mat list
maclist_2 = [0]			# mac list
mpalist_2 = [.5]			# mpa list
mtalist_2 = [.5]		# mta list
mxalist_2 = [.5]			# mxa list
mpblist_2 = [.5]			# mpb list
mxblist_2 = [.5]			# mxb list
mpclist_2 = [.3]		# mpc list
mtclist_2 = [1]			# mtc list
mxclist_2 = [1.5]			# mxc list
bndalist_2 = [1]			# bnda list
bndblist_2 = [1]			# bndb list
bndclist_2 = [1]			# bndc list
bndtlist_2 = [.5]			# bndt list
bndulist_2 = [.5]			# bndu list
bndvlist_2 = [.5]			# bndv list
i_2 = 0						# loop iteration counter
c_2 = 0						# note iteration counter
while i_2 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_2 in range(bpb_2) :                           # loop through the items in the rhythm list
        sb_2 = rhythmr0_2[a_2]                          # sb is current item in the rhythm list
        subeat_2 = beat_2/len(sb_2)                     # subeat is the number of sub-beats in the beat
        for b_2 in range(len(sb_2)) :                   # loop through the items in the beat string
            if sb_2[b_2].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_2[b_2])                   # get ascii number of the character
                if sb_2[b_2].isdigit() :                # check if character is numeric
                    amp_2 = (asky-47)                   # assign amplitude
                elif sb_2[b_2].isupper() :              # check if character is uppercase
                    amp_2 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_2 = (asky-60)                   # assign amplitude
            elif sb_2[b_2] == &apos;-&apos; : amp_2 = 0           # character for amp = 0                         
            elif sb_2[b_2] == &apos;&gt;&apos; : amp_2 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_2 = blueDuration + 1           # set notetime_2 &gt; blueduration
                scoreText_2 = &apos;&apos;                        # clear scoreText_2
            if notetime_2 &gt;= blueDuration : break       # break out of the loop
	    if amp_2 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_2 = durlist_2[c_2]			# get duration from durlist
		amp_2 = amp_2-62			# move amp value to correct dbfs range (max=1)
		note_2 = notelist_2[c_2]		# get note from notelist
	        sp_2 = splist_2[c_2]			# get subpatch from splist
		pana_2 = panalist_2[c_2]		# get pana from panalist
		panb_2 = panblist_2[c_2]		# get panb from panblist
		nvat_2 = nvatlist_2[c_2]		# get nvat from nvatlist
		nvac_2 = nvaclist_2[c_2]		# get nvac from nvatlist
		nvpa_2 = nvpalist_2[c_2]		# get nvpa from nvpalist
		nvta_2 = nvtalist_2[c_2]		# get nvta from nvtalist
		nvxa_2 = nvxalist_2[c_2]		# get nvxa from nvxalist
		nvpb_2 = nvpblist_2[c_2]		# get nvpb from nvpblist
		nvxb_2 = nvxblist_2[c_2]		# get nvxb from nvxblist
		nvpc_2 = nvpclist_2[c_2]		# get nvpc from nvpclist
		nvtc_2 = nvtclist_2[c_2]		# get nvtc from nvtclist
		nvxc_2 = nvxclist_2[c_2]		# get nvxc from nvxclist
		mat_2 = matlist_2[c_2]			# get mat from matlist
		mac_2 = maclist_2[c_2]			# get mac from maclist
		mpa_2 = mpalist_2[c_2]			# get mpa from mpalist
		mta_2 = mtalist_2[c_2]			# get mta from mtalist
		mxa_2 = mxalist_2[c_2]			# get mxa from mxalist
		mpb_2 = mpblist_2[c_2]			# get mpb from mpblist
		mxb_2 = mxblist_2[c_2]			# get mxb from mxblist
		mpc_2 = mpclist_2[c_2]			# get mpc from mpclist
		mtc_2 = mtclist_2[c_2]			# get mtc from mtclist
		mxc_2 = mxclist_2[c_2]			# get mxc from mxclist
		bnda_2 = bndalist_2[c_2]		# get bnda from bndalist
		bndb_2 = bndblist_2[c_2]		# get bndb from bndblist
		bndc_2 = bndclist_2[c_2]		# get bndc from bndclist
		bndt_2 = bndtlist_2[c_2]		# get bndt from bndtlist		
		bndu_2 = bndulist_2[c_2]		# get bndu from bndulist		
		bndv_2 = bndvlist_2[c_2]		# get bndv from bndvlist		
                c_2 = c_2 + 1
                scoreText_2 += &quot;i1 &quot;+str(notetime_2)+&quot; &quot;+str(dur_2)+&quot; &quot;+str(amp_2)+&quot; &quot;+str(note_2)+&quot; &quot;+str(sp_2)+&quot; &quot;+str(pana_2)+&quot; &quot;+str(panb_2)+&quot; &quot;+str(nvat_2)+&quot; &quot;+str(nvac_2)+&quot; &quot;+str(nvpa_2)+&quot; &quot;+str(nvta_2)+&quot; &quot;+str(nvxa_2)+&quot; &quot;+str(nvpb_2)+&quot; &quot;+str(nvxb_2)+&quot; &quot;+str(nvpc_2)+&quot; &quot;+str(nvtc_2)+&quot; &quot;+str(nvxc_2)+&quot; &quot;+str(mat_2)+&quot; &quot;+str(mac_2)+&quot; &quot;+str(mpa_2)+&quot; &quot;+str(mta_2)+&quot; &quot;+str(mxa_2)+&quot; &quot;+str(mpb_2)+&quot; &quot;+str(mxb_2)+&quot; &quot;+str(mpc_2)+&quot; &quot;+str(mtc_2)+&quot; &quot;+str(mxc_2)+&quot; &quot;+str(bnda_2)+&quot; &quot;+str(bndb_2)+&quot; &quot;+str(bndc_2)+&quot; &quot;+str(bndt_2)+&quot; &quot;+str(bndu_2)+&quot; &quot;+str(bndv_2)+&quot; \n&quot;
            notetime_2 = notetime_2 + subeat_2                      # increment notetime by subeat time value
    i_2 = i_2 + 1
    c_2 = 0
score = scoreText_2
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>30.0</startTime>
          <name>Ringer_2d</name>
          <backgroundColor>-10092442</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_2 - 3h13TET
scoreText_2 = &quot;&quot;                              	# scoreText_2 is cleared
bart_2 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_2 = [&apos;-&apos;,&apos;e&apos;,&apos;-&apos;,&apos;-&apos;,&apos;-&apos;]			# rhythm
bpb_2 = len(rhythmr0_2)                         # beats per bar
beat_2 = bart_2/bpb_2                           # time of beat in seconds
notetime_2 = 0                                  # set intitial note start time
durlist_2 = [2.66]			# note duration list
notelist_2 = [49]				# note list
splist_2 = [1]				# subpatch list
panalist_2 = [-.1]			# pana list
panblist_2 = [.1]			# panb list
nvatlist_2 = [1]			# nvat list
nvaclist_2 = [.5]				# nvac list
nvpalist_2 = [1]				# nvpa list
nvtalist_2 = [.5]			# nvta list
nvxalist_2 = [0]			# nvxa list
nvpblist_2 = [.9]			# nvpb list
nvxblist_2 = [.5]			# nvxb list
nvpclist_2 = [.7]			# nvpc list
nvtclist_2 = [1]			# nvtc list
nvxclist_2 = [1.5]			# nvxc list
matlist_2 = [1]		# mat list
maclist_2 = [0]			# mac list
mpalist_2 = [.5]			# mpa list
mtalist_2 = [.5]		# mta list
mxalist_2 = [.5]			# mxa list
mpblist_2 = [.5]			# mpb list
mxblist_2 = [.5]			# mxb list
mpclist_2 = [.3]		# mpc list
mtclist_2 = [1]			# mtc list
mxclist_2 = [1.5]			# mxc list
bndalist_2 = [1]			# bnda list
bndblist_2 = [1]			# bndb list
bndclist_2 = [1]			# bndc list
bndtlist_2 = [.5]			# bndt list
bndulist_2 = [.5]			# bndu list
bndvlist_2 = [.5]			# bndv list
i_2 = 0						# loop iteration counter
c_2 = 0						# note iteration counter
while i_2 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_2 in range(bpb_2) :                           # loop through the items in the rhythm list
        sb_2 = rhythmr0_2[a_2]                          # sb is current item in the rhythm list
        subeat_2 = beat_2/len(sb_2)                     # subeat is the number of sub-beats in the beat
        for b_2 in range(len(sb_2)) :                   # loop through the items in the beat string
            if sb_2[b_2].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_2[b_2])                   # get ascii number of the character
                if sb_2[b_2].isdigit() :                # check if character is numeric
                    amp_2 = (asky-47)                   # assign amplitude
                elif sb_2[b_2].isupper() :              # check if character is uppercase
                    amp_2 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_2 = (asky-60)                   # assign amplitude
            elif sb_2[b_2] == &apos;-&apos; : amp_2 = 0           # character for amp = 0                         
            elif sb_2[b_2] == &apos;&gt;&apos; : amp_2 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_2 = blueDuration + 1           # set notetime_2 &gt; blueduration
                scoreText_2 = &apos;&apos;                        # clear scoreText_2
            if notetime_2 &gt;= blueDuration : break       # break out of the loop
	    if amp_2 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_2 = durlist_2[c_2]			# get duration from durlist
		amp_2 = amp_2-62			# move amp value to correct dbfs range (max=1)
		note_2 = notelist_2[c_2]		# get note from notelist
	        sp_2 = splist_2[c_2]			# get subpatch from splist
		pana_2 = panalist_2[c_2]		# get pana from panalist
		panb_2 = panblist_2[c_2]		# get panb from panblist
		nvat_2 = nvatlist_2[c_2]		# get nvat from nvatlist
		nvac_2 = nvaclist_2[c_2]		# get nvac from nvatlist
		nvpa_2 = nvpalist_2[c_2]		# get nvpa from nvpalist
		nvta_2 = nvtalist_2[c_2]		# get nvta from nvtalist
		nvxa_2 = nvxalist_2[c_2]		# get nvxa from nvxalist
		nvpb_2 = nvpblist_2[c_2]		# get nvpb from nvpblist
		nvxb_2 = nvxblist_2[c_2]		# get nvxb from nvxblist
		nvpc_2 = nvpclist_2[c_2]		# get nvpc from nvpclist
		nvtc_2 = nvtclist_2[c_2]		# get nvtc from nvtclist
		nvxc_2 = nvxclist_2[c_2]		# get nvxc from nvxclist
		mat_2 = matlist_2[c_2]			# get mat from matlist
		mac_2 = maclist_2[c_2]			# get mac from maclist
		mpa_2 = mpalist_2[c_2]			# get mpa from mpalist
		mta_2 = mtalist_2[c_2]			# get mta from mtalist
		mxa_2 = mxalist_2[c_2]			# get mxa from mxalist
		mpb_2 = mpblist_2[c_2]			# get mpb from mpblist
		mxb_2 = mxblist_2[c_2]			# get mxb from mxblist
		mpc_2 = mpclist_2[c_2]			# get mpc from mpclist
		mtc_2 = mtclist_2[c_2]			# get mtc from mtclist
		mxc_2 = mxclist_2[c_2]			# get mxc from mxclist
		bnda_2 = bndalist_2[c_2]		# get bnda from bndalist
		bndb_2 = bndblist_2[c_2]		# get bndb from bndblist
		bndc_2 = bndclist_2[c_2]		# get bndc from bndclist
		bndt_2 = bndtlist_2[c_2]		# get bndt from bndtlist		
		bndu_2 = bndulist_2[c_2]		# get bndu from bndulist		
		bndv_2 = bndvlist_2[c_2]		# get bndv from bndvlist		
                c_2 = c_2 + 1
                scoreText_2 += &quot;i1 &quot;+str(notetime_2)+&quot; &quot;+str(dur_2)+&quot; &quot;+str(amp_2)+&quot; &quot;+str(note_2)+&quot; &quot;+str(sp_2)+&quot; &quot;+str(pana_2)+&quot; &quot;+str(panb_2)+&quot; &quot;+str(nvat_2)+&quot; &quot;+str(nvac_2)+&quot; &quot;+str(nvpa_2)+&quot; &quot;+str(nvta_2)+&quot; &quot;+str(nvxa_2)+&quot; &quot;+str(nvpb_2)+&quot; &quot;+str(nvxb_2)+&quot; &quot;+str(nvpc_2)+&quot; &quot;+str(nvtc_2)+&quot; &quot;+str(nvxc_2)+&quot; &quot;+str(mat_2)+&quot; &quot;+str(mac_2)+&quot; &quot;+str(mpa_2)+&quot; &quot;+str(mta_2)+&quot; &quot;+str(mxa_2)+&quot; &quot;+str(mpb_2)+&quot; &quot;+str(mxb_2)+&quot; &quot;+str(mpc_2)+&quot; &quot;+str(mtc_2)+&quot; &quot;+str(mxc_2)+&quot; &quot;+str(bnda_2)+&quot; &quot;+str(bndb_2)+&quot; &quot;+str(bndc_2)+&quot; &quot;+str(bndt_2)+&quot; &quot;+str(bndu_2)+&quot; &quot;+str(bndv_2)+&quot; \n&quot;
            notetime_2 = notetime_2 + subeat_2                      # increment notetime by subeat time value
    i_2 = i_2 + 1
    c_2 = 0
score = scoreText_2
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>35.0</startTime>
          <name>Ringer_2e</name>
          <backgroundColor>-10092442</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_2 - 3h13TET
scoreText_2 = &quot;&quot;                              	# scoreText_2 is cleared
bart_2 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_2 = [&apos;-&apos;,&apos;d&apos;,&apos;-&apos;,&apos;-&apos;,&apos;-&apos;]			# rhythm
bpb_2 = len(rhythmr0_2)                         # beats per bar
beat_2 = bart_2/bpb_2                           # time of beat in seconds
notetime_2 = 0                                  # set intitial note start time
durlist_2 = [2.66]			# note duration list
notelist_2 = [47]				# note list
splist_2 = [1]				# subpatch list
panalist_2 = [-.1]			# pana list
panblist_2 = [.1]			# panb list
nvatlist_2 = [1]			# nvat list
nvaclist_2 = [.5]				# nvac list
nvpalist_2 = [1]				# nvpa list
nvtalist_2 = [.5]			# nvta list
nvxalist_2 = [0]			# nvxa list
nvpblist_2 = [.9]			# nvpb list
nvxblist_2 = [.5]			# nvxb list
nvpclist_2 = [.7]			# nvpc list
nvtclist_2 = [1]			# nvtc list
nvxclist_2 = [1.5]			# nvxc list
matlist_2 = [1]		# mat list
maclist_2 = [0]			# mac list
mpalist_2 = [.5]			# mpa list
mtalist_2 = [.5]		# mta list
mxalist_2 = [.5]			# mxa list
mpblist_2 = [.5]			# mpb list
mxblist_2 = [.5]			# mxb list
mpclist_2 = [.3]		# mpc list
mtclist_2 = [1]			# mtc list
mxclist_2 = [1.5]			# mxc list
bndalist_2 = [1]			# bnda list
bndblist_2 = [1]			# bndb list
bndclist_2 = [1]			# bndc list
bndtlist_2 = [.5]			# bndt list
bndulist_2 = [.5]			# bndu list
bndvlist_2 = [.5]			# bndv list
i_2 = 0						# loop iteration counter
c_2 = 0						# note iteration counter
while i_2 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_2 in range(bpb_2) :                           # loop through the items in the rhythm list
        sb_2 = rhythmr0_2[a_2]                          # sb is current item in the rhythm list
        subeat_2 = beat_2/len(sb_2)                     # subeat is the number of sub-beats in the beat
        for b_2 in range(len(sb_2)) :                   # loop through the items in the beat string
            if sb_2[b_2].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_2[b_2])                   # get ascii number of the character
                if sb_2[b_2].isdigit() :                # check if character is numeric
                    amp_2 = (asky-47)                   # assign amplitude
                elif sb_2[b_2].isupper() :              # check if character is uppercase
                    amp_2 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_2 = (asky-60)                   # assign amplitude
            elif sb_2[b_2] == &apos;-&apos; : amp_2 = 0           # character for amp = 0                         
            elif sb_2[b_2] == &apos;&gt;&apos; : amp_2 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_2 = blueDuration + 1           # set notetime_2 &gt; blueduration
                scoreText_2 = &apos;&apos;                        # clear scoreText_2
            if notetime_2 &gt;= blueDuration : break       # break out of the loop
	    if amp_2 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_2 = durlist_2[c_2]			# get duration from durlist
		amp_2 = amp_2-62			# move amp value to correct dbfs range (max=1)
		note_2 = notelist_2[c_2]		# get note from notelist
	        sp_2 = splist_2[c_2]			# get subpatch from splist
		pana_2 = panalist_2[c_2]		# get pana from panalist
		panb_2 = panblist_2[c_2]		# get panb from panblist
		nvat_2 = nvatlist_2[c_2]		# get nvat from nvatlist
		nvac_2 = nvaclist_2[c_2]		# get nvac from nvatlist
		nvpa_2 = nvpalist_2[c_2]		# get nvpa from nvpalist
		nvta_2 = nvtalist_2[c_2]		# get nvta from nvtalist
		nvxa_2 = nvxalist_2[c_2]		# get nvxa from nvxalist
		nvpb_2 = nvpblist_2[c_2]		# get nvpb from nvpblist
		nvxb_2 = nvxblist_2[c_2]		# get nvxb from nvxblist
		nvpc_2 = nvpclist_2[c_2]		# get nvpc from nvpclist
		nvtc_2 = nvtclist_2[c_2]		# get nvtc from nvtclist
		nvxc_2 = nvxclist_2[c_2]		# get nvxc from nvxclist
		mat_2 = matlist_2[c_2]			# get mat from matlist
		mac_2 = maclist_2[c_2]			# get mac from maclist
		mpa_2 = mpalist_2[c_2]			# get mpa from mpalist
		mta_2 = mtalist_2[c_2]			# get mta from mtalist
		mxa_2 = mxalist_2[c_2]			# get mxa from mxalist
		mpb_2 = mpblist_2[c_2]			# get mpb from mpblist
		mxb_2 = mxblist_2[c_2]			# get mxb from mxblist
		mpc_2 = mpclist_2[c_2]			# get mpc from mpclist
		mtc_2 = mtclist_2[c_2]			# get mtc from mtclist
		mxc_2 = mxclist_2[c_2]			# get mxc from mxclist
		bnda_2 = bndalist_2[c_2]		# get bnda from bndalist
		bndb_2 = bndblist_2[c_2]		# get bndb from bndblist
		bndc_2 = bndclist_2[c_2]		# get bndc from bndclist
		bndt_2 = bndtlist_2[c_2]		# get bndt from bndtlist		
		bndu_2 = bndulist_2[c_2]		# get bndu from bndulist		
		bndv_2 = bndvlist_2[c_2]		# get bndv from bndvlist		
                c_2 = c_2 + 1
                scoreText_2 += &quot;i1 &quot;+str(notetime_2)+&quot; &quot;+str(dur_2)+&quot; &quot;+str(amp_2)+&quot; &quot;+str(note_2)+&quot; &quot;+str(sp_2)+&quot; &quot;+str(pana_2)+&quot; &quot;+str(panb_2)+&quot; &quot;+str(nvat_2)+&quot; &quot;+str(nvac_2)+&quot; &quot;+str(nvpa_2)+&quot; &quot;+str(nvta_2)+&quot; &quot;+str(nvxa_2)+&quot; &quot;+str(nvpb_2)+&quot; &quot;+str(nvxb_2)+&quot; &quot;+str(nvpc_2)+&quot; &quot;+str(nvtc_2)+&quot; &quot;+str(nvxc_2)+&quot; &quot;+str(mat_2)+&quot; &quot;+str(mac_2)+&quot; &quot;+str(mpa_2)+&quot; &quot;+str(mta_2)+&quot; &quot;+str(mxa_2)+&quot; &quot;+str(mpb_2)+&quot; &quot;+str(mxb_2)+&quot; &quot;+str(mpc_2)+&quot; &quot;+str(mtc_2)+&quot; &quot;+str(mxc_2)+&quot; &quot;+str(bnda_2)+&quot; &quot;+str(bndb_2)+&quot; &quot;+str(bndc_2)+&quot; &quot;+str(bndt_2)+&quot; &quot;+str(bndu_2)+&quot; &quot;+str(bndv_2)+&quot; \n&quot;
            notetime_2 = notetime_2 + subeat_2                      # increment notetime by subeat time value
    i_2 = i_2 + 1
    c_2 = 0
score = scoreText_2
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>40.0</startTime>
          <name>Ringer_2a</name>
          <backgroundColor>-10092442</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_2 - 3h13TET
scoreText_2 = &quot;&quot;                              	# scoreText_2 is cleared
bart_2 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_2 = [&apos;-&apos;,&apos;e&apos;,&apos;-&apos;,&apos;-&apos;,&apos;-&apos;]			# rhythm
bpb_2 = len(rhythmr0_2)                         # beats per bar
beat_2 = bart_2/bpb_2                           # time of beat in seconds
notetime_2 = 0                                  # set intitial note start time
durlist_2 = [2.66]			# note duration list
notelist_2 = [50]				# note list
splist_2 = [1]				# subpatch list
panalist_2 = [-.1]			# pana list
panblist_2 = [.1]			# panb list
nvatlist_2 = [1]			# nvat list
nvaclist_2 = [.5]				# nvac list
nvpalist_2 = [1]				# nvpa list
nvtalist_2 = [.5]			# nvta list
nvxalist_2 = [0]			# nvxa list
nvpblist_2 = [.9]			# nvpb list
nvxblist_2 = [.5]			# nvxb list
nvpclist_2 = [.7]			# nvpc list
nvtclist_2 = [1]			# nvtc list
nvxclist_2 = [1.5]			# nvxc list
matlist_2 = [1]		# mat list
maclist_2 = [0]			# mac list
mpalist_2 = [.5]			# mpa list
mtalist_2 = [.5]		# mta list
mxalist_2 = [.5]			# mxa list
mpblist_2 = [.5]			# mpb list
mxblist_2 = [.5]			# mxb list
mpclist_2 = [.3]		# mpc list
mtclist_2 = [1]			# mtc list
mxclist_2 = [1.5]			# mxc list
bndalist_2 = [1]			# bnda list
bndblist_2 = [1]			# bndb list
bndclist_2 = [1]			# bndc list
bndtlist_2 = [.5]			# bndt list
bndulist_2 = [.5]			# bndu list
bndvlist_2 = [.5]			# bndv list
i_2 = 0						# loop iteration counter
c_2 = 0						# note iteration counter
while i_2 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_2 in range(bpb_2) :                           # loop through the items in the rhythm list
        sb_2 = rhythmr0_2[a_2]                          # sb is current item in the rhythm list
        subeat_2 = beat_2/len(sb_2)                     # subeat is the number of sub-beats in the beat
        for b_2 in range(len(sb_2)) :                   # loop through the items in the beat string
            if sb_2[b_2].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_2[b_2])                   # get ascii number of the character
                if sb_2[b_2].isdigit() :                # check if character is numeric
                    amp_2 = (asky-47)                   # assign amplitude
                elif sb_2[b_2].isupper() :              # check if character is uppercase
                    amp_2 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_2 = (asky-60)                   # assign amplitude
            elif sb_2[b_2] == &apos;-&apos; : amp_2 = 0           # character for amp = 0                         
            elif sb_2[b_2] == &apos;&gt;&apos; : amp_2 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_2 = blueDuration + 1           # set notetime_2 &gt; blueduration
                scoreText_2 = &apos;&apos;                        # clear scoreText_2
            if notetime_2 &gt;= blueDuration : break       # break out of the loop
	    if amp_2 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_2 = durlist_2[c_2]			# get duration from durlist
		amp_2 = amp_2-62			# move amp value to correct dbfs range (max=1)
		note_2 = notelist_2[c_2]		# get note from notelist
	        sp_2 = splist_2[c_2]			# get subpatch from splist
		pana_2 = panalist_2[c_2]		# get pana from panalist
		panb_2 = panblist_2[c_2]		# get panb from panblist
		nvat_2 = nvatlist_2[c_2]		# get nvat from nvatlist
		nvac_2 = nvaclist_2[c_2]		# get nvac from nvatlist
		nvpa_2 = nvpalist_2[c_2]		# get nvpa from nvpalist
		nvta_2 = nvtalist_2[c_2]		# get nvta from nvtalist
		nvxa_2 = nvxalist_2[c_2]		# get nvxa from nvxalist
		nvpb_2 = nvpblist_2[c_2]		# get nvpb from nvpblist
		nvxb_2 = nvxblist_2[c_2]		# get nvxb from nvxblist
		nvpc_2 = nvpclist_2[c_2]		# get nvpc from nvpclist
		nvtc_2 = nvtclist_2[c_2]		# get nvtc from nvtclist
		nvxc_2 = nvxclist_2[c_2]		# get nvxc from nvxclist
		mat_2 = matlist_2[c_2]			# get mat from matlist
		mac_2 = maclist_2[c_2]			# get mac from maclist
		mpa_2 = mpalist_2[c_2]			# get mpa from mpalist
		mta_2 = mtalist_2[c_2]			# get mta from mtalist
		mxa_2 = mxalist_2[c_2]			# get mxa from mxalist
		mpb_2 = mpblist_2[c_2]			# get mpb from mpblist
		mxb_2 = mxblist_2[c_2]			# get mxb from mxblist
		mpc_2 = mpclist_2[c_2]			# get mpc from mpclist
		mtc_2 = mtclist_2[c_2]			# get mtc from mtclist
		mxc_2 = mxclist_2[c_2]			# get mxc from mxclist
		bnda_2 = bndalist_2[c_2]		# get bnda from bndalist
		bndb_2 = bndblist_2[c_2]		# get bndb from bndblist
		bndc_2 = bndclist_2[c_2]		# get bndc from bndclist
		bndt_2 = bndtlist_2[c_2]		# get bndt from bndtlist		
		bndu_2 = bndulist_2[c_2]		# get bndu from bndulist		
		bndv_2 = bndvlist_2[c_2]		# get bndv from bndvlist		
                c_2 = c_2 + 1
                scoreText_2 += &quot;i1 &quot;+str(notetime_2)+&quot; &quot;+str(dur_2)+&quot; &quot;+str(amp_2)+&quot; &quot;+str(note_2)+&quot; &quot;+str(sp_2)+&quot; &quot;+str(pana_2)+&quot; &quot;+str(panb_2)+&quot; &quot;+str(nvat_2)+&quot; &quot;+str(nvac_2)+&quot; &quot;+str(nvpa_2)+&quot; &quot;+str(nvta_2)+&quot; &quot;+str(nvxa_2)+&quot; &quot;+str(nvpb_2)+&quot; &quot;+str(nvxb_2)+&quot; &quot;+str(nvpc_2)+&quot; &quot;+str(nvtc_2)+&quot; &quot;+str(nvxc_2)+&quot; &quot;+str(mat_2)+&quot; &quot;+str(mac_2)+&quot; &quot;+str(mpa_2)+&quot; &quot;+str(mta_2)+&quot; &quot;+str(mxa_2)+&quot; &quot;+str(mpb_2)+&quot; &quot;+str(mxb_2)+&quot; &quot;+str(mpc_2)+&quot; &quot;+str(mtc_2)+&quot; &quot;+str(mxc_2)+&quot; &quot;+str(bnda_2)+&quot; &quot;+str(bndb_2)+&quot; &quot;+str(bndc_2)+&quot; &quot;+str(bndt_2)+&quot; &quot;+str(bndu_2)+&quot; &quot;+str(bndv_2)+&quot; \n&quot;
            notetime_2 = notetime_2 + subeat_2                      # increment notetime by subeat time value
    i_2 = i_2 + 1
    c_2 = 0
score = scoreText_2
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>45.0</startTime>
          <name>Ringer_2b</name>
          <backgroundColor>-10092442</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_2 - 3h13TET
scoreText_2 = &quot;&quot;                              	# scoreText_2 is cleared
bart_2 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_2 = [&apos;-&apos;,&apos;e&apos;,&apos;-&apos;,&apos;-&apos;,&apos;-&apos;]			# rhythm
bpb_2 = len(rhythmr0_2)                         # beats per bar
beat_2 = bart_2/bpb_2                           # time of beat in seconds
notetime_2 = 0                                  # set intitial note start time
durlist_2 = [2.66]			# note duration list
notelist_2 = [49]				# note list
splist_2 = [1]				# subpatch list
panalist_2 = [-.1]			# pana list
panblist_2 = [.1]			# panb list
nvatlist_2 = [1]			# nvat list
nvaclist_2 = [.5]				# nvac list
nvpalist_2 = [1]				# nvpa list
nvtalist_2 = [.5]			# nvta list
nvxalist_2 = [0]			# nvxa list
nvpblist_2 = [.9]			# nvpb list
nvxblist_2 = [.5]			# nvxb list
nvpclist_2 = [.7]			# nvpc list
nvtclist_2 = [1]			# nvtc list
nvxclist_2 = [1.5]			# nvxc list
matlist_2 = [1]		# mat list
maclist_2 = [0]			# mac list
mpalist_2 = [.5]			# mpa list
mtalist_2 = [.5]		# mta list
mxalist_2 = [.5]			# mxa list
mpblist_2 = [.5]			# mpb list
mxblist_2 = [.5]			# mxb list
mpclist_2 = [.3]		# mpc list
mtclist_2 = [1]			# mtc list
mxclist_2 = [1.5]			# mxc list
bndalist_2 = [1]			# bnda list
bndblist_2 = [1]			# bndb list
bndclist_2 = [1]			# bndc list
bndtlist_2 = [.5]			# bndt list
bndulist_2 = [.5]			# bndu list
bndvlist_2 = [.5]			# bndv list
i_2 = 0						# loop iteration counter
c_2 = 0						# note iteration counter
while i_2 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_2 in range(bpb_2) :                           # loop through the items in the rhythm list
        sb_2 = rhythmr0_2[a_2]                          # sb is current item in the rhythm list
        subeat_2 = beat_2/len(sb_2)                     # subeat is the number of sub-beats in the beat
        for b_2 in range(len(sb_2)) :                   # loop through the items in the beat string
            if sb_2[b_2].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_2[b_2])                   # get ascii number of the character
                if sb_2[b_2].isdigit() :                # check if character is numeric
                    amp_2 = (asky-47)                   # assign amplitude
                elif sb_2[b_2].isupper() :              # check if character is uppercase
                    amp_2 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_2 = (asky-60)                   # assign amplitude
            elif sb_2[b_2] == &apos;-&apos; : amp_2 = 0           # character for amp = 0                         
            elif sb_2[b_2] == &apos;&gt;&apos; : amp_2 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_2 = blueDuration + 1           # set notetime_2 &gt; blueduration
                scoreText_2 = &apos;&apos;                        # clear scoreText_2
            if notetime_2 &gt;= blueDuration : break       # break out of the loop
	    if amp_2 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_2 = durlist_2[c_2]			# get duration from durlist
		amp_2 = amp_2-62			# move amp value to correct dbfs range (max=1)
		note_2 = notelist_2[c_2]		# get note from notelist
	        sp_2 = splist_2[c_2]			# get subpatch from splist
		pana_2 = panalist_2[c_2]		# get pana from panalist
		panb_2 = panblist_2[c_2]		# get panb from panblist
		nvat_2 = nvatlist_2[c_2]		# get nvat from nvatlist
		nvac_2 = nvaclist_2[c_2]		# get nvac from nvatlist
		nvpa_2 = nvpalist_2[c_2]		# get nvpa from nvpalist
		nvta_2 = nvtalist_2[c_2]		# get nvta from nvtalist
		nvxa_2 = nvxalist_2[c_2]		# get nvxa from nvxalist
		nvpb_2 = nvpblist_2[c_2]		# get nvpb from nvpblist
		nvxb_2 = nvxblist_2[c_2]		# get nvxb from nvxblist
		nvpc_2 = nvpclist_2[c_2]		# get nvpc from nvpclist
		nvtc_2 = nvtclist_2[c_2]		# get nvtc from nvtclist
		nvxc_2 = nvxclist_2[c_2]		# get nvxc from nvxclist
		mat_2 = matlist_2[c_2]			# get mat from matlist
		mac_2 = maclist_2[c_2]			# get mac from maclist
		mpa_2 = mpalist_2[c_2]			# get mpa from mpalist
		mta_2 = mtalist_2[c_2]			# get mta from mtalist
		mxa_2 = mxalist_2[c_2]			# get mxa from mxalist
		mpb_2 = mpblist_2[c_2]			# get mpb from mpblist
		mxb_2 = mxblist_2[c_2]			# get mxb from mxblist
		mpc_2 = mpclist_2[c_2]			# get mpc from mpclist
		mtc_2 = mtclist_2[c_2]			# get mtc from mtclist
		mxc_2 = mxclist_2[c_2]			# get mxc from mxclist
		bnda_2 = bndalist_2[c_2]		# get bnda from bndalist
		bndb_2 = bndblist_2[c_2]		# get bndb from bndblist
		bndc_2 = bndclist_2[c_2]		# get bndc from bndclist
		bndt_2 = bndtlist_2[c_2]		# get bndt from bndtlist		
		bndu_2 = bndulist_2[c_2]		# get bndu from bndulist		
		bndv_2 = bndvlist_2[c_2]		# get bndv from bndvlist		
                c_2 = c_2 + 1
                scoreText_2 += &quot;i1 &quot;+str(notetime_2)+&quot; &quot;+str(dur_2)+&quot; &quot;+str(amp_2)+&quot; &quot;+str(note_2)+&quot; &quot;+str(sp_2)+&quot; &quot;+str(pana_2)+&quot; &quot;+str(panb_2)+&quot; &quot;+str(nvat_2)+&quot; &quot;+str(nvac_2)+&quot; &quot;+str(nvpa_2)+&quot; &quot;+str(nvta_2)+&quot; &quot;+str(nvxa_2)+&quot; &quot;+str(nvpb_2)+&quot; &quot;+str(nvxb_2)+&quot; &quot;+str(nvpc_2)+&quot; &quot;+str(nvtc_2)+&quot; &quot;+str(nvxc_2)+&quot; &quot;+str(mat_2)+&quot; &quot;+str(mac_2)+&quot; &quot;+str(mpa_2)+&quot; &quot;+str(mta_2)+&quot; &quot;+str(mxa_2)+&quot; &quot;+str(mpb_2)+&quot; &quot;+str(mxb_2)+&quot; &quot;+str(mpc_2)+&quot; &quot;+str(mtc_2)+&quot; &quot;+str(mxc_2)+&quot; &quot;+str(bnda_2)+&quot; &quot;+str(bndb_2)+&quot; &quot;+str(bndc_2)+&quot; &quot;+str(bndt_2)+&quot; &quot;+str(bndu_2)+&quot; &quot;+str(bndv_2)+&quot; \n&quot;
            notetime_2 = notetime_2 + subeat_2                      # increment notetime by subeat time value
    i_2 = i_2 + 1
    c_2 = 0
score = scoreText_2
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>50.0</startTime>
          <name>Ringer_2c</name>
          <backgroundColor>-10092442</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_2 - 3h13TET
scoreText_2 = &quot;&quot;                              	# scoreText_2 is cleared
bart_2 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_2 = [&apos;-&apos;,&apos;e&apos;,&apos;-&apos;,&apos;-&apos;,&apos;-&apos;]			# rhythm
bpb_2 = len(rhythmr0_2)                         # beats per bar
beat_2 = bart_2/bpb_2                           # time of beat in seconds
notetime_2 = 0                                  # set intitial note start time
durlist_2 = [2.66]			# note duration list
notelist_2 = [50]				# note list
splist_2 = [1]				# subpatch list
panalist_2 = [-.1]			# pana list
panblist_2 = [.1]			# panb list
nvatlist_2 = [1]			# nvat list
nvaclist_2 = [.5]				# nvac list
nvpalist_2 = [1]				# nvpa list
nvtalist_2 = [.5]			# nvta list
nvxalist_2 = [0]			# nvxa list
nvpblist_2 = [.9]			# nvpb list
nvxblist_2 = [.5]			# nvxb list
nvpclist_2 = [.7]			# nvpc list
nvtclist_2 = [1]			# nvtc list
nvxclist_2 = [1.5]			# nvxc list
matlist_2 = [1]		# mat list
maclist_2 = [0]			# mac list
mpalist_2 = [.5]			# mpa list
mtalist_2 = [.5]		# mta list
mxalist_2 = [.5]			# mxa list
mpblist_2 = [.5]			# mpb list
mxblist_2 = [.5]			# mxb list
mpclist_2 = [.3]		# mpc list
mtclist_2 = [1]			# mtc list
mxclist_2 = [1.5]			# mxc list
bndalist_2 = [1]			# bnda list
bndblist_2 = [1]			# bndb list
bndclist_2 = [1]			# bndc list
bndtlist_2 = [.5]			# bndt list
bndulist_2 = [.5]			# bndu list
bndvlist_2 = [.5]			# bndv list
i_2 = 0						# loop iteration counter
c_2 = 0						# note iteration counter
while i_2 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_2 in range(bpb_2) :                           # loop through the items in the rhythm list
        sb_2 = rhythmr0_2[a_2]                          # sb is current item in the rhythm list
        subeat_2 = beat_2/len(sb_2)                     # subeat is the number of sub-beats in the beat
        for b_2 in range(len(sb_2)) :                   # loop through the items in the beat string
            if sb_2[b_2].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_2[b_2])                   # get ascii number of the character
                if sb_2[b_2].isdigit() :                # check if character is numeric
                    amp_2 = (asky-47)                   # assign amplitude
                elif sb_2[b_2].isupper() :              # check if character is uppercase
                    amp_2 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_2 = (asky-60)                   # assign amplitude
            elif sb_2[b_2] == &apos;-&apos; : amp_2 = 0           # character for amp = 0                         
            elif sb_2[b_2] == &apos;&gt;&apos; : amp_2 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_2 = blueDuration + 1           # set notetime_2 &gt; blueduration
                scoreText_2 = &apos;&apos;                        # clear scoreText_2
            if notetime_2 &gt;= blueDuration : break       # break out of the loop
	    if amp_2 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_2 = durlist_2[c_2]			# get duration from durlist
		amp_2 = amp_2-62			# move amp value to correct dbfs range (max=1)
		note_2 = notelist_2[c_2]		# get note from notelist
	        sp_2 = splist_2[c_2]			# get subpatch from splist
		pana_2 = panalist_2[c_2]		# get pana from panalist
		panb_2 = panblist_2[c_2]		# get panb from panblist
		nvat_2 = nvatlist_2[c_2]		# get nvat from nvatlist
		nvac_2 = nvaclist_2[c_2]		# get nvac from nvatlist
		nvpa_2 = nvpalist_2[c_2]		# get nvpa from nvpalist
		nvta_2 = nvtalist_2[c_2]		# get nvta from nvtalist
		nvxa_2 = nvxalist_2[c_2]		# get nvxa from nvxalist
		nvpb_2 = nvpblist_2[c_2]		# get nvpb from nvpblist
		nvxb_2 = nvxblist_2[c_2]		# get nvxb from nvxblist
		nvpc_2 = nvpclist_2[c_2]		# get nvpc from nvpclist
		nvtc_2 = nvtclist_2[c_2]		# get nvtc from nvtclist
		nvxc_2 = nvxclist_2[c_2]		# get nvxc from nvxclist
		mat_2 = matlist_2[c_2]			# get mat from matlist
		mac_2 = maclist_2[c_2]			# get mac from maclist
		mpa_2 = mpalist_2[c_2]			# get mpa from mpalist
		mta_2 = mtalist_2[c_2]			# get mta from mtalist
		mxa_2 = mxalist_2[c_2]			# get mxa from mxalist
		mpb_2 = mpblist_2[c_2]			# get mpb from mpblist
		mxb_2 = mxblist_2[c_2]			# get mxb from mxblist
		mpc_2 = mpclist_2[c_2]			# get mpc from mpclist
		mtc_2 = mtclist_2[c_2]			# get mtc from mtclist
		mxc_2 = mxclist_2[c_2]			# get mxc from mxclist
		bnda_2 = bndalist_2[c_2]		# get bnda from bndalist
		bndb_2 = bndblist_2[c_2]		# get bndb from bndblist
		bndc_2 = bndclist_2[c_2]		# get bndc from bndclist
		bndt_2 = bndtlist_2[c_2]		# get bndt from bndtlist		
		bndu_2 = bndulist_2[c_2]		# get bndu from bndulist		
		bndv_2 = bndvlist_2[c_2]		# get bndv from bndvlist		
                c_2 = c_2 + 1
                scoreText_2 += &quot;i1 &quot;+str(notetime_2)+&quot; &quot;+str(dur_2)+&quot; &quot;+str(amp_2)+&quot; &quot;+str(note_2)+&quot; &quot;+str(sp_2)+&quot; &quot;+str(pana_2)+&quot; &quot;+str(panb_2)+&quot; &quot;+str(nvat_2)+&quot; &quot;+str(nvac_2)+&quot; &quot;+str(nvpa_2)+&quot; &quot;+str(nvta_2)+&quot; &quot;+str(nvxa_2)+&quot; &quot;+str(nvpb_2)+&quot; &quot;+str(nvxb_2)+&quot; &quot;+str(nvpc_2)+&quot; &quot;+str(nvtc_2)+&quot; &quot;+str(nvxc_2)+&quot; &quot;+str(mat_2)+&quot; &quot;+str(mac_2)+&quot; &quot;+str(mpa_2)+&quot; &quot;+str(mta_2)+&quot; &quot;+str(mxa_2)+&quot; &quot;+str(mpb_2)+&quot; &quot;+str(mxb_2)+&quot; &quot;+str(mpc_2)+&quot; &quot;+str(mtc_2)+&quot; &quot;+str(mxc_2)+&quot; &quot;+str(bnda_2)+&quot; &quot;+str(bndb_2)+&quot; &quot;+str(bndc_2)+&quot; &quot;+str(bndt_2)+&quot; &quot;+str(bndu_2)+&quot; &quot;+str(bndv_2)+&quot; \n&quot;
            notetime_2 = notetime_2 + subeat_2                      # increment notetime by subeat time value
    i_2 = i_2 + 1
    c_2 = 0
score = scoreText_2
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>55.0</startTime>
          <name>Ringer_2d</name>
          <backgroundColor>-10092442</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_2 - 3h13TET
scoreText_2 = &quot;&quot;                              	# scoreText_2 is cleared
bart_2 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_2 = [&apos;-&apos;,&apos;e&apos;,&apos;-&apos;,&apos;-&apos;,&apos;-&apos;]			# rhythm
bpb_2 = len(rhythmr0_2)                         # beats per bar
beat_2 = bart_2/bpb_2                           # time of beat in seconds
notetime_2 = 0                                  # set intitial note start time
durlist_2 = [2.66]			# note duration list
notelist_2 = [49]				# note list
splist_2 = [1]				# subpatch list
panalist_2 = [-.1]			# pana list
panblist_2 = [.1]			# panb list
nvatlist_2 = [1]			# nvat list
nvaclist_2 = [.5]				# nvac list
nvpalist_2 = [1]				# nvpa list
nvtalist_2 = [.5]			# nvta list
nvxalist_2 = [0]			# nvxa list
nvpblist_2 = [.9]			# nvpb list
nvxblist_2 = [.5]			# nvxb list
nvpclist_2 = [.7]			# nvpc list
nvtclist_2 = [1]			# nvtc list
nvxclist_2 = [1.5]			# nvxc list
matlist_2 = [1]		# mat list
maclist_2 = [0]			# mac list
mpalist_2 = [.5]			# mpa list
mtalist_2 = [.5]		# mta list
mxalist_2 = [.5]			# mxa list
mpblist_2 = [.5]			# mpb list
mxblist_2 = [.5]			# mxb list
mpclist_2 = [.3]		# mpc list
mtclist_2 = [1]			# mtc list
mxclist_2 = [1.5]			# mxc list
bndalist_2 = [1]			# bnda list
bndblist_2 = [1]			# bndb list
bndclist_2 = [1]			# bndc list
bndtlist_2 = [.5]			# bndt list
bndulist_2 = [.5]			# bndu list
bndvlist_2 = [.5]			# bndv list
i_2 = 0						# loop iteration counter
c_2 = 0						# note iteration counter
while i_2 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_2 in range(bpb_2) :                           # loop through the items in the rhythm list
        sb_2 = rhythmr0_2[a_2]                          # sb is current item in the rhythm list
        subeat_2 = beat_2/len(sb_2)                     # subeat is the number of sub-beats in the beat
        for b_2 in range(len(sb_2)) :                   # loop through the items in the beat string
            if sb_2[b_2].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_2[b_2])                   # get ascii number of the character
                if sb_2[b_2].isdigit() :                # check if character is numeric
                    amp_2 = (asky-47)                   # assign amplitude
                elif sb_2[b_2].isupper() :              # check if character is uppercase
                    amp_2 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_2 = (asky-60)                   # assign amplitude
            elif sb_2[b_2] == &apos;-&apos; : amp_2 = 0           # character for amp = 0                         
            elif sb_2[b_2] == &apos;&gt;&apos; : amp_2 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_2 = blueDuration + 1           # set notetime_2 &gt; blueduration
                scoreText_2 = &apos;&apos;                        # clear scoreText_2
            if notetime_2 &gt;= blueDuration : break       # break out of the loop
	    if amp_2 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_2 = durlist_2[c_2]			# get duration from durlist
		amp_2 = amp_2-62			# move amp value to correct dbfs range (max=1)
		note_2 = notelist_2[c_2]		# get note from notelist
	        sp_2 = splist_2[c_2]			# get subpatch from splist
		pana_2 = panalist_2[c_2]		# get pana from panalist
		panb_2 = panblist_2[c_2]		# get panb from panblist
		nvat_2 = nvatlist_2[c_2]		# get nvat from nvatlist
		nvac_2 = nvaclist_2[c_2]		# get nvac from nvatlist
		nvpa_2 = nvpalist_2[c_2]		# get nvpa from nvpalist
		nvta_2 = nvtalist_2[c_2]		# get nvta from nvtalist
		nvxa_2 = nvxalist_2[c_2]		# get nvxa from nvxalist
		nvpb_2 = nvpblist_2[c_2]		# get nvpb from nvpblist
		nvxb_2 = nvxblist_2[c_2]		# get nvxb from nvxblist
		nvpc_2 = nvpclist_2[c_2]		# get nvpc from nvpclist
		nvtc_2 = nvtclist_2[c_2]		# get nvtc from nvtclist
		nvxc_2 = nvxclist_2[c_2]		# get nvxc from nvxclist
		mat_2 = matlist_2[c_2]			# get mat from matlist
		mac_2 = maclist_2[c_2]			# get mac from maclist
		mpa_2 = mpalist_2[c_2]			# get mpa from mpalist
		mta_2 = mtalist_2[c_2]			# get mta from mtalist
		mxa_2 = mxalist_2[c_2]			# get mxa from mxalist
		mpb_2 = mpblist_2[c_2]			# get mpb from mpblist
		mxb_2 = mxblist_2[c_2]			# get mxb from mxblist
		mpc_2 = mpclist_2[c_2]			# get mpc from mpclist
		mtc_2 = mtclist_2[c_2]			# get mtc from mtclist
		mxc_2 = mxclist_2[c_2]			# get mxc from mxclist
		bnda_2 = bndalist_2[c_2]		# get bnda from bndalist
		bndb_2 = bndblist_2[c_2]		# get bndb from bndblist
		bndc_2 = bndclist_2[c_2]		# get bndc from bndclist
		bndt_2 = bndtlist_2[c_2]		# get bndt from bndtlist		
		bndu_2 = bndulist_2[c_2]		# get bndu from bndulist		
		bndv_2 = bndvlist_2[c_2]		# get bndv from bndvlist		
                c_2 = c_2 + 1
                scoreText_2 += &quot;i1 &quot;+str(notetime_2)+&quot; &quot;+str(dur_2)+&quot; &quot;+str(amp_2)+&quot; &quot;+str(note_2)+&quot; &quot;+str(sp_2)+&quot; &quot;+str(pana_2)+&quot; &quot;+str(panb_2)+&quot; &quot;+str(nvat_2)+&quot; &quot;+str(nvac_2)+&quot; &quot;+str(nvpa_2)+&quot; &quot;+str(nvta_2)+&quot; &quot;+str(nvxa_2)+&quot; &quot;+str(nvpb_2)+&quot; &quot;+str(nvxb_2)+&quot; &quot;+str(nvpc_2)+&quot; &quot;+str(nvtc_2)+&quot; &quot;+str(nvxc_2)+&quot; &quot;+str(mat_2)+&quot; &quot;+str(mac_2)+&quot; &quot;+str(mpa_2)+&quot; &quot;+str(mta_2)+&quot; &quot;+str(mxa_2)+&quot; &quot;+str(mpb_2)+&quot; &quot;+str(mxb_2)+&quot; &quot;+str(mpc_2)+&quot; &quot;+str(mtc_2)+&quot; &quot;+str(mxc_2)+&quot; &quot;+str(bnda_2)+&quot; &quot;+str(bndb_2)+&quot; &quot;+str(bndc_2)+&quot; &quot;+str(bndt_2)+&quot; &quot;+str(bndu_2)+&quot; &quot;+str(bndv_2)+&quot; \n&quot;
            notetime_2 = notetime_2 + subeat_2                      # increment notetime by subeat time value
    i_2 = i_2 + 1
    c_2 = 0
score = scoreText_2
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>60.0</startTime>
          <name>Ringer_2f</name>
          <backgroundColor>-10092442</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_2 - 3h13TET
scoreText_2 = &quot;&quot;                              	# scoreText_2 is cleared
bart_2 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_2 = [&apos;-&apos;,&apos;d&apos;,&apos;-&apos;,&apos;-&apos;,&apos;-&apos;]			# rhythm
bpb_2 = len(rhythmr0_2)                         # beats per bar
beat_2 = bart_2/bpb_2                           # time of beat in seconds
notetime_2 = 0                                  # set intitial note start time
durlist_2 = [3.66]			# note duration list
notelist_2 = [47]				# note list
splist_2 = [1]				# subpatch list
panalist_2 = [-.1]			# pana list
panblist_2 = [.1]			# panb list
nvatlist_2 = [1]			# nvat list
nvaclist_2 = [.5]				# nvac list
nvpalist_2 = [1]				# nvpa list
nvtalist_2 = [.5]			# nvta list
nvxalist_2 = [0]			# nvxa list
nvpblist_2 = [.9]			# nvpb list
nvxblist_2 = [.5]			# nvxb list
nvpclist_2 = [.7]			# nvpc list
nvtclist_2 = [1]			# nvtc list
nvxclist_2 = [1.5]			# nvxc list
matlist_2 = [1]		# mat list
maclist_2 = [0]			# mac list
mpalist_2 = [.5]			# mpa list
mtalist_2 = [.5]		# mta list
mxalist_2 = [.5]			# mxa list
mpblist_2 = [.5]			# mpb list
mxblist_2 = [.5]			# mxb list
mpclist_2 = [.3]		# mpc list
mtclist_2 = [1]			# mtc list
mxclist_2 = [1.5]			# mxc list
bndalist_2 = [1]			# bnda list
bndblist_2 = [1]			# bndb list
bndclist_2 = [1]			# bndc list
bndtlist_2 = [.5]			# bndt list
bndulist_2 = [.5]			# bndu list
bndvlist_2 = [.5]			# bndv list
i_2 = 0						# loop iteration counter
c_2 = 0						# note iteration counter
while i_2 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_2 in range(bpb_2) :                           # loop through the items in the rhythm list
        sb_2 = rhythmr0_2[a_2]                          # sb is current item in the rhythm list
        subeat_2 = beat_2/len(sb_2)                     # subeat is the number of sub-beats in the beat
        for b_2 in range(len(sb_2)) :                   # loop through the items in the beat string
            if sb_2[b_2].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_2[b_2])                   # get ascii number of the character
                if sb_2[b_2].isdigit() :                # check if character is numeric
                    amp_2 = (asky-47)                   # assign amplitude
                elif sb_2[b_2].isupper() :              # check if character is uppercase
                    amp_2 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_2 = (asky-60)                   # assign amplitude
            elif sb_2[b_2] == &apos;-&apos; : amp_2 = 0           # character for amp = 0                         
            elif sb_2[b_2] == &apos;&gt;&apos; : amp_2 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_2 = blueDuration + 1           # set notetime_2 &gt; blueduration
                scoreText_2 = &apos;&apos;                        # clear scoreText_2
            if notetime_2 &gt;= blueDuration : break       # break out of the loop
	    if amp_2 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_2 = durlist_2[c_2]			# get duration from durlist
		amp_2 = amp_2-62			# move amp value to correct dbfs range (max=1)
		note_2 = notelist_2[c_2]		# get note from notelist
	        sp_2 = splist_2[c_2]			# get subpatch from splist
		pana_2 = panalist_2[c_2]		# get pana from panalist
		panb_2 = panblist_2[c_2]		# get panb from panblist
		nvat_2 = nvatlist_2[c_2]		# get nvat from nvatlist
		nvac_2 = nvaclist_2[c_2]		# get nvac from nvatlist
		nvpa_2 = nvpalist_2[c_2]		# get nvpa from nvpalist
		nvta_2 = nvtalist_2[c_2]		# get nvta from nvtalist
		nvxa_2 = nvxalist_2[c_2]		# get nvxa from nvxalist
		nvpb_2 = nvpblist_2[c_2]		# get nvpb from nvpblist
		nvxb_2 = nvxblist_2[c_2]		# get nvxb from nvxblist
		nvpc_2 = nvpclist_2[c_2]		# get nvpc from nvpclist
		nvtc_2 = nvtclist_2[c_2]		# get nvtc from nvtclist
		nvxc_2 = nvxclist_2[c_2]		# get nvxc from nvxclist
		mat_2 = matlist_2[c_2]			# get mat from matlist
		mac_2 = maclist_2[c_2]			# get mac from maclist
		mpa_2 = mpalist_2[c_2]			# get mpa from mpalist
		mta_2 = mtalist_2[c_2]			# get mta from mtalist
		mxa_2 = mxalist_2[c_2]			# get mxa from mxalist
		mpb_2 = mpblist_2[c_2]			# get mpb from mpblist
		mxb_2 = mxblist_2[c_2]			# get mxb from mxblist
		mpc_2 = mpclist_2[c_2]			# get mpc from mpclist
		mtc_2 = mtclist_2[c_2]			# get mtc from mtclist
		mxc_2 = mxclist_2[c_2]			# get mxc from mxclist
		bnda_2 = bndalist_2[c_2]		# get bnda from bndalist
		bndb_2 = bndblist_2[c_2]		# get bndb from bndblist
		bndc_2 = bndclist_2[c_2]		# get bndc from bndclist
		bndt_2 = bndtlist_2[c_2]		# get bndt from bndtlist		
		bndu_2 = bndulist_2[c_2]		# get bndu from bndulist		
		bndv_2 = bndvlist_2[c_2]		# get bndv from bndvlist		
                c_2 = c_2 + 1
                scoreText_2 += &quot;i1 &quot;+str(notetime_2)+&quot; &quot;+str(dur_2)+&quot; &quot;+str(amp_2)+&quot; &quot;+str(note_2)+&quot; &quot;+str(sp_2)+&quot; &quot;+str(pana_2)+&quot; &quot;+str(panb_2)+&quot; &quot;+str(nvat_2)+&quot; &quot;+str(nvac_2)+&quot; &quot;+str(nvpa_2)+&quot; &quot;+str(nvta_2)+&quot; &quot;+str(nvxa_2)+&quot; &quot;+str(nvpb_2)+&quot; &quot;+str(nvxb_2)+&quot; &quot;+str(nvpc_2)+&quot; &quot;+str(nvtc_2)+&quot; &quot;+str(nvxc_2)+&quot; &quot;+str(mat_2)+&quot; &quot;+str(mac_2)+&quot; &quot;+str(mpa_2)+&quot; &quot;+str(mta_2)+&quot; &quot;+str(mxa_2)+&quot; &quot;+str(mpb_2)+&quot; &quot;+str(mxb_2)+&quot; &quot;+str(mpc_2)+&quot; &quot;+str(mtc_2)+&quot; &quot;+str(mxc_2)+&quot; &quot;+str(bnda_2)+&quot; &quot;+str(bndb_2)+&quot; &quot;+str(bndc_2)+&quot; &quot;+str(bndt_2)+&quot; &quot;+str(bndu_2)+&quot; &quot;+str(bndv_2)+&quot; \n&quot;
            notetime_2 = notetime_2 + subeat_2                      # increment notetime by subeat time value
    i_2 = i_2 + 1
    c_2 = 0
score = scoreText_2
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>66.0</startTime>
          <name>Ringer_6a</name>
          <backgroundColor>-10092442</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_2 - 3h13TET
scoreText_2 = &quot;&quot;                              	# scoreText_2 is cleared
bart_2 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_2 = [&apos;-&apos;,&apos;g&apos;,&apos;-&apos;,&apos;-&apos;,&apos;-&apos;]			# rhythm
bpb_2 = len(rhythmr0_2)                         # beats per bar
beat_2 = bart_2/bpb_2                           # time of beat in seconds
notetime_2 = 0                                  # set intitial note start time
durlist_2 = [2.66]			# note duration list
notelist_2 = [48]				# note list
splist_2 = [3]				# subpatch list
panalist_2 = [-.1]			# pana list
panblist_2 = [.1]			# panb list
nvatlist_2 = [1]			# nvat list
nvaclist_2 = [.5]				# nvac list
nvpalist_2 = [1]				# nvpa list
nvtalist_2 = [.5]			# nvta list
nvxalist_2 = [0]			# nvxa list
nvpblist_2 = [.9]			# nvpb list
nvxblist_2 = [.5]			# nvxb list
nvpclist_2 = [.7]			# nvpc list
nvtclist_2 = [1]			# nvtc list
nvxclist_2 = [1.5]			# nvxc list
matlist_2 = [1]		# mat list
maclist_2 = [0]			# mac list
mpalist_2 = [.5]			# mpa list
mtalist_2 = [.5]		# mta list
mxalist_2 = [.5]			# mxa list
mpblist_2 = [.5]			# mpb list
mxblist_2 = [.5]			# mxb list
mpclist_2 = [.3]		# mpc list
mtclist_2 = [1]			# mtc list
mxclist_2 = [1.5]			# mxc list
bndalist_2 = [1]			# bnda list
bndblist_2 = [1]			# bndb list
bndclist_2 = [1]			# bndc list
bndtlist_2 = [.5]			# bndt list
bndulist_2 = [.5]			# bndu list
bndvlist_2 = [.5]			# bndv list
i_2 = 0						# loop iteration counter
c_2 = 0						# note iteration counter
while i_2 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_2 in range(bpb_2) :                           # loop through the items in the rhythm list
        sb_2 = rhythmr0_2[a_2]                          # sb is current item in the rhythm list
        subeat_2 = beat_2/len(sb_2)                     # subeat is the number of sub-beats in the beat
        for b_2 in range(len(sb_2)) :                   # loop through the items in the beat string
            if sb_2[b_2].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_2[b_2])                   # get ascii number of the character
                if sb_2[b_2].isdigit() :                # check if character is numeric
                    amp_2 = (asky-47)                   # assign amplitude
                elif sb_2[b_2].isupper() :              # check if character is uppercase
                    amp_2 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_2 = (asky-60)                   # assign amplitude
            elif sb_2[b_2] == &apos;-&apos; : amp_2 = 0           # character for amp = 0                         
            elif sb_2[b_2] == &apos;&gt;&apos; : amp_2 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_2 = blueDuration + 1           # set notetime_2 &gt; blueduration
                scoreText_2 = &apos;&apos;                        # clear scoreText_2
            if notetime_2 &gt;= blueDuration : break       # break out of the loop
	    if amp_2 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_2 = durlist_2[c_2]			# get duration from durlist
		amp_2 = amp_2-62			# move amp value to correct dbfs range (max=1)
		note_2 = notelist_2[c_2]		# get note from notelist
	        sp_2 = splist_2[c_2]			# get subpatch from splist
		pana_2 = panalist_2[c_2]		# get pana from panalist
		panb_2 = panblist_2[c_2]		# get panb from panblist
		nvat_2 = nvatlist_2[c_2]		# get nvat from nvatlist
		nvac_2 = nvaclist_2[c_2]		# get nvac from nvatlist
		nvpa_2 = nvpalist_2[c_2]		# get nvpa from nvpalist
		nvta_2 = nvtalist_2[c_2]		# get nvta from nvtalist
		nvxa_2 = nvxalist_2[c_2]		# get nvxa from nvxalist
		nvpb_2 = nvpblist_2[c_2]		# get nvpb from nvpblist
		nvxb_2 = nvxblist_2[c_2]		# get nvxb from nvxblist
		nvpc_2 = nvpclist_2[c_2]		# get nvpc from nvpclist
		nvtc_2 = nvtclist_2[c_2]		# get nvtc from nvtclist
		nvxc_2 = nvxclist_2[c_2]		# get nvxc from nvxclist
		mat_2 = matlist_2[c_2]			# get mat from matlist
		mac_2 = maclist_2[c_2]			# get mac from maclist
		mpa_2 = mpalist_2[c_2]			# get mpa from mpalist
		mta_2 = mtalist_2[c_2]			# get mta from mtalist
		mxa_2 = mxalist_2[c_2]			# get mxa from mxalist
		mpb_2 = mpblist_2[c_2]			# get mpb from mpblist
		mxb_2 = mxblist_2[c_2]			# get mxb from mxblist
		mpc_2 = mpclist_2[c_2]			# get mpc from mpclist
		mtc_2 = mtclist_2[c_2]			# get mtc from mtclist
		mxc_2 = mxclist_2[c_2]			# get mxc from mxclist
		bnda_2 = bndalist_2[c_2]		# get bnda from bndalist
		bndb_2 = bndblist_2[c_2]		# get bndb from bndblist
		bndc_2 = bndclist_2[c_2]		# get bndc from bndclist
		bndt_2 = bndtlist_2[c_2]		# get bndt from bndtlist		
		bndu_2 = bndulist_2[c_2]		# get bndu from bndulist		
		bndv_2 = bndvlist_2[c_2]		# get bndv from bndvlist		
                c_2 = c_2 + 1
                scoreText_2 += &quot;i1 &quot;+str(notetime_2)+&quot; &quot;+str(dur_2)+&quot; &quot;+str(amp_2)+&quot; &quot;+str(note_2)+&quot; &quot;+str(sp_2)+&quot; &quot;+str(pana_2)+&quot; &quot;+str(panb_2)+&quot; &quot;+str(nvat_2)+&quot; &quot;+str(nvac_2)+&quot; &quot;+str(nvpa_2)+&quot; &quot;+str(nvta_2)+&quot; &quot;+str(nvxa_2)+&quot; &quot;+str(nvpb_2)+&quot; &quot;+str(nvxb_2)+&quot; &quot;+str(nvpc_2)+&quot; &quot;+str(nvtc_2)+&quot; &quot;+str(nvxc_2)+&quot; &quot;+str(mat_2)+&quot; &quot;+str(mac_2)+&quot; &quot;+str(mpa_2)+&quot; &quot;+str(mta_2)+&quot; &quot;+str(mxa_2)+&quot; &quot;+str(mpb_2)+&quot; &quot;+str(mxb_2)+&quot; &quot;+str(mpc_2)+&quot; &quot;+str(mtc_2)+&quot; &quot;+str(mxc_2)+&quot; &quot;+str(bnda_2)+&quot; &quot;+str(bndb_2)+&quot; &quot;+str(bndc_2)+&quot; &quot;+str(bndt_2)+&quot; &quot;+str(bndu_2)+&quot; &quot;+str(bndv_2)+&quot; \n&quot;
            notetime_2 = notetime_2 + subeat_2                      # increment notetime by subeat time value
    i_2 = i_2 + 1
    c_2 = 0
score = scoreText_2
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>71.0</startTime>
          <name>Ringer_6b</name>
          <backgroundColor>-10092442</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_2 - 3h13TET
scoreText_2 = &quot;&quot;                              	# scoreText_2 is cleared
bart_2 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_2 = [&apos;-&apos;,&apos;e&apos;,&apos;-&apos;,&apos;-&apos;,&apos;-&apos;]			# rhythm
bpb_2 = len(rhythmr0_2)                         # beats per bar
beat_2 = bart_2/bpb_2                           # time of beat in seconds
notetime_2 = 0                                  # set intitial note start time
durlist_2 = [2.66]			# note duration list
notelist_2 = [47]				# note list
splist_2 = [3]				# subpatch list
panalist_2 = [-.1]			# pana list
panblist_2 = [.1]			# panb list
nvatlist_2 = [1]			# nvat list
nvaclist_2 = [.5]				# nvac list
nvpalist_2 = [1]				# nvpa list
nvtalist_2 = [.5]			# nvta list
nvxalist_2 = [0]			# nvxa list
nvpblist_2 = [.9]			# nvpb list
nvxblist_2 = [.5]			# nvxb list
nvpclist_2 = [.7]			# nvpc list
nvtclist_2 = [1]			# nvtc list
nvxclist_2 = [1.5]			# nvxc list
matlist_2 = [1]		# mat list
maclist_2 = [0]			# mac list
mpalist_2 = [.5]			# mpa list
mtalist_2 = [.5]		# mta list
mxalist_2 = [.5]			# mxa list
mpblist_2 = [.5]			# mpb list
mxblist_2 = [.5]			# mxb list
mpclist_2 = [.3]		# mpc list
mtclist_2 = [1]			# mtc list
mxclist_2 = [1.5]			# mxc list
bndalist_2 = [1]			# bnda list
bndblist_2 = [1]			# bndb list
bndclist_2 = [1]			# bndc list
bndtlist_2 = [.5]			# bndt list
bndulist_2 = [.5]			# bndu list
bndvlist_2 = [.5]			# bndv list
i_2 = 0						# loop iteration counter
c_2 = 0						# note iteration counter
while i_2 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_2 in range(bpb_2) :                           # loop through the items in the rhythm list
        sb_2 = rhythmr0_2[a_2]                          # sb is current item in the rhythm list
        subeat_2 = beat_2/len(sb_2)                     # subeat is the number of sub-beats in the beat
        for b_2 in range(len(sb_2)) :                   # loop through the items in the beat string
            if sb_2[b_2].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_2[b_2])                   # get ascii number of the character
                if sb_2[b_2].isdigit() :                # check if character is numeric
                    amp_2 = (asky-47)                   # assign amplitude
                elif sb_2[b_2].isupper() :              # check if character is uppercase
                    amp_2 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_2 = (asky-60)                   # assign amplitude
            elif sb_2[b_2] == &apos;-&apos; : amp_2 = 0           # character for amp = 0                         
            elif sb_2[b_2] == &apos;&gt;&apos; : amp_2 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_2 = blueDuration + 1           # set notetime_2 &gt; blueduration
                scoreText_2 = &apos;&apos;                        # clear scoreText_2
            if notetime_2 &gt;= blueDuration : break       # break out of the loop
	    if amp_2 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_2 = durlist_2[c_2]			# get duration from durlist
		amp_2 = amp_2-62			# move amp value to correct dbfs range (max=1)
		note_2 = notelist_2[c_2]		# get note from notelist
	        sp_2 = splist_2[c_2]			# get subpatch from splist
		pana_2 = panalist_2[c_2]		# get pana from panalist
		panb_2 = panblist_2[c_2]		# get panb from panblist
		nvat_2 = nvatlist_2[c_2]		# get nvat from nvatlist
		nvac_2 = nvaclist_2[c_2]		# get nvac from nvatlist
		nvpa_2 = nvpalist_2[c_2]		# get nvpa from nvpalist
		nvta_2 = nvtalist_2[c_2]		# get nvta from nvtalist
		nvxa_2 = nvxalist_2[c_2]		# get nvxa from nvxalist
		nvpb_2 = nvpblist_2[c_2]		# get nvpb from nvpblist
		nvxb_2 = nvxblist_2[c_2]		# get nvxb from nvxblist
		nvpc_2 = nvpclist_2[c_2]		# get nvpc from nvpclist
		nvtc_2 = nvtclist_2[c_2]		# get nvtc from nvtclist
		nvxc_2 = nvxclist_2[c_2]		# get nvxc from nvxclist
		mat_2 = matlist_2[c_2]			# get mat from matlist
		mac_2 = maclist_2[c_2]			# get mac from maclist
		mpa_2 = mpalist_2[c_2]			# get mpa from mpalist
		mta_2 = mtalist_2[c_2]			# get mta from mtalist
		mxa_2 = mxalist_2[c_2]			# get mxa from mxalist
		mpb_2 = mpblist_2[c_2]			# get mpb from mpblist
		mxb_2 = mxblist_2[c_2]			# get mxb from mxblist
		mpc_2 = mpclist_2[c_2]			# get mpc from mpclist
		mtc_2 = mtclist_2[c_2]			# get mtc from mtclist
		mxc_2 = mxclist_2[c_2]			# get mxc from mxclist
		bnda_2 = bndalist_2[c_2]		# get bnda from bndalist
		bndb_2 = bndblist_2[c_2]		# get bndb from bndblist
		bndc_2 = bndclist_2[c_2]		# get bndc from bndclist
		bndt_2 = bndtlist_2[c_2]		# get bndt from bndtlist		
		bndu_2 = bndulist_2[c_2]		# get bndu from bndulist		
		bndv_2 = bndvlist_2[c_2]		# get bndv from bndvlist		
                c_2 = c_2 + 1
                scoreText_2 += &quot;i1 &quot;+str(notetime_2)+&quot; &quot;+str(dur_2)+&quot; &quot;+str(amp_2)+&quot; &quot;+str(note_2)+&quot; &quot;+str(sp_2)+&quot; &quot;+str(pana_2)+&quot; &quot;+str(panb_2)+&quot; &quot;+str(nvat_2)+&quot; &quot;+str(nvac_2)+&quot; &quot;+str(nvpa_2)+&quot; &quot;+str(nvta_2)+&quot; &quot;+str(nvxa_2)+&quot; &quot;+str(nvpb_2)+&quot; &quot;+str(nvxb_2)+&quot; &quot;+str(nvpc_2)+&quot; &quot;+str(nvtc_2)+&quot; &quot;+str(nvxc_2)+&quot; &quot;+str(mat_2)+&quot; &quot;+str(mac_2)+&quot; &quot;+str(mpa_2)+&quot; &quot;+str(mta_2)+&quot; &quot;+str(mxa_2)+&quot; &quot;+str(mpb_2)+&quot; &quot;+str(mxb_2)+&quot; &quot;+str(mpc_2)+&quot; &quot;+str(mtc_2)+&quot; &quot;+str(mxc_2)+&quot; &quot;+str(bnda_2)+&quot; &quot;+str(bndb_2)+&quot; &quot;+str(bndc_2)+&quot; &quot;+str(bndt_2)+&quot; &quot;+str(bndu_2)+&quot; &quot;+str(bndv_2)+&quot; \n&quot;
            notetime_2 = notetime_2 + subeat_2                      # increment notetime by subeat time value
    i_2 = i_2 + 1
    c_2 = 0
score = scoreText_2
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>76.0</startTime>
          <name>Ringer_6c</name>
          <backgroundColor>-10092442</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_2 - 3h13TET
scoreText_2 = &quot;&quot;                              	# scoreText_2 is cleared
bart_2 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_2 = [&apos;-&apos;,&apos;g&apos;,&apos;-&apos;,&apos;-&apos;,&apos;-&apos;]			# rhythm
bpb_2 = len(rhythmr0_2)                         # beats per bar
beat_2 = bart_2/bpb_2                           # time of beat in seconds
notetime_2 = 0                                  # set intitial note start time
durlist_2 = [2.66]			# note duration list
notelist_2 = [48]				# note list
splist_2 = [3]				# subpatch list
panalist_2 = [-.1]			# pana list
panblist_2 = [.1]			# panb list
nvatlist_2 = [1]			# nvat list
nvaclist_2 = [.5]				# nvac list
nvpalist_2 = [1]				# nvpa list
nvtalist_2 = [.5]			# nvta list
nvxalist_2 = [0]			# nvxa list
nvpblist_2 = [.9]			# nvpb list
nvxblist_2 = [.5]			# nvxb list
nvpclist_2 = [.7]			# nvpc list
nvtclist_2 = [1]			# nvtc list
nvxclist_2 = [1.5]			# nvxc list
matlist_2 = [1]		# mat list
maclist_2 = [0]			# mac list
mpalist_2 = [.5]			# mpa list
mtalist_2 = [.5]		# mta list
mxalist_2 = [.5]			# mxa list
mpblist_2 = [.5]			# mpb list
mxblist_2 = [.5]			# mxb list
mpclist_2 = [.3]		# mpc list
mtclist_2 = [1]			# mtc list
mxclist_2 = [1.5]			# mxc list
bndalist_2 = [1]			# bnda list
bndblist_2 = [1]			# bndb list
bndclist_2 = [1]			# bndc list
bndtlist_2 = [.5]			# bndt list
bndulist_2 = [.5]			# bndu list
bndvlist_2 = [.5]			# bndv list
i_2 = 0						# loop iteration counter
c_2 = 0						# note iteration counter
while i_2 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_2 in range(bpb_2) :                           # loop through the items in the rhythm list
        sb_2 = rhythmr0_2[a_2]                          # sb is current item in the rhythm list
        subeat_2 = beat_2/len(sb_2)                     # subeat is the number of sub-beats in the beat
        for b_2 in range(len(sb_2)) :                   # loop through the items in the beat string
            if sb_2[b_2].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_2[b_2])                   # get ascii number of the character
                if sb_2[b_2].isdigit() :                # check if character is numeric
                    amp_2 = (asky-47)                   # assign amplitude
                elif sb_2[b_2].isupper() :              # check if character is uppercase
                    amp_2 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_2 = (asky-60)                   # assign amplitude
            elif sb_2[b_2] == &apos;-&apos; : amp_2 = 0           # character for amp = 0                         
            elif sb_2[b_2] == &apos;&gt;&apos; : amp_2 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_2 = blueDuration + 1           # set notetime_2 &gt; blueduration
                scoreText_2 = &apos;&apos;                        # clear scoreText_2
            if notetime_2 &gt;= blueDuration : break       # break out of the loop
	    if amp_2 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_2 = durlist_2[c_2]			# get duration from durlist
		amp_2 = amp_2-62			# move amp value to correct dbfs range (max=1)
		note_2 = notelist_2[c_2]		# get note from notelist
	        sp_2 = splist_2[c_2]			# get subpatch from splist
		pana_2 = panalist_2[c_2]		# get pana from panalist
		panb_2 = panblist_2[c_2]		# get panb from panblist
		nvat_2 = nvatlist_2[c_2]		# get nvat from nvatlist
		nvac_2 = nvaclist_2[c_2]		# get nvac from nvatlist
		nvpa_2 = nvpalist_2[c_2]		# get nvpa from nvpalist
		nvta_2 = nvtalist_2[c_2]		# get nvta from nvtalist
		nvxa_2 = nvxalist_2[c_2]		# get nvxa from nvxalist
		nvpb_2 = nvpblist_2[c_2]		# get nvpb from nvpblist
		nvxb_2 = nvxblist_2[c_2]		# get nvxb from nvxblist
		nvpc_2 = nvpclist_2[c_2]		# get nvpc from nvpclist
		nvtc_2 = nvtclist_2[c_2]		# get nvtc from nvtclist
		nvxc_2 = nvxclist_2[c_2]		# get nvxc from nvxclist
		mat_2 = matlist_2[c_2]			# get mat from matlist
		mac_2 = maclist_2[c_2]			# get mac from maclist
		mpa_2 = mpalist_2[c_2]			# get mpa from mpalist
		mta_2 = mtalist_2[c_2]			# get mta from mtalist
		mxa_2 = mxalist_2[c_2]			# get mxa from mxalist
		mpb_2 = mpblist_2[c_2]			# get mpb from mpblist
		mxb_2 = mxblist_2[c_2]			# get mxb from mxblist
		mpc_2 = mpclist_2[c_2]			# get mpc from mpclist
		mtc_2 = mtclist_2[c_2]			# get mtc from mtclist
		mxc_2 = mxclist_2[c_2]			# get mxc from mxclist
		bnda_2 = bndalist_2[c_2]		# get bnda from bndalist
		bndb_2 = bndblist_2[c_2]		# get bndb from bndblist
		bndc_2 = bndclist_2[c_2]		# get bndc from bndclist
		bndt_2 = bndtlist_2[c_2]		# get bndt from bndtlist		
		bndu_2 = bndulist_2[c_2]		# get bndu from bndulist		
		bndv_2 = bndvlist_2[c_2]		# get bndv from bndvlist		
                c_2 = c_2 + 1
                scoreText_2 += &quot;i1 &quot;+str(notetime_2)+&quot; &quot;+str(dur_2)+&quot; &quot;+str(amp_2)+&quot; &quot;+str(note_2)+&quot; &quot;+str(sp_2)+&quot; &quot;+str(pana_2)+&quot; &quot;+str(panb_2)+&quot; &quot;+str(nvat_2)+&quot; &quot;+str(nvac_2)+&quot; &quot;+str(nvpa_2)+&quot; &quot;+str(nvta_2)+&quot; &quot;+str(nvxa_2)+&quot; &quot;+str(nvpb_2)+&quot; &quot;+str(nvxb_2)+&quot; &quot;+str(nvpc_2)+&quot; &quot;+str(nvtc_2)+&quot; &quot;+str(nvxc_2)+&quot; &quot;+str(mat_2)+&quot; &quot;+str(mac_2)+&quot; &quot;+str(mpa_2)+&quot; &quot;+str(mta_2)+&quot; &quot;+str(mxa_2)+&quot; &quot;+str(mpb_2)+&quot; &quot;+str(mxb_2)+&quot; &quot;+str(mpc_2)+&quot; &quot;+str(mtc_2)+&quot; &quot;+str(mxc_2)+&quot; &quot;+str(bnda_2)+&quot; &quot;+str(bndb_2)+&quot; &quot;+str(bndc_2)+&quot; &quot;+str(bndt_2)+&quot; &quot;+str(bndu_2)+&quot; &quot;+str(bndv_2)+&quot; \n&quot;
            notetime_2 = notetime_2 + subeat_2                      # increment notetime by subeat time value
    i_2 = i_2 + 1
    c_2 = 0
score = scoreText_2
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>81.0</startTime>
          <name>Ringer_6b</name>
          <backgroundColor>-10092442</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_2 - 3h13TET
scoreText_2 = &quot;&quot;                              	# scoreText_2 is cleared
bart_2 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_2 = [&apos;-&apos;,&apos;e&apos;,&apos;-&apos;,&apos;-&apos;,&apos;-&apos;]			# rhythm
bpb_2 = len(rhythmr0_2)                         # beats per bar
beat_2 = bart_2/bpb_2                           # time of beat in seconds
notetime_2 = 0                                  # set intitial note start time
durlist_2 = [2.66]			# note duration list
notelist_2 = [47]				# note list
splist_2 = [3]				# subpatch list
panalist_2 = [-.1]			# pana list
panblist_2 = [.1]			# panb list
nvatlist_2 = [1]			# nvat list
nvaclist_2 = [.5]				# nvac list
nvpalist_2 = [1]				# nvpa list
nvtalist_2 = [.5]			# nvta list
nvxalist_2 = [0]			# nvxa list
nvpblist_2 = [.9]			# nvpb list
nvxblist_2 = [.5]			# nvxb list
nvpclist_2 = [.7]			# nvpc list
nvtclist_2 = [1]			# nvtc list
nvxclist_2 = [1.5]			# nvxc list
matlist_2 = [1]		# mat list
maclist_2 = [0]			# mac list
mpalist_2 = [.5]			# mpa list
mtalist_2 = [.5]		# mta list
mxalist_2 = [.5]			# mxa list
mpblist_2 = [.5]			# mpb list
mxblist_2 = [.5]			# mxb list
mpclist_2 = [.3]		# mpc list
mtclist_2 = [1]			# mtc list
mxclist_2 = [1.5]			# mxc list
bndalist_2 = [1]			# bnda list
bndblist_2 = [1]			# bndb list
bndclist_2 = [1]			# bndc list
bndtlist_2 = [.5]			# bndt list
bndulist_2 = [.5]			# bndu list
bndvlist_2 = [.5]			# bndv list
i_2 = 0						# loop iteration counter
c_2 = 0						# note iteration counter
while i_2 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_2 in range(bpb_2) :                           # loop through the items in the rhythm list
        sb_2 = rhythmr0_2[a_2]                          # sb is current item in the rhythm list
        subeat_2 = beat_2/len(sb_2)                     # subeat is the number of sub-beats in the beat
        for b_2 in range(len(sb_2)) :                   # loop through the items in the beat string
            if sb_2[b_2].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_2[b_2])                   # get ascii number of the character
                if sb_2[b_2].isdigit() :                # check if character is numeric
                    amp_2 = (asky-47)                   # assign amplitude
                elif sb_2[b_2].isupper() :              # check if character is uppercase
                    amp_2 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_2 = (asky-60)                   # assign amplitude
            elif sb_2[b_2] == &apos;-&apos; : amp_2 = 0           # character for amp = 0                         
            elif sb_2[b_2] == &apos;&gt;&apos; : amp_2 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_2 = blueDuration + 1           # set notetime_2 &gt; blueduration
                scoreText_2 = &apos;&apos;                        # clear scoreText_2
            if notetime_2 &gt;= blueDuration : break       # break out of the loop
	    if amp_2 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_2 = durlist_2[c_2]			# get duration from durlist
		amp_2 = amp_2-62			# move amp value to correct dbfs range (max=1)
		note_2 = notelist_2[c_2]		# get note from notelist
	        sp_2 = splist_2[c_2]			# get subpatch from splist
		pana_2 = panalist_2[c_2]		# get pana from panalist
		panb_2 = panblist_2[c_2]		# get panb from panblist
		nvat_2 = nvatlist_2[c_2]		# get nvat from nvatlist
		nvac_2 = nvaclist_2[c_2]		# get nvac from nvatlist
		nvpa_2 = nvpalist_2[c_2]		# get nvpa from nvpalist
		nvta_2 = nvtalist_2[c_2]		# get nvta from nvtalist
		nvxa_2 = nvxalist_2[c_2]		# get nvxa from nvxalist
		nvpb_2 = nvpblist_2[c_2]		# get nvpb from nvpblist
		nvxb_2 = nvxblist_2[c_2]		# get nvxb from nvxblist
		nvpc_2 = nvpclist_2[c_2]		# get nvpc from nvpclist
		nvtc_2 = nvtclist_2[c_2]		# get nvtc from nvtclist
		nvxc_2 = nvxclist_2[c_2]		# get nvxc from nvxclist
		mat_2 = matlist_2[c_2]			# get mat from matlist
		mac_2 = maclist_2[c_2]			# get mac from maclist
		mpa_2 = mpalist_2[c_2]			# get mpa from mpalist
		mta_2 = mtalist_2[c_2]			# get mta from mtalist
		mxa_2 = mxalist_2[c_2]			# get mxa from mxalist
		mpb_2 = mpblist_2[c_2]			# get mpb from mpblist
		mxb_2 = mxblist_2[c_2]			# get mxb from mxblist
		mpc_2 = mpclist_2[c_2]			# get mpc from mpclist
		mtc_2 = mtclist_2[c_2]			# get mtc from mtclist
		mxc_2 = mxclist_2[c_2]			# get mxc from mxclist
		bnda_2 = bndalist_2[c_2]		# get bnda from bndalist
		bndb_2 = bndblist_2[c_2]		# get bndb from bndblist
		bndc_2 = bndclist_2[c_2]		# get bndc from bndclist
		bndt_2 = bndtlist_2[c_2]		# get bndt from bndtlist		
		bndu_2 = bndulist_2[c_2]		# get bndu from bndulist		
		bndv_2 = bndvlist_2[c_2]		# get bndv from bndvlist		
                c_2 = c_2 + 1
                scoreText_2 += &quot;i1 &quot;+str(notetime_2)+&quot; &quot;+str(dur_2)+&quot; &quot;+str(amp_2)+&quot; &quot;+str(note_2)+&quot; &quot;+str(sp_2)+&quot; &quot;+str(pana_2)+&quot; &quot;+str(panb_2)+&quot; &quot;+str(nvat_2)+&quot; &quot;+str(nvac_2)+&quot; &quot;+str(nvpa_2)+&quot; &quot;+str(nvta_2)+&quot; &quot;+str(nvxa_2)+&quot; &quot;+str(nvpb_2)+&quot; &quot;+str(nvxb_2)+&quot; &quot;+str(nvpc_2)+&quot; &quot;+str(nvtc_2)+&quot; &quot;+str(nvxc_2)+&quot; &quot;+str(mat_2)+&quot; &quot;+str(mac_2)+&quot; &quot;+str(mpa_2)+&quot; &quot;+str(mta_2)+&quot; &quot;+str(mxa_2)+&quot; &quot;+str(mpb_2)+&quot; &quot;+str(mxb_2)+&quot; &quot;+str(mpc_2)+&quot; &quot;+str(mtc_2)+&quot; &quot;+str(mxc_2)+&quot; &quot;+str(bnda_2)+&quot; &quot;+str(bndb_2)+&quot; &quot;+str(bndc_2)+&quot; &quot;+str(bndt_2)+&quot; &quot;+str(bndu_2)+&quot; &quot;+str(bndv_2)+&quot; \n&quot;
            notetime_2 = notetime_2 + subeat_2                      # increment notetime by subeat time value
    i_2 = i_2 + 1
    c_2 = 0
score = scoreText_2
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>86.0</startTime>
          <name>Ringer_6e</name>
          <backgroundColor>-10092442</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_2 - 3h13TET
scoreText_2 = &quot;&quot;                              	# scoreText_2 is cleared
bart_2 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_2 = [&apos;-&apos;,&apos;e&apos;,&apos;-&apos;,&apos;-&apos;,&apos;-&apos;]			# rhythm
bpb_2 = len(rhythmr0_2)                         # beats per bar
beat_2 = bart_2/bpb_2                           # time of beat in seconds
notetime_2 = 0                                  # set intitial note start time
durlist_2 = [2.66]			# note duration list
notelist_2 = [45]				# note list
splist_2 = [3]				# subpatch list
panalist_2 = [-.1]			# pana list
panblist_2 = [.1]			# panb list
nvatlist_2 = [1]			# nvat list
nvaclist_2 = [.5]				# nvac list
nvpalist_2 = [1]				# nvpa list
nvtalist_2 = [.5]			# nvta list
nvxalist_2 = [0]			# nvxa list
nvpblist_2 = [.9]			# nvpb list
nvxblist_2 = [.5]			# nvxb list
nvpclist_2 = [.7]			# nvpc list
nvtclist_2 = [1]			# nvtc list
nvxclist_2 = [1.5]			# nvxc list
matlist_2 = [1]		# mat list
maclist_2 = [0]			# mac list
mpalist_2 = [.5]			# mpa list
mtalist_2 = [.5]		# mta list
mxalist_2 = [.5]			# mxa list
mpblist_2 = [.5]			# mpb list
mxblist_2 = [.5]			# mxb list
mpclist_2 = [.3]		# mpc list
mtclist_2 = [1]			# mtc list
mxclist_2 = [1.5]			# mxc list
bndalist_2 = [1]			# bnda list
bndblist_2 = [1]			# bndb list
bndclist_2 = [1]			# bndc list
bndtlist_2 = [.5]			# bndt list
bndulist_2 = [.5]			# bndu list
bndvlist_2 = [.5]			# bndv list
i_2 = 0						# loop iteration counter
c_2 = 0						# note iteration counter
while i_2 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_2 in range(bpb_2) :                           # loop through the items in the rhythm list
        sb_2 = rhythmr0_2[a_2]                          # sb is current item in the rhythm list
        subeat_2 = beat_2/len(sb_2)                     # subeat is the number of sub-beats in the beat
        for b_2 in range(len(sb_2)) :                   # loop through the items in the beat string
            if sb_2[b_2].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_2[b_2])                   # get ascii number of the character
                if sb_2[b_2].isdigit() :                # check if character is numeric
                    amp_2 = (asky-47)                   # assign amplitude
                elif sb_2[b_2].isupper() :              # check if character is uppercase
                    amp_2 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_2 = (asky-60)                   # assign amplitude
            elif sb_2[b_2] == &apos;-&apos; : amp_2 = 0           # character for amp = 0                         
            elif sb_2[b_2] == &apos;&gt;&apos; : amp_2 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_2 = blueDuration + 1           # set notetime_2 &gt; blueduration
                scoreText_2 = &apos;&apos;                        # clear scoreText_2
            if notetime_2 &gt;= blueDuration : break       # break out of the loop
	    if amp_2 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_2 = durlist_2[c_2]			# get duration from durlist
		amp_2 = amp_2-62			# move amp value to correct dbfs range (max=1)
		note_2 = notelist_2[c_2]		# get note from notelist
	        sp_2 = splist_2[c_2]			# get subpatch from splist
		pana_2 = panalist_2[c_2]		# get pana from panalist
		panb_2 = panblist_2[c_2]		# get panb from panblist
		nvat_2 = nvatlist_2[c_2]		# get nvat from nvatlist
		nvac_2 = nvaclist_2[c_2]		# get nvac from nvatlist
		nvpa_2 = nvpalist_2[c_2]		# get nvpa from nvpalist
		nvta_2 = nvtalist_2[c_2]		# get nvta from nvtalist
		nvxa_2 = nvxalist_2[c_2]		# get nvxa from nvxalist
		nvpb_2 = nvpblist_2[c_2]		# get nvpb from nvpblist
		nvxb_2 = nvxblist_2[c_2]		# get nvxb from nvxblist
		nvpc_2 = nvpclist_2[c_2]		# get nvpc from nvpclist
		nvtc_2 = nvtclist_2[c_2]		# get nvtc from nvtclist
		nvxc_2 = nvxclist_2[c_2]		# get nvxc from nvxclist
		mat_2 = matlist_2[c_2]			# get mat from matlist
		mac_2 = maclist_2[c_2]			# get mac from maclist
		mpa_2 = mpalist_2[c_2]			# get mpa from mpalist
		mta_2 = mtalist_2[c_2]			# get mta from mtalist
		mxa_2 = mxalist_2[c_2]			# get mxa from mxalist
		mpb_2 = mpblist_2[c_2]			# get mpb from mpblist
		mxb_2 = mxblist_2[c_2]			# get mxb from mxblist
		mpc_2 = mpclist_2[c_2]			# get mpc from mpclist
		mtc_2 = mtclist_2[c_2]			# get mtc from mtclist
		mxc_2 = mxclist_2[c_2]			# get mxc from mxclist
		bnda_2 = bndalist_2[c_2]		# get bnda from bndalist
		bndb_2 = bndblist_2[c_2]		# get bndb from bndblist
		bndc_2 = bndclist_2[c_2]		# get bndc from bndclist
		bndt_2 = bndtlist_2[c_2]		# get bndt from bndtlist		
		bndu_2 = bndulist_2[c_2]		# get bndu from bndulist		
		bndv_2 = bndvlist_2[c_2]		# get bndv from bndvlist		
                c_2 = c_2 + 1
                scoreText_2 += &quot;i1 &quot;+str(notetime_2)+&quot; &quot;+str(dur_2)+&quot; &quot;+str(amp_2)+&quot; &quot;+str(note_2)+&quot; &quot;+str(sp_2)+&quot; &quot;+str(pana_2)+&quot; &quot;+str(panb_2)+&quot; &quot;+str(nvat_2)+&quot; &quot;+str(nvac_2)+&quot; &quot;+str(nvpa_2)+&quot; &quot;+str(nvta_2)+&quot; &quot;+str(nvxa_2)+&quot; &quot;+str(nvpb_2)+&quot; &quot;+str(nvxb_2)+&quot; &quot;+str(nvpc_2)+&quot; &quot;+str(nvtc_2)+&quot; &quot;+str(nvxc_2)+&quot; &quot;+str(mat_2)+&quot; &quot;+str(mac_2)+&quot; &quot;+str(mpa_2)+&quot; &quot;+str(mta_2)+&quot; &quot;+str(mxa_2)+&quot; &quot;+str(mpb_2)+&quot; &quot;+str(mxb_2)+&quot; &quot;+str(mpc_2)+&quot; &quot;+str(mtc_2)+&quot; &quot;+str(mxc_2)+&quot; &quot;+str(bnda_2)+&quot; &quot;+str(bndb_2)+&quot; &quot;+str(bndc_2)+&quot; &quot;+str(bndt_2)+&quot; &quot;+str(bndu_2)+&quot; &quot;+str(bndv_2)+&quot; \n&quot;
            notetime_2 = notetime_2 + subeat_2                      # increment notetime by subeat time value
    i_2 = i_2 + 1
    c_2 = 0
score = scoreText_2
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>91.0</startTime>
          <name>Ringer_6a</name>
          <backgroundColor>-10092442</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_2 - 3h13TET
scoreText_2 = &quot;&quot;                              	# scoreText_2 is cleared
bart_2 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_2 = [&apos;-&apos;,&apos;g&apos;,&apos;-&apos;,&apos;-&apos;,&apos;-&apos;]			# rhythm
bpb_2 = len(rhythmr0_2)                         # beats per bar
beat_2 = bart_2/bpb_2                           # time of beat in seconds
notetime_2 = 0                                  # set intitial note start time
durlist_2 = [2.66]			# note duration list
notelist_2 = [48]				# note list
splist_2 = [3]				# subpatch list
panalist_2 = [-.1]			# pana list
panblist_2 = [.1]			# panb list
nvatlist_2 = [1]			# nvat list
nvaclist_2 = [.5]				# nvac list
nvpalist_2 = [1]				# nvpa list
nvtalist_2 = [.5]			# nvta list
nvxalist_2 = [0]			# nvxa list
nvpblist_2 = [.9]			# nvpb list
nvxblist_2 = [.5]			# nvxb list
nvpclist_2 = [.7]			# nvpc list
nvtclist_2 = [1]			# nvtc list
nvxclist_2 = [1.5]			# nvxc list
matlist_2 = [1]		# mat list
maclist_2 = [0]			# mac list
mpalist_2 = [.5]			# mpa list
mtalist_2 = [.5]		# mta list
mxalist_2 = [.5]			# mxa list
mpblist_2 = [.5]			# mpb list
mxblist_2 = [.5]			# mxb list
mpclist_2 = [.3]		# mpc list
mtclist_2 = [1]			# mtc list
mxclist_2 = [1.5]			# mxc list
bndalist_2 = [1]			# bnda list
bndblist_2 = [1]			# bndb list
bndclist_2 = [1]			# bndc list
bndtlist_2 = [.5]			# bndt list
bndulist_2 = [.5]			# bndu list
bndvlist_2 = [.5]			# bndv list
i_2 = 0						# loop iteration counter
c_2 = 0						# note iteration counter
while i_2 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_2 in range(bpb_2) :                           # loop through the items in the rhythm list
        sb_2 = rhythmr0_2[a_2]                          # sb is current item in the rhythm list
        subeat_2 = beat_2/len(sb_2)                     # subeat is the number of sub-beats in the beat
        for b_2 in range(len(sb_2)) :                   # loop through the items in the beat string
            if sb_2[b_2].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_2[b_2])                   # get ascii number of the character
                if sb_2[b_2].isdigit() :                # check if character is numeric
                    amp_2 = (asky-47)                   # assign amplitude
                elif sb_2[b_2].isupper() :              # check if character is uppercase
                    amp_2 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_2 = (asky-60)                   # assign amplitude
            elif sb_2[b_2] == &apos;-&apos; : amp_2 = 0           # character for amp = 0                         
            elif sb_2[b_2] == &apos;&gt;&apos; : amp_2 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_2 = blueDuration + 1           # set notetime_2 &gt; blueduration
                scoreText_2 = &apos;&apos;                        # clear scoreText_2
            if notetime_2 &gt;= blueDuration : break       # break out of the loop
	    if amp_2 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_2 = durlist_2[c_2]			# get duration from durlist
		amp_2 = amp_2-62			# move amp value to correct dbfs range (max=1)
		note_2 = notelist_2[c_2]		# get note from notelist
	        sp_2 = splist_2[c_2]			# get subpatch from splist
		pana_2 = panalist_2[c_2]		# get pana from panalist
		panb_2 = panblist_2[c_2]		# get panb from panblist
		nvat_2 = nvatlist_2[c_2]		# get nvat from nvatlist
		nvac_2 = nvaclist_2[c_2]		# get nvac from nvatlist
		nvpa_2 = nvpalist_2[c_2]		# get nvpa from nvpalist
		nvta_2 = nvtalist_2[c_2]		# get nvta from nvtalist
		nvxa_2 = nvxalist_2[c_2]		# get nvxa from nvxalist
		nvpb_2 = nvpblist_2[c_2]		# get nvpb from nvpblist
		nvxb_2 = nvxblist_2[c_2]		# get nvxb from nvxblist
		nvpc_2 = nvpclist_2[c_2]		# get nvpc from nvpclist
		nvtc_2 = nvtclist_2[c_2]		# get nvtc from nvtclist
		nvxc_2 = nvxclist_2[c_2]		# get nvxc from nvxclist
		mat_2 = matlist_2[c_2]			# get mat from matlist
		mac_2 = maclist_2[c_2]			# get mac from maclist
		mpa_2 = mpalist_2[c_2]			# get mpa from mpalist
		mta_2 = mtalist_2[c_2]			# get mta from mtalist
		mxa_2 = mxalist_2[c_2]			# get mxa from mxalist
		mpb_2 = mpblist_2[c_2]			# get mpb from mpblist
		mxb_2 = mxblist_2[c_2]			# get mxb from mxblist
		mpc_2 = mpclist_2[c_2]			# get mpc from mpclist
		mtc_2 = mtclist_2[c_2]			# get mtc from mtclist
		mxc_2 = mxclist_2[c_2]			# get mxc from mxclist
		bnda_2 = bndalist_2[c_2]		# get bnda from bndalist
		bndb_2 = bndblist_2[c_2]		# get bndb from bndblist
		bndc_2 = bndclist_2[c_2]		# get bndc from bndclist
		bndt_2 = bndtlist_2[c_2]		# get bndt from bndtlist		
		bndu_2 = bndulist_2[c_2]		# get bndu from bndulist		
		bndv_2 = bndvlist_2[c_2]		# get bndv from bndvlist		
                c_2 = c_2 + 1
                scoreText_2 += &quot;i1 &quot;+str(notetime_2)+&quot; &quot;+str(dur_2)+&quot; &quot;+str(amp_2)+&quot; &quot;+str(note_2)+&quot; &quot;+str(sp_2)+&quot; &quot;+str(pana_2)+&quot; &quot;+str(panb_2)+&quot; &quot;+str(nvat_2)+&quot; &quot;+str(nvac_2)+&quot; &quot;+str(nvpa_2)+&quot; &quot;+str(nvta_2)+&quot; &quot;+str(nvxa_2)+&quot; &quot;+str(nvpb_2)+&quot; &quot;+str(nvxb_2)+&quot; &quot;+str(nvpc_2)+&quot; &quot;+str(nvtc_2)+&quot; &quot;+str(nvxc_2)+&quot; &quot;+str(mat_2)+&quot; &quot;+str(mac_2)+&quot; &quot;+str(mpa_2)+&quot; &quot;+str(mta_2)+&quot; &quot;+str(mxa_2)+&quot; &quot;+str(mpb_2)+&quot; &quot;+str(mxb_2)+&quot; &quot;+str(mpc_2)+&quot; &quot;+str(mtc_2)+&quot; &quot;+str(mxc_2)+&quot; &quot;+str(bnda_2)+&quot; &quot;+str(bndb_2)+&quot; &quot;+str(bndc_2)+&quot; &quot;+str(bndt_2)+&quot; &quot;+str(bndu_2)+&quot; &quot;+str(bndv_2)+&quot; \n&quot;
            notetime_2 = notetime_2 + subeat_2                      # increment notetime by subeat time value
    i_2 = i_2 + 1
    c_2 = 0
score = scoreText_2
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>96.0</startTime>
          <name>Ringer_2b</name>
          <backgroundColor>-10092442</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_2 - 3h13TET
scoreText_2 = &quot;&quot;                              	# scoreText_2 is cleared
bart_2 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_2 = [&apos;-&apos;,&apos;e&apos;,&apos;-&apos;,&apos;-&apos;,&apos;-&apos;]			# rhythm
bpb_2 = len(rhythmr0_2)                         # beats per bar
beat_2 = bart_2/bpb_2                           # time of beat in seconds
notetime_2 = 0                                  # set intitial note start time
durlist_2 = [2.66]			# note duration list
notelist_2 = [49]				# note list
splist_2 = [1]				# subpatch list
panalist_2 = [-.1]			# pana list
panblist_2 = [.1]			# panb list
nvatlist_2 = [1]			# nvat list
nvaclist_2 = [.5]				# nvac list
nvpalist_2 = [1]				# nvpa list
nvtalist_2 = [.5]			# nvta list
nvxalist_2 = [0]			# nvxa list
nvpblist_2 = [.9]			# nvpb list
nvxblist_2 = [.5]			# nvxb list
nvpclist_2 = [.7]			# nvpc list
nvtclist_2 = [1]			# nvtc list
nvxclist_2 = [1.5]			# nvxc list
matlist_2 = [1]		# mat list
maclist_2 = [0]			# mac list
mpalist_2 = [.5]			# mpa list
mtalist_2 = [.5]		# mta list
mxalist_2 = [.5]			# mxa list
mpblist_2 = [.5]			# mpb list
mxblist_2 = [.5]			# mxb list
mpclist_2 = [.3]		# mpc list
mtclist_2 = [1]			# mtc list
mxclist_2 = [1.5]			# mxc list
bndalist_2 = [1]			# bnda list
bndblist_2 = [1]			# bndb list
bndclist_2 = [1]			# bndc list
bndtlist_2 = [.5]			# bndt list
bndulist_2 = [.5]			# bndu list
bndvlist_2 = [.5]			# bndv list
i_2 = 0						# loop iteration counter
c_2 = 0						# note iteration counter
while i_2 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_2 in range(bpb_2) :                           # loop through the items in the rhythm list
        sb_2 = rhythmr0_2[a_2]                          # sb is current item in the rhythm list
        subeat_2 = beat_2/len(sb_2)                     # subeat is the number of sub-beats in the beat
        for b_2 in range(len(sb_2)) :                   # loop through the items in the beat string
            if sb_2[b_2].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_2[b_2])                   # get ascii number of the character
                if sb_2[b_2].isdigit() :                # check if character is numeric
                    amp_2 = (asky-47)                   # assign amplitude
                elif sb_2[b_2].isupper() :              # check if character is uppercase
                    amp_2 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_2 = (asky-60)                   # assign amplitude
            elif sb_2[b_2] == &apos;-&apos; : amp_2 = 0           # character for amp = 0                         
            elif sb_2[b_2] == &apos;&gt;&apos; : amp_2 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_2 = blueDuration + 1           # set notetime_2 &gt; blueduration
                scoreText_2 = &apos;&apos;                        # clear scoreText_2
            if notetime_2 &gt;= blueDuration : break       # break out of the loop
	    if amp_2 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_2 = durlist_2[c_2]			# get duration from durlist
		amp_2 = amp_2-62			# move amp value to correct dbfs range (max=1)
		note_2 = notelist_2[c_2]		# get note from notelist
	        sp_2 = splist_2[c_2]			# get subpatch from splist
		pana_2 = panalist_2[c_2]		# get pana from panalist
		panb_2 = panblist_2[c_2]		# get panb from panblist
		nvat_2 = nvatlist_2[c_2]		# get nvat from nvatlist
		nvac_2 = nvaclist_2[c_2]		# get nvac from nvatlist
		nvpa_2 = nvpalist_2[c_2]		# get nvpa from nvpalist
		nvta_2 = nvtalist_2[c_2]		# get nvta from nvtalist
		nvxa_2 = nvxalist_2[c_2]		# get nvxa from nvxalist
		nvpb_2 = nvpblist_2[c_2]		# get nvpb from nvpblist
		nvxb_2 = nvxblist_2[c_2]		# get nvxb from nvxblist
		nvpc_2 = nvpclist_2[c_2]		# get nvpc from nvpclist
		nvtc_2 = nvtclist_2[c_2]		# get nvtc from nvtclist
		nvxc_2 = nvxclist_2[c_2]		# get nvxc from nvxclist
		mat_2 = matlist_2[c_2]			# get mat from matlist
		mac_2 = maclist_2[c_2]			# get mac from maclist
		mpa_2 = mpalist_2[c_2]			# get mpa from mpalist
		mta_2 = mtalist_2[c_2]			# get mta from mtalist
		mxa_2 = mxalist_2[c_2]			# get mxa from mxalist
		mpb_2 = mpblist_2[c_2]			# get mpb from mpblist
		mxb_2 = mxblist_2[c_2]			# get mxb from mxblist
		mpc_2 = mpclist_2[c_2]			# get mpc from mpclist
		mtc_2 = mtclist_2[c_2]			# get mtc from mtclist
		mxc_2 = mxclist_2[c_2]			# get mxc from mxclist
		bnda_2 = bndalist_2[c_2]		# get bnda from bndalist
		bndb_2 = bndblist_2[c_2]		# get bndb from bndblist
		bndc_2 = bndclist_2[c_2]		# get bndc from bndclist
		bndt_2 = bndtlist_2[c_2]		# get bndt from bndtlist		
		bndu_2 = bndulist_2[c_2]		# get bndu from bndulist		
		bndv_2 = bndvlist_2[c_2]		# get bndv from bndvlist		
                c_2 = c_2 + 1
                scoreText_2 += &quot;i1 &quot;+str(notetime_2)+&quot; &quot;+str(dur_2)+&quot; &quot;+str(amp_2)+&quot; &quot;+str(note_2)+&quot; &quot;+str(sp_2)+&quot; &quot;+str(pana_2)+&quot; &quot;+str(panb_2)+&quot; &quot;+str(nvat_2)+&quot; &quot;+str(nvac_2)+&quot; &quot;+str(nvpa_2)+&quot; &quot;+str(nvta_2)+&quot; &quot;+str(nvxa_2)+&quot; &quot;+str(nvpb_2)+&quot; &quot;+str(nvxb_2)+&quot; &quot;+str(nvpc_2)+&quot; &quot;+str(nvtc_2)+&quot; &quot;+str(nvxc_2)+&quot; &quot;+str(mat_2)+&quot; &quot;+str(mac_2)+&quot; &quot;+str(mpa_2)+&quot; &quot;+str(mta_2)+&quot; &quot;+str(mxa_2)+&quot; &quot;+str(mpb_2)+&quot; &quot;+str(mxb_2)+&quot; &quot;+str(mpc_2)+&quot; &quot;+str(mtc_2)+&quot; &quot;+str(mxc_2)+&quot; &quot;+str(bnda_2)+&quot; &quot;+str(bndb_2)+&quot; &quot;+str(bndc_2)+&quot; &quot;+str(bndt_2)+&quot; &quot;+str(bndu_2)+&quot; &quot;+str(bndv_2)+&quot; \n&quot;
            notetime_2 = notetime_2 + subeat_2                      # increment notetime by subeat time value
    i_2 = i_2 + 1
    c_2 = 0
score = scoreText_2
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>101.0</startTime>
          <name>Ringer_6a</name>
          <backgroundColor>-10092442</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_2 - 3h13TET
scoreText_2 = &quot;&quot;                              	# scoreText_2 is cleared
bart_2 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_2 = [&apos;-&apos;,&apos;g&apos;,&apos;-&apos;,&apos;-&apos;,&apos;-&apos;]			# rhythm
bpb_2 = len(rhythmr0_2)                         # beats per bar
beat_2 = bart_2/bpb_2                           # time of beat in seconds
notetime_2 = 0                                  # set intitial note start time
durlist_2 = [2.66]			# note duration list
notelist_2 = [48]				# note list
splist_2 = [3]				# subpatch list
panalist_2 = [-.1]			# pana list
panblist_2 = [.1]			# panb list
nvatlist_2 = [1]			# nvat list
nvaclist_2 = [.5]				# nvac list
nvpalist_2 = [1]				# nvpa list
nvtalist_2 = [.5]			# nvta list
nvxalist_2 = [0]			# nvxa list
nvpblist_2 = [.9]			# nvpb list
nvxblist_2 = [.5]			# nvxb list
nvpclist_2 = [.7]			# nvpc list
nvtclist_2 = [1]			# nvtc list
nvxclist_2 = [1.5]			# nvxc list
matlist_2 = [1]		# mat list
maclist_2 = [0]			# mac list
mpalist_2 = [.5]			# mpa list
mtalist_2 = [.5]		# mta list
mxalist_2 = [.5]			# mxa list
mpblist_2 = [.5]			# mpb list
mxblist_2 = [.5]			# mxb list
mpclist_2 = [.3]		# mpc list
mtclist_2 = [1]			# mtc list
mxclist_2 = [1.5]			# mxc list
bndalist_2 = [1]			# bnda list
bndblist_2 = [1]			# bndb list
bndclist_2 = [1]			# bndc list
bndtlist_2 = [.5]			# bndt list
bndulist_2 = [.5]			# bndu list
bndvlist_2 = [.5]			# bndv list
i_2 = 0						# loop iteration counter
c_2 = 0						# note iteration counter
while i_2 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_2 in range(bpb_2) :                           # loop through the items in the rhythm list
        sb_2 = rhythmr0_2[a_2]                          # sb is current item in the rhythm list
        subeat_2 = beat_2/len(sb_2)                     # subeat is the number of sub-beats in the beat
        for b_2 in range(len(sb_2)) :                   # loop through the items in the beat string
            if sb_2[b_2].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_2[b_2])                   # get ascii number of the character
                if sb_2[b_2].isdigit() :                # check if character is numeric
                    amp_2 = (asky-47)                   # assign amplitude
                elif sb_2[b_2].isupper() :              # check if character is uppercase
                    amp_2 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_2 = (asky-60)                   # assign amplitude
            elif sb_2[b_2] == &apos;-&apos; : amp_2 = 0           # character for amp = 0                         
            elif sb_2[b_2] == &apos;&gt;&apos; : amp_2 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_2 = blueDuration + 1           # set notetime_2 &gt; blueduration
                scoreText_2 = &apos;&apos;                        # clear scoreText_2
            if notetime_2 &gt;= blueDuration : break       # break out of the loop
	    if amp_2 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_2 = durlist_2[c_2]			# get duration from durlist
		amp_2 = amp_2-62			# move amp value to correct dbfs range (max=1)
		note_2 = notelist_2[c_2]		# get note from notelist
	        sp_2 = splist_2[c_2]			# get subpatch from splist
		pana_2 = panalist_2[c_2]		# get pana from panalist
		panb_2 = panblist_2[c_2]		# get panb from panblist
		nvat_2 = nvatlist_2[c_2]		# get nvat from nvatlist
		nvac_2 = nvaclist_2[c_2]		# get nvac from nvatlist
		nvpa_2 = nvpalist_2[c_2]		# get nvpa from nvpalist
		nvta_2 = nvtalist_2[c_2]		# get nvta from nvtalist
		nvxa_2 = nvxalist_2[c_2]		# get nvxa from nvxalist
		nvpb_2 = nvpblist_2[c_2]		# get nvpb from nvpblist
		nvxb_2 = nvxblist_2[c_2]		# get nvxb from nvxblist
		nvpc_2 = nvpclist_2[c_2]		# get nvpc from nvpclist
		nvtc_2 = nvtclist_2[c_2]		# get nvtc from nvtclist
		nvxc_2 = nvxclist_2[c_2]		# get nvxc from nvxclist
		mat_2 = matlist_2[c_2]			# get mat from matlist
		mac_2 = maclist_2[c_2]			# get mac from maclist
		mpa_2 = mpalist_2[c_2]			# get mpa from mpalist
		mta_2 = mtalist_2[c_2]			# get mta from mtalist
		mxa_2 = mxalist_2[c_2]			# get mxa from mxalist
		mpb_2 = mpblist_2[c_2]			# get mpb from mpblist
		mxb_2 = mxblist_2[c_2]			# get mxb from mxblist
		mpc_2 = mpclist_2[c_2]			# get mpc from mpclist
		mtc_2 = mtclist_2[c_2]			# get mtc from mtclist
		mxc_2 = mxclist_2[c_2]			# get mxc from mxclist
		bnda_2 = bndalist_2[c_2]		# get bnda from bndalist
		bndb_2 = bndblist_2[c_2]		# get bndb from bndblist
		bndc_2 = bndclist_2[c_2]		# get bndc from bndclist
		bndt_2 = bndtlist_2[c_2]		# get bndt from bndtlist		
		bndu_2 = bndulist_2[c_2]		# get bndu from bndulist		
		bndv_2 = bndvlist_2[c_2]		# get bndv from bndvlist		
                c_2 = c_2 + 1
                scoreText_2 += &quot;i1 &quot;+str(notetime_2)+&quot; &quot;+str(dur_2)+&quot; &quot;+str(amp_2)+&quot; &quot;+str(note_2)+&quot; &quot;+str(sp_2)+&quot; &quot;+str(pana_2)+&quot; &quot;+str(panb_2)+&quot; &quot;+str(nvat_2)+&quot; &quot;+str(nvac_2)+&quot; &quot;+str(nvpa_2)+&quot; &quot;+str(nvta_2)+&quot; &quot;+str(nvxa_2)+&quot; &quot;+str(nvpb_2)+&quot; &quot;+str(nvxb_2)+&quot; &quot;+str(nvpc_2)+&quot; &quot;+str(nvtc_2)+&quot; &quot;+str(nvxc_2)+&quot; &quot;+str(mat_2)+&quot; &quot;+str(mac_2)+&quot; &quot;+str(mpa_2)+&quot; &quot;+str(mta_2)+&quot; &quot;+str(mxa_2)+&quot; &quot;+str(mpb_2)+&quot; &quot;+str(mxb_2)+&quot; &quot;+str(mpc_2)+&quot; &quot;+str(mtc_2)+&quot; &quot;+str(mxc_2)+&quot; &quot;+str(bnda_2)+&quot; &quot;+str(bndb_2)+&quot; &quot;+str(bndc_2)+&quot; &quot;+str(bndt_2)+&quot; &quot;+str(bndu_2)+&quot; &quot;+str(bndv_2)+&quot; \n&quot;
            notetime_2 = notetime_2 + subeat_2                      # increment notetime by subeat time value
    i_2 = i_2 + 1
    c_2 = 0
score = scoreText_2
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>106.0</startTime>
          <name>Ringer_2d</name>
          <backgroundColor>-10092442</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_2 - 3h13TET
scoreText_2 = &quot;&quot;                              	# scoreText_2 is cleared
bart_2 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_2 = [&apos;-&apos;,&apos;e&apos;,&apos;-&apos;,&apos;-&apos;,&apos;-&apos;]			# rhythm
bpb_2 = len(rhythmr0_2)                         # beats per bar
beat_2 = bart_2/bpb_2                           # time of beat in seconds
notetime_2 = 0                                  # set intitial note start time
durlist_2 = [2.66]			# note duration list
notelist_2 = [49]				# note list
splist_2 = [1]				# subpatch list
panalist_2 = [-.1]			# pana list
panblist_2 = [.1]			# panb list
nvatlist_2 = [1]			# nvat list
nvaclist_2 = [.5]				# nvac list
nvpalist_2 = [1]				# nvpa list
nvtalist_2 = [.5]			# nvta list
nvxalist_2 = [0]			# nvxa list
nvpblist_2 = [.9]			# nvpb list
nvxblist_2 = [.5]			# nvxb list
nvpclist_2 = [.7]			# nvpc list
nvtclist_2 = [1]			# nvtc list
nvxclist_2 = [1.5]			# nvxc list
matlist_2 = [1]		# mat list
maclist_2 = [0]			# mac list
mpalist_2 = [.5]			# mpa list
mtalist_2 = [.5]		# mta list
mxalist_2 = [.5]			# mxa list
mpblist_2 = [.5]			# mpb list
mxblist_2 = [.5]			# mxb list
mpclist_2 = [.3]		# mpc list
mtclist_2 = [1]			# mtc list
mxclist_2 = [1.5]			# mxc list
bndalist_2 = [1]			# bnda list
bndblist_2 = [1]			# bndb list
bndclist_2 = [1]			# bndc list
bndtlist_2 = [.5]			# bndt list
bndulist_2 = [.5]			# bndu list
bndvlist_2 = [.5]			# bndv list
i_2 = 0						# loop iteration counter
c_2 = 0						# note iteration counter
while i_2 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_2 in range(bpb_2) :                           # loop through the items in the rhythm list
        sb_2 = rhythmr0_2[a_2]                          # sb is current item in the rhythm list
        subeat_2 = beat_2/len(sb_2)                     # subeat is the number of sub-beats in the beat
        for b_2 in range(len(sb_2)) :                   # loop through the items in the beat string
            if sb_2[b_2].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_2[b_2])                   # get ascii number of the character
                if sb_2[b_2].isdigit() :                # check if character is numeric
                    amp_2 = (asky-47)                   # assign amplitude
                elif sb_2[b_2].isupper() :              # check if character is uppercase
                    amp_2 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_2 = (asky-60)                   # assign amplitude
            elif sb_2[b_2] == &apos;-&apos; : amp_2 = 0           # character for amp = 0                         
            elif sb_2[b_2] == &apos;&gt;&apos; : amp_2 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_2 = blueDuration + 1           # set notetime_2 &gt; blueduration
                scoreText_2 = &apos;&apos;                        # clear scoreText_2
            if notetime_2 &gt;= blueDuration : break       # break out of the loop
	    if amp_2 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_2 = durlist_2[c_2]			# get duration from durlist
		amp_2 = amp_2-62			# move amp value to correct dbfs range (max=1)
		note_2 = notelist_2[c_2]		# get note from notelist
	        sp_2 = splist_2[c_2]			# get subpatch from splist
		pana_2 = panalist_2[c_2]		# get pana from panalist
		panb_2 = panblist_2[c_2]		# get panb from panblist
		nvat_2 = nvatlist_2[c_2]		# get nvat from nvatlist
		nvac_2 = nvaclist_2[c_2]		# get nvac from nvatlist
		nvpa_2 = nvpalist_2[c_2]		# get nvpa from nvpalist
		nvta_2 = nvtalist_2[c_2]		# get nvta from nvtalist
		nvxa_2 = nvxalist_2[c_2]		# get nvxa from nvxalist
		nvpb_2 = nvpblist_2[c_2]		# get nvpb from nvpblist
		nvxb_2 = nvxblist_2[c_2]		# get nvxb from nvxblist
		nvpc_2 = nvpclist_2[c_2]		# get nvpc from nvpclist
		nvtc_2 = nvtclist_2[c_2]		# get nvtc from nvtclist
		nvxc_2 = nvxclist_2[c_2]		# get nvxc from nvxclist
		mat_2 = matlist_2[c_2]			# get mat from matlist
		mac_2 = maclist_2[c_2]			# get mac from maclist
		mpa_2 = mpalist_2[c_2]			# get mpa from mpalist
		mta_2 = mtalist_2[c_2]			# get mta from mtalist
		mxa_2 = mxalist_2[c_2]			# get mxa from mxalist
		mpb_2 = mpblist_2[c_2]			# get mpb from mpblist
		mxb_2 = mxblist_2[c_2]			# get mxb from mxblist
		mpc_2 = mpclist_2[c_2]			# get mpc from mpclist
		mtc_2 = mtclist_2[c_2]			# get mtc from mtclist
		mxc_2 = mxclist_2[c_2]			# get mxc from mxclist
		bnda_2 = bndalist_2[c_2]		# get bnda from bndalist
		bndb_2 = bndblist_2[c_2]		# get bndb from bndblist
		bndc_2 = bndclist_2[c_2]		# get bndc from bndclist
		bndt_2 = bndtlist_2[c_2]		# get bndt from bndtlist		
		bndu_2 = bndulist_2[c_2]		# get bndu from bndulist		
		bndv_2 = bndvlist_2[c_2]		# get bndv from bndvlist		
                c_2 = c_2 + 1
                scoreText_2 += &quot;i1 &quot;+str(notetime_2)+&quot; &quot;+str(dur_2)+&quot; &quot;+str(amp_2)+&quot; &quot;+str(note_2)+&quot; &quot;+str(sp_2)+&quot; &quot;+str(pana_2)+&quot; &quot;+str(panb_2)+&quot; &quot;+str(nvat_2)+&quot; &quot;+str(nvac_2)+&quot; &quot;+str(nvpa_2)+&quot; &quot;+str(nvta_2)+&quot; &quot;+str(nvxa_2)+&quot; &quot;+str(nvpb_2)+&quot; &quot;+str(nvxb_2)+&quot; &quot;+str(nvpc_2)+&quot; &quot;+str(nvtc_2)+&quot; &quot;+str(nvxc_2)+&quot; &quot;+str(mat_2)+&quot; &quot;+str(mac_2)+&quot; &quot;+str(mpa_2)+&quot; &quot;+str(mta_2)+&quot; &quot;+str(mxa_2)+&quot; &quot;+str(mpb_2)+&quot; &quot;+str(mxb_2)+&quot; &quot;+str(mpc_2)+&quot; &quot;+str(mtc_2)+&quot; &quot;+str(mxc_2)+&quot; &quot;+str(bnda_2)+&quot; &quot;+str(bndb_2)+&quot; &quot;+str(bndc_2)+&quot; &quot;+str(bndt_2)+&quot; &quot;+str(bndu_2)+&quot; &quot;+str(bndv_2)+&quot; \n&quot;
            notetime_2 = notetime_2 + subeat_2                      # increment notetime by subeat time value
    i_2 = i_2 + 1
    c_2 = 0
score = scoreText_2
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>111.0</startTime>
          <name>Ringer_6e</name>
          <backgroundColor>-10092442</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_2 - 3h13TET
scoreText_2 = &quot;&quot;                              	# scoreText_2 is cleared
bart_2 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_2 = [&apos;-&apos;,&apos;e&apos;,&apos;-&apos;,&apos;-&apos;,&apos;-&apos;]			# rhythm
bpb_2 = len(rhythmr0_2)                         # beats per bar
beat_2 = bart_2/bpb_2                           # time of beat in seconds
notetime_2 = 0                                  # set intitial note start time
durlist_2 = [3.66]			# note duration list
notelist_2 = [45]				# note list
splist_2 = [3]				# subpatch list
panalist_2 = [-.1]			# pana list
panblist_2 = [.1]			# panb list
nvatlist_2 = [1]			# nvat list
nvaclist_2 = [.5]				# nvac list
nvpalist_2 = [1]				# nvpa list
nvtalist_2 = [.5]			# nvta list
nvxalist_2 = [0]			# nvxa list
nvpblist_2 = [.9]			# nvpb list
nvxblist_2 = [.5]			# nvxb list
nvpclist_2 = [.7]			# nvpc list
nvtclist_2 = [2]			# nvtc list
nvxclist_2 = [1.5]			# nvxc list
matlist_2 = [1]		# mat list
maclist_2 = [0]			# mac list
mpalist_2 = [.5]			# mpa list
mtalist_2 = [.5]		# mta list
mxalist_2 = [.5]			# mxa list
mpblist_2 = [.5]			# mpb list
mxblist_2 = [.5]			# mxb list
mpclist_2 = [.3]		# mpc list
mtclist_2 = [1]			# mtc list
mxclist_2 = [1.5]			# mxc list
bndalist_2 = [1]			# bnda list
bndblist_2 = [1]			# bndb list
bndclist_2 = [1]			# bndc list
bndtlist_2 = [.5]			# bndt list
bndulist_2 = [.5]			# bndu list
bndvlist_2 = [.5]			# bndv list
i_2 = 0						# loop iteration counter
c_2 = 0						# note iteration counter
while i_2 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_2 in range(bpb_2) :                           # loop through the items in the rhythm list
        sb_2 = rhythmr0_2[a_2]                          # sb is current item in the rhythm list
        subeat_2 = beat_2/len(sb_2)                     # subeat is the number of sub-beats in the beat
        for b_2 in range(len(sb_2)) :                   # loop through the items in the beat string
            if sb_2[b_2].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_2[b_2])                   # get ascii number of the character
                if sb_2[b_2].isdigit() :                # check if character is numeric
                    amp_2 = (asky-47)                   # assign amplitude
                elif sb_2[b_2].isupper() :              # check if character is uppercase
                    amp_2 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_2 = (asky-60)                   # assign amplitude
            elif sb_2[b_2] == &apos;-&apos; : amp_2 = 0           # character for amp = 0                         
            elif sb_2[b_2] == &apos;&gt;&apos; : amp_2 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_2 = blueDuration + 1           # set notetime_2 &gt; blueduration
                scoreText_2 = &apos;&apos;                        # clear scoreText_2
            if notetime_2 &gt;= blueDuration : break       # break out of the loop
	    if amp_2 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_2 = durlist_2[c_2]			# get duration from durlist
		amp_2 = amp_2-62			# move amp value to correct dbfs range (max=1)
		note_2 = notelist_2[c_2]		# get note from notelist
	        sp_2 = splist_2[c_2]			# get subpatch from splist
		pana_2 = panalist_2[c_2]		# get pana from panalist
		panb_2 = panblist_2[c_2]		# get panb from panblist
		nvat_2 = nvatlist_2[c_2]		# get nvat from nvatlist
		nvac_2 = nvaclist_2[c_2]		# get nvac from nvatlist
		nvpa_2 = nvpalist_2[c_2]		# get nvpa from nvpalist
		nvta_2 = nvtalist_2[c_2]		# get nvta from nvtalist
		nvxa_2 = nvxalist_2[c_2]		# get nvxa from nvxalist
		nvpb_2 = nvpblist_2[c_2]		# get nvpb from nvpblist
		nvxb_2 = nvxblist_2[c_2]		# get nvxb from nvxblist
		nvpc_2 = nvpclist_2[c_2]		# get nvpc from nvpclist
		nvtc_2 = nvtclist_2[c_2]		# get nvtc from nvtclist
		nvxc_2 = nvxclist_2[c_2]		# get nvxc from nvxclist
		mat_2 = matlist_2[c_2]			# get mat from matlist
		mac_2 = maclist_2[c_2]			# get mac from maclist
		mpa_2 = mpalist_2[c_2]			# get mpa from mpalist
		mta_2 = mtalist_2[c_2]			# get mta from mtalist
		mxa_2 = mxalist_2[c_2]			# get mxa from mxalist
		mpb_2 = mpblist_2[c_2]			# get mpb from mpblist
		mxb_2 = mxblist_2[c_2]			# get mxb from mxblist
		mpc_2 = mpclist_2[c_2]			# get mpc from mpclist
		mtc_2 = mtclist_2[c_2]			# get mtc from mtclist
		mxc_2 = mxclist_2[c_2]			# get mxc from mxclist
		bnda_2 = bndalist_2[c_2]		# get bnda from bndalist
		bndb_2 = bndblist_2[c_2]		# get bndb from bndblist
		bndc_2 = bndclist_2[c_2]		# get bndc from bndclist
		bndt_2 = bndtlist_2[c_2]		# get bndt from bndtlist		
		bndu_2 = bndulist_2[c_2]		# get bndu from bndulist		
		bndv_2 = bndvlist_2[c_2]		# get bndv from bndvlist		
                c_2 = c_2 + 1
                scoreText_2 += &quot;i1 &quot;+str(notetime_2)+&quot; &quot;+str(dur_2)+&quot; &quot;+str(amp_2)+&quot; &quot;+str(note_2)+&quot; &quot;+str(sp_2)+&quot; &quot;+str(pana_2)+&quot; &quot;+str(panb_2)+&quot; &quot;+str(nvat_2)+&quot; &quot;+str(nvac_2)+&quot; &quot;+str(nvpa_2)+&quot; &quot;+str(nvta_2)+&quot; &quot;+str(nvxa_2)+&quot; &quot;+str(nvpb_2)+&quot; &quot;+str(nvxb_2)+&quot; &quot;+str(nvpc_2)+&quot; &quot;+str(nvtc_2)+&quot; &quot;+str(nvxc_2)+&quot; &quot;+str(mat_2)+&quot; &quot;+str(mac_2)+&quot; &quot;+str(mpa_2)+&quot; &quot;+str(mta_2)+&quot; &quot;+str(mxa_2)+&quot; &quot;+str(mpb_2)+&quot; &quot;+str(mxb_2)+&quot; &quot;+str(mpc_2)+&quot; &quot;+str(mtc_2)+&quot; &quot;+str(mxc_2)+&quot; &quot;+str(bnda_2)+&quot; &quot;+str(bndb_2)+&quot; &quot;+str(bndc_2)+&quot; &quot;+str(bndt_2)+&quot; &quot;+str(bndu_2)+&quot; &quot;+str(bndv_2)+&quot; \n&quot;
            notetime_2 = notetime_2 + subeat_2                      # increment notetime by subeat time value
    i_2 = i_2 + 1
    c_2 = 0
score = scoreText_2
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.GenericScore'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>116.0</startTime>
          <name>Tapout_0</name>
          <backgroundColor>-16711736</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <score>;inst	strt		dur		vibfreq		amp	basefq		pana	panb	car	mod		ndx	ndxmul	ndxcrv
i3 	0		5 		.01 		12000 	110 		1	-1	1	2		9	3	3
i3 	1 		4 		.008 		7000 	330 		-1	1	1	3.9740267	27	3	3
i3 	1.66666666 	3.33333333 	.0066666666 	9500 	330 		-1	1	1	5.23011326	6	3	3

</score>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>121.0</startTime>
          <name>Ringer_10a</name>
          <backgroundColor>-10092442</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_2 - 3h13TET
scoreText_2 = &quot;&quot;                              	# scoreText_2 is cleared
bart_2 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_2 = [&apos;-&apos;,&apos;g&apos;,&apos;-&apos;,&apos;-&apos;,&apos;-&apos;]			# rhythm
bpb_2 = len(rhythmr0_2)                         # beats per bar
beat_2 = bart_2/bpb_2                           # time of beat in seconds
notetime_2 = 0                                  # set intitial note start time
durlist_2 = [2.66]			# note duration list
notelist_2 = [50]				# note list
splist_2 = [5]				# subpatch list
panalist_2 = [-.1]			# pana list
panblist_2 = [.1]			# panb list
nvatlist_2 = [1]			# nvat list
nvaclist_2 = [.5]				# nvac list
nvpalist_2 = [1]				# nvpa list
nvtalist_2 = [.5]			# nvta list
nvxalist_2 = [0]			# nvxa list
nvpblist_2 = [.9]			# nvpb list
nvxblist_2 = [.5]			# nvxb list
nvpclist_2 = [.7]			# nvpc list
nvtclist_2 = [1]			# nvtc list
nvxclist_2 = [1.5]			# nvxc list
matlist_2 = [1]		# mat list
maclist_2 = [0]			# mac list
mpalist_2 = [.5]			# mpa list
mtalist_2 = [.5]		# mta list
mxalist_2 = [.5]			# mxa list
mpblist_2 = [.5]			# mpb list
mxblist_2 = [.5]			# mxb list
mpclist_2 = [.3]		# mpc list
mtclist_2 = [1]			# mtc list
mxclist_2 = [1.5]			# mxc list
bndalist_2 = [1]			# bnda list
bndblist_2 = [1]			# bndb list
bndclist_2 = [1]			# bndc list
bndtlist_2 = [.5]			# bndt list
bndulist_2 = [.5]			# bndu list
bndvlist_2 = [.5]			# bndv list
i_2 = 0						# loop iteration counter
c_2 = 0						# note iteration counter
while i_2 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_2 in range(bpb_2) :                           # loop through the items in the rhythm list
        sb_2 = rhythmr0_2[a_2]                          # sb is current item in the rhythm list
        subeat_2 = beat_2/len(sb_2)                     # subeat is the number of sub-beats in the beat
        for b_2 in range(len(sb_2)) :                   # loop through the items in the beat string
            if sb_2[b_2].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_2[b_2])                   # get ascii number of the character
                if sb_2[b_2].isdigit() :                # check if character is numeric
                    amp_2 = (asky-47)                   # assign amplitude
                elif sb_2[b_2].isupper() :              # check if character is uppercase
                    amp_2 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_2 = (asky-60)                   # assign amplitude
            elif sb_2[b_2] == &apos;-&apos; : amp_2 = 0           # character for amp = 0                         
            elif sb_2[b_2] == &apos;&gt;&apos; : amp_2 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_2 = blueDuration + 1           # set notetime_2 &gt; blueduration
                scoreText_2 = &apos;&apos;                        # clear scoreText_2
            if notetime_2 &gt;= blueDuration : break       # break out of the loop
	    if amp_2 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_2 = durlist_2[c_2]			# get duration from durlist
		amp_2 = amp_2-62			# move amp value to correct dbfs range (max=1)
		note_2 = notelist_2[c_2]		# get note from notelist
	        sp_2 = splist_2[c_2]			# get subpatch from splist
		pana_2 = panalist_2[c_2]		# get pana from panalist
		panb_2 = panblist_2[c_2]		# get panb from panblist
		nvat_2 = nvatlist_2[c_2]		# get nvat from nvatlist
		nvac_2 = nvaclist_2[c_2]		# get nvac from nvatlist
		nvpa_2 = nvpalist_2[c_2]		# get nvpa from nvpalist
		nvta_2 = nvtalist_2[c_2]		# get nvta from nvtalist
		nvxa_2 = nvxalist_2[c_2]		# get nvxa from nvxalist
		nvpb_2 = nvpblist_2[c_2]		# get nvpb from nvpblist
		nvxb_2 = nvxblist_2[c_2]		# get nvxb from nvxblist
		nvpc_2 = nvpclist_2[c_2]		# get nvpc from nvpclist
		nvtc_2 = nvtclist_2[c_2]		# get nvtc from nvtclist
		nvxc_2 = nvxclist_2[c_2]		# get nvxc from nvxclist
		mat_2 = matlist_2[c_2]			# get mat from matlist
		mac_2 = maclist_2[c_2]			# get mac from maclist
		mpa_2 = mpalist_2[c_2]			# get mpa from mpalist
		mta_2 = mtalist_2[c_2]			# get mta from mtalist
		mxa_2 = mxalist_2[c_2]			# get mxa from mxalist
		mpb_2 = mpblist_2[c_2]			# get mpb from mpblist
		mxb_2 = mxblist_2[c_2]			# get mxb from mxblist
		mpc_2 = mpclist_2[c_2]			# get mpc from mpclist
		mtc_2 = mtclist_2[c_2]			# get mtc from mtclist
		mxc_2 = mxclist_2[c_2]			# get mxc from mxclist
		bnda_2 = bndalist_2[c_2]		# get bnda from bndalist
		bndb_2 = bndblist_2[c_2]		# get bndb from bndblist
		bndc_2 = bndclist_2[c_2]		# get bndc from bndclist
		bndt_2 = bndtlist_2[c_2]		# get bndt from bndtlist		
		bndu_2 = bndulist_2[c_2]		# get bndu from bndulist		
		bndv_2 = bndvlist_2[c_2]		# get bndv from bndvlist		
                c_2 = c_2 + 1
                scoreText_2 += &quot;i1 &quot;+str(notetime_2)+&quot; &quot;+str(dur_2)+&quot; &quot;+str(amp_2)+&quot; &quot;+str(note_2)+&quot; &quot;+str(sp_2)+&quot; &quot;+str(pana_2)+&quot; &quot;+str(panb_2)+&quot; &quot;+str(nvat_2)+&quot; &quot;+str(nvac_2)+&quot; &quot;+str(nvpa_2)+&quot; &quot;+str(nvta_2)+&quot; &quot;+str(nvxa_2)+&quot; &quot;+str(nvpb_2)+&quot; &quot;+str(nvxb_2)+&quot; &quot;+str(nvpc_2)+&quot; &quot;+str(nvtc_2)+&quot; &quot;+str(nvxc_2)+&quot; &quot;+str(mat_2)+&quot; &quot;+str(mac_2)+&quot; &quot;+str(mpa_2)+&quot; &quot;+str(mta_2)+&quot; &quot;+str(mxa_2)+&quot; &quot;+str(mpb_2)+&quot; &quot;+str(mxb_2)+&quot; &quot;+str(mpc_2)+&quot; &quot;+str(mtc_2)+&quot; &quot;+str(mxc_2)+&quot; &quot;+str(bnda_2)+&quot; &quot;+str(bndb_2)+&quot; &quot;+str(bndc_2)+&quot; &quot;+str(bndt_2)+&quot; &quot;+str(bndu_2)+&quot; &quot;+str(bndv_2)+&quot; \n&quot;
            notetime_2 = notetime_2 + subeat_2                      # increment notetime by subeat time value
    i_2 = i_2 + 1
    c_2 = 0
score = scoreText_2
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>126.0</startTime>
          <name>Ringer_10b</name>
          <backgroundColor>-10092442</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_2 - 3h13TET
scoreText_2 = &quot;&quot;                              	# scoreText_2 is cleared
bart_2 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_2 = [&apos;-&apos;,&apos;e&apos;,&apos;-&apos;,&apos;-&apos;,&apos;-&apos;]			# rhythm
bpb_2 = len(rhythmr0_2)                         # beats per bar
beat_2 = bart_2/bpb_2                           # time of beat in seconds
notetime_2 = 0                                  # set intitial note start time
durlist_2 = [2.66]			# note duration list
notelist_2 = [49]				# note list
splist_2 = [6]				# subpatch list
panalist_2 = [-.1]			# pana list
panblist_2 = [.1]			# panb list
nvatlist_2 = [1]			# nvat list
nvaclist_2 = [.5]				# nvac list
nvpalist_2 = [1]				# nvpa list
nvtalist_2 = [.5]			# nvta list
nvxalist_2 = [0]			# nvxa list
nvpblist_2 = [.9]			# nvpb list
nvxblist_2 = [.5]			# nvxb list
nvpclist_2 = [.7]			# nvpc list
nvtclist_2 = [1]			# nvtc list
nvxclist_2 = [1.5]			# nvxc list
matlist_2 = [1]		# mat list
maclist_2 = [0]			# mac list
mpalist_2 = [.5]			# mpa list
mtalist_2 = [.5]		# mta list
mxalist_2 = [.5]			# mxa list
mpblist_2 = [.5]			# mpb list
mxblist_2 = [.5]			# mxb list
mpclist_2 = [.3]		# mpc list
mtclist_2 = [1]			# mtc list
mxclist_2 = [1.5]			# mxc list
bndalist_2 = [1]			# bnda list
bndblist_2 = [1]			# bndb list
bndclist_2 = [1]			# bndc list
bndtlist_2 = [.5]			# bndt list
bndulist_2 = [.5]			# bndu list
bndvlist_2 = [.5]			# bndv list
i_2 = 0						# loop iteration counter
c_2 = 0						# note iteration counter
while i_2 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_2 in range(bpb_2) :                           # loop through the items in the rhythm list
        sb_2 = rhythmr0_2[a_2]                          # sb is current item in the rhythm list
        subeat_2 = beat_2/len(sb_2)                     # subeat is the number of sub-beats in the beat
        for b_2 in range(len(sb_2)) :                   # loop through the items in the beat string
            if sb_2[b_2].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_2[b_2])                   # get ascii number of the character
                if sb_2[b_2].isdigit() :                # check if character is numeric
                    amp_2 = (asky-47)                   # assign amplitude
                elif sb_2[b_2].isupper() :              # check if character is uppercase
                    amp_2 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_2 = (asky-60)                   # assign amplitude
            elif sb_2[b_2] == &apos;-&apos; : amp_2 = 0           # character for amp = 0                         
            elif sb_2[b_2] == &apos;&gt;&apos; : amp_2 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_2 = blueDuration + 1           # set notetime_2 &gt; blueduration
                scoreText_2 = &apos;&apos;                        # clear scoreText_2
            if notetime_2 &gt;= blueDuration : break       # break out of the loop
	    if amp_2 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_2 = durlist_2[c_2]			# get duration from durlist
		amp_2 = amp_2-62			# move amp value to correct dbfs range (max=1)
		note_2 = notelist_2[c_2]		# get note from notelist
	        sp_2 = splist_2[c_2]			# get subpatch from splist
		pana_2 = panalist_2[c_2]		# get pana from panalist
		panb_2 = panblist_2[c_2]		# get panb from panblist
		nvat_2 = nvatlist_2[c_2]		# get nvat from nvatlist
		nvac_2 = nvaclist_2[c_2]		# get nvac from nvatlist
		nvpa_2 = nvpalist_2[c_2]		# get nvpa from nvpalist
		nvta_2 = nvtalist_2[c_2]		# get nvta from nvtalist
		nvxa_2 = nvxalist_2[c_2]		# get nvxa from nvxalist
		nvpb_2 = nvpblist_2[c_2]		# get nvpb from nvpblist
		nvxb_2 = nvxblist_2[c_2]		# get nvxb from nvxblist
		nvpc_2 = nvpclist_2[c_2]		# get nvpc from nvpclist
		nvtc_2 = nvtclist_2[c_2]		# get nvtc from nvtclist
		nvxc_2 = nvxclist_2[c_2]		# get nvxc from nvxclist
		mat_2 = matlist_2[c_2]			# get mat from matlist
		mac_2 = maclist_2[c_2]			# get mac from maclist
		mpa_2 = mpalist_2[c_2]			# get mpa from mpalist
		mta_2 = mtalist_2[c_2]			# get mta from mtalist
		mxa_2 = mxalist_2[c_2]			# get mxa from mxalist
		mpb_2 = mpblist_2[c_2]			# get mpb from mpblist
		mxb_2 = mxblist_2[c_2]			# get mxb from mxblist
		mpc_2 = mpclist_2[c_2]			# get mpc from mpclist
		mtc_2 = mtclist_2[c_2]			# get mtc from mtclist
		mxc_2 = mxclist_2[c_2]			# get mxc from mxclist
		bnda_2 = bndalist_2[c_2]		# get bnda from bndalist
		bndb_2 = bndblist_2[c_2]		# get bndb from bndblist
		bndc_2 = bndclist_2[c_2]		# get bndc from bndclist
		bndt_2 = bndtlist_2[c_2]		# get bndt from bndtlist		
		bndu_2 = bndulist_2[c_2]		# get bndu from bndulist		
		bndv_2 = bndvlist_2[c_2]		# get bndv from bndvlist		
                c_2 = c_2 + 1
                scoreText_2 += &quot;i1 &quot;+str(notetime_2)+&quot; &quot;+str(dur_2)+&quot; &quot;+str(amp_2)+&quot; &quot;+str(note_2)+&quot; &quot;+str(sp_2)+&quot; &quot;+str(pana_2)+&quot; &quot;+str(panb_2)+&quot; &quot;+str(nvat_2)+&quot; &quot;+str(nvac_2)+&quot; &quot;+str(nvpa_2)+&quot; &quot;+str(nvta_2)+&quot; &quot;+str(nvxa_2)+&quot; &quot;+str(nvpb_2)+&quot; &quot;+str(nvxb_2)+&quot; &quot;+str(nvpc_2)+&quot; &quot;+str(nvtc_2)+&quot; &quot;+str(nvxc_2)+&quot; &quot;+str(mat_2)+&quot; &quot;+str(mac_2)+&quot; &quot;+str(mpa_2)+&quot; &quot;+str(mta_2)+&quot; &quot;+str(mxa_2)+&quot; &quot;+str(mpb_2)+&quot; &quot;+str(mxb_2)+&quot; &quot;+str(mpc_2)+&quot; &quot;+str(mtc_2)+&quot; &quot;+str(mxc_2)+&quot; &quot;+str(bnda_2)+&quot; &quot;+str(bndb_2)+&quot; &quot;+str(bndc_2)+&quot; &quot;+str(bndt_2)+&quot; &quot;+str(bndu_2)+&quot; &quot;+str(bndv_2)+&quot; \n&quot;
            notetime_2 = notetime_2 + subeat_2                      # increment notetime by subeat time value
    i_2 = i_2 + 1
    c_2 = 0
score = scoreText_2
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>131.0</startTime>
          <name>Ringer_10a</name>
          <backgroundColor>-10092442</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_2 - 3h13TET
scoreText_2 = &quot;&quot;                              	# scoreText_2 is cleared
bart_2 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_2 = [&apos;-&apos;,&apos;g&apos;,&apos;-&apos;,&apos;-&apos;,&apos;-&apos;]			# rhythm
bpb_2 = len(rhythmr0_2)                         # beats per bar
beat_2 = bart_2/bpb_2                           # time of beat in seconds
notetime_2 = 0                                  # set intitial note start time
durlist_2 = [2.66]			# note duration list
notelist_2 = [50]				# note list
splist_2 = [5]				# subpatch list
panalist_2 = [-.1]			# pana list
panblist_2 = [.1]			# panb list
nvatlist_2 = [1]			# nvat list
nvaclist_2 = [.5]				# nvac list
nvpalist_2 = [1]				# nvpa list
nvtalist_2 = [.5]			# nvta list
nvxalist_2 = [0]			# nvxa list
nvpblist_2 = [.9]			# nvpb list
nvxblist_2 = [.5]			# nvxb list
nvpclist_2 = [.7]			# nvpc list
nvtclist_2 = [1]			# nvtc list
nvxclist_2 = [1.5]			# nvxc list
matlist_2 = [1]		# mat list
maclist_2 = [0]			# mac list
mpalist_2 = [.5]			# mpa list
mtalist_2 = [.5]		# mta list
mxalist_2 = [.5]			# mxa list
mpblist_2 = [.5]			# mpb list
mxblist_2 = [.5]			# mxb list
mpclist_2 = [.3]		# mpc list
mtclist_2 = [1]			# mtc list
mxclist_2 = [1.5]			# mxc list
bndalist_2 = [1]			# bnda list
bndblist_2 = [1]			# bndb list
bndclist_2 = [1]			# bndc list
bndtlist_2 = [.5]			# bndt list
bndulist_2 = [.5]			# bndu list
bndvlist_2 = [.5]			# bndv list
i_2 = 0						# loop iteration counter
c_2 = 0						# note iteration counter
while i_2 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_2 in range(bpb_2) :                           # loop through the items in the rhythm list
        sb_2 = rhythmr0_2[a_2]                          # sb is current item in the rhythm list
        subeat_2 = beat_2/len(sb_2)                     # subeat is the number of sub-beats in the beat
        for b_2 in range(len(sb_2)) :                   # loop through the items in the beat string
            if sb_2[b_2].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_2[b_2])                   # get ascii number of the character
                if sb_2[b_2].isdigit() :                # check if character is numeric
                    amp_2 = (asky-47)                   # assign amplitude
                elif sb_2[b_2].isupper() :              # check if character is uppercase
                    amp_2 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_2 = (asky-60)                   # assign amplitude
            elif sb_2[b_2] == &apos;-&apos; : amp_2 = 0           # character for amp = 0                         
            elif sb_2[b_2] == &apos;&gt;&apos; : amp_2 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_2 = blueDuration + 1           # set notetime_2 &gt; blueduration
                scoreText_2 = &apos;&apos;                        # clear scoreText_2
            if notetime_2 &gt;= blueDuration : break       # break out of the loop
	    if amp_2 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_2 = durlist_2[c_2]			# get duration from durlist
		amp_2 = amp_2-62			# move amp value to correct dbfs range (max=1)
		note_2 = notelist_2[c_2]		# get note from notelist
	        sp_2 = splist_2[c_2]			# get subpatch from splist
		pana_2 = panalist_2[c_2]		# get pana from panalist
		panb_2 = panblist_2[c_2]		# get panb from panblist
		nvat_2 = nvatlist_2[c_2]		# get nvat from nvatlist
		nvac_2 = nvaclist_2[c_2]		# get nvac from nvatlist
		nvpa_2 = nvpalist_2[c_2]		# get nvpa from nvpalist
		nvta_2 = nvtalist_2[c_2]		# get nvta from nvtalist
		nvxa_2 = nvxalist_2[c_2]		# get nvxa from nvxalist
		nvpb_2 = nvpblist_2[c_2]		# get nvpb from nvpblist
		nvxb_2 = nvxblist_2[c_2]		# get nvxb from nvxblist
		nvpc_2 = nvpclist_2[c_2]		# get nvpc from nvpclist
		nvtc_2 = nvtclist_2[c_2]		# get nvtc from nvtclist
		nvxc_2 = nvxclist_2[c_2]		# get nvxc from nvxclist
		mat_2 = matlist_2[c_2]			# get mat from matlist
		mac_2 = maclist_2[c_2]			# get mac from maclist
		mpa_2 = mpalist_2[c_2]			# get mpa from mpalist
		mta_2 = mtalist_2[c_2]			# get mta from mtalist
		mxa_2 = mxalist_2[c_2]			# get mxa from mxalist
		mpb_2 = mpblist_2[c_2]			# get mpb from mpblist
		mxb_2 = mxblist_2[c_2]			# get mxb from mxblist
		mpc_2 = mpclist_2[c_2]			# get mpc from mpclist
		mtc_2 = mtclist_2[c_2]			# get mtc from mtclist
		mxc_2 = mxclist_2[c_2]			# get mxc from mxclist
		bnda_2 = bndalist_2[c_2]		# get bnda from bndalist
		bndb_2 = bndblist_2[c_2]		# get bndb from bndblist
		bndc_2 = bndclist_2[c_2]		# get bndc from bndclist
		bndt_2 = bndtlist_2[c_2]		# get bndt from bndtlist		
		bndu_2 = bndulist_2[c_2]		# get bndu from bndulist		
		bndv_2 = bndvlist_2[c_2]		# get bndv from bndvlist		
                c_2 = c_2 + 1
                scoreText_2 += &quot;i1 &quot;+str(notetime_2)+&quot; &quot;+str(dur_2)+&quot; &quot;+str(amp_2)+&quot; &quot;+str(note_2)+&quot; &quot;+str(sp_2)+&quot; &quot;+str(pana_2)+&quot; &quot;+str(panb_2)+&quot; &quot;+str(nvat_2)+&quot; &quot;+str(nvac_2)+&quot; &quot;+str(nvpa_2)+&quot; &quot;+str(nvta_2)+&quot; &quot;+str(nvxa_2)+&quot; &quot;+str(nvpb_2)+&quot; &quot;+str(nvxb_2)+&quot; &quot;+str(nvpc_2)+&quot; &quot;+str(nvtc_2)+&quot; &quot;+str(nvxc_2)+&quot; &quot;+str(mat_2)+&quot; &quot;+str(mac_2)+&quot; &quot;+str(mpa_2)+&quot; &quot;+str(mta_2)+&quot; &quot;+str(mxa_2)+&quot; &quot;+str(mpb_2)+&quot; &quot;+str(mxb_2)+&quot; &quot;+str(mpc_2)+&quot; &quot;+str(mtc_2)+&quot; &quot;+str(mxc_2)+&quot; &quot;+str(bnda_2)+&quot; &quot;+str(bndb_2)+&quot; &quot;+str(bndc_2)+&quot; &quot;+str(bndt_2)+&quot; &quot;+str(bndu_2)+&quot; &quot;+str(bndv_2)+&quot; \n&quot;
            notetime_2 = notetime_2 + subeat_2                      # increment notetime by subeat time value
    i_2 = i_2 + 1
    c_2 = 0
score = scoreText_2
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>136.0</startTime>
          <name>Ringer_10d</name>
          <backgroundColor>-10092442</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_2 - 3h13TET
scoreText_2 = &quot;&quot;                              	# scoreText_2 is cleared
bart_2 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_2 = [&apos;-&apos;,&apos;e&apos;,&apos;-&apos;,&apos;-&apos;,&apos;-&apos;]			# rhythm
bpb_2 = len(rhythmr0_2)                         # beats per bar
beat_2 = bart_2/bpb_2                           # time of beat in seconds
notetime_2 = 0                                  # set intitial note start time
durlist_2 = [3]			# note duration list
notelist_2 = [48]				# note list
splist_2 = [6]				# subpatch list
panalist_2 = [-.1]			# pana list
panblist_2 = [.1]			# panb list
nvatlist_2 = [1]			# nvat list
nvaclist_2 = [.5]				# nvac list
nvpalist_2 = [1]				# nvpa list
nvtalist_2 = [.5]			# nvta list
nvxalist_2 = [0]			# nvxa list
nvpblist_2 = [.9]			# nvpb list
nvxblist_2 = [.5]			# nvxb list
nvpclist_2 = [.7]			# nvpc list
nvtclist_2 = [1.99]			# nvtc list
nvxclist_2 = [1.5]			# nvxc list
matlist_2 = [1]		# mat list
maclist_2 = [0]			# mac list
mpalist_2 = [.5]			# mpa list
mtalist_2 = [.5]		# mta list
mxalist_2 = [.5]			# mxa list
mpblist_2 = [.5]			# mpb list
mxblist_2 = [.5]			# mxb list
mpclist_2 = [.3]		# mpc list
mtclist_2 = [1.99]			# mtc list
mxclist_2 = [1.5]			# mxc list
bndalist_2 = [1]			# bnda list
bndblist_2 = [1]			# bndb list
bndclist_2 = [1]			# bndc list
bndtlist_2 = [.5]			# bndt list
bndulist_2 = [.5]			# bndu list
bndvlist_2 = [.5]			# bndv list
i_2 = 0						# loop iteration counter
c_2 = 0						# note iteration counter
while i_2 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_2 in range(bpb_2) :                           # loop through the items in the rhythm list
        sb_2 = rhythmr0_2[a_2]                          # sb is current item in the rhythm list
        subeat_2 = beat_2/len(sb_2)                     # subeat is the number of sub-beats in the beat
        for b_2 in range(len(sb_2)) :                   # loop through the items in the beat string
            if sb_2[b_2].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_2[b_2])                   # get ascii number of the character
                if sb_2[b_2].isdigit() :                # check if character is numeric
                    amp_2 = (asky-47)                   # assign amplitude
                elif sb_2[b_2].isupper() :              # check if character is uppercase
                    amp_2 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_2 = (asky-60)                   # assign amplitude
            elif sb_2[b_2] == &apos;-&apos; : amp_2 = 0           # character for amp = 0                         
            elif sb_2[b_2] == &apos;&gt;&apos; : amp_2 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_2 = blueDuration + 1           # set notetime_2 &gt; blueduration
                scoreText_2 = &apos;&apos;                        # clear scoreText_2
            if notetime_2 &gt;= blueDuration : break       # break out of the loop
	    if amp_2 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_2 = durlist_2[c_2]			# get duration from durlist
		amp_2 = amp_2-62			# move amp value to correct dbfs range (max=1)
		note_2 = notelist_2[c_2]		# get note from notelist
	        sp_2 = splist_2[c_2]			# get subpatch from splist
		pana_2 = panalist_2[c_2]		# get pana from panalist
		panb_2 = panblist_2[c_2]		# get panb from panblist
		nvat_2 = nvatlist_2[c_2]		# get nvat from nvatlist
		nvac_2 = nvaclist_2[c_2]		# get nvac from nvatlist
		nvpa_2 = nvpalist_2[c_2]		# get nvpa from nvpalist
		nvta_2 = nvtalist_2[c_2]		# get nvta from nvtalist
		nvxa_2 = nvxalist_2[c_2]		# get nvxa from nvxalist
		nvpb_2 = nvpblist_2[c_2]		# get nvpb from nvpblist
		nvxb_2 = nvxblist_2[c_2]		# get nvxb from nvxblist
		nvpc_2 = nvpclist_2[c_2]		# get nvpc from nvpclist
		nvtc_2 = nvtclist_2[c_2]		# get nvtc from nvtclist
		nvxc_2 = nvxclist_2[c_2]		# get nvxc from nvxclist
		mat_2 = matlist_2[c_2]			# get mat from matlist
		mac_2 = maclist_2[c_2]			# get mac from maclist
		mpa_2 = mpalist_2[c_2]			# get mpa from mpalist
		mta_2 = mtalist_2[c_2]			# get mta from mtalist
		mxa_2 = mxalist_2[c_2]			# get mxa from mxalist
		mpb_2 = mpblist_2[c_2]			# get mpb from mpblist
		mxb_2 = mxblist_2[c_2]			# get mxb from mxblist
		mpc_2 = mpclist_2[c_2]			# get mpc from mpclist
		mtc_2 = mtclist_2[c_2]			# get mtc from mtclist
		mxc_2 = mxclist_2[c_2]			# get mxc from mxclist
		bnda_2 = bndalist_2[c_2]		# get bnda from bndalist
		bndb_2 = bndblist_2[c_2]		# get bndb from bndblist
		bndc_2 = bndclist_2[c_2]		# get bndc from bndclist
		bndt_2 = bndtlist_2[c_2]		# get bndt from bndtlist		
		bndu_2 = bndulist_2[c_2]		# get bndu from bndulist		
		bndv_2 = bndvlist_2[c_2]		# get bndv from bndvlist		
                c_2 = c_2 + 1
                scoreText_2 += &quot;i1 &quot;+str(notetime_2)+&quot; &quot;+str(dur_2)+&quot; &quot;+str(amp_2)+&quot; &quot;+str(note_2)+&quot; &quot;+str(sp_2)+&quot; &quot;+str(pana_2)+&quot; &quot;+str(panb_2)+&quot; &quot;+str(nvat_2)+&quot; &quot;+str(nvac_2)+&quot; &quot;+str(nvpa_2)+&quot; &quot;+str(nvta_2)+&quot; &quot;+str(nvxa_2)+&quot; &quot;+str(nvpb_2)+&quot; &quot;+str(nvxb_2)+&quot; &quot;+str(nvpc_2)+&quot; &quot;+str(nvtc_2)+&quot; &quot;+str(nvxc_2)+&quot; &quot;+str(mat_2)+&quot; &quot;+str(mac_2)+&quot; &quot;+str(mpa_2)+&quot; &quot;+str(mta_2)+&quot; &quot;+str(mxa_2)+&quot; &quot;+str(mpb_2)+&quot; &quot;+str(mxb_2)+&quot; &quot;+str(mpc_2)+&quot; &quot;+str(mtc_2)+&quot; &quot;+str(mxc_2)+&quot; &quot;+str(bnda_2)+&quot; &quot;+str(bndb_2)+&quot; &quot;+str(bndc_2)+&quot; &quot;+str(bndt_2)+&quot; &quot;+str(bndu_2)+&quot; &quot;+str(bndv_2)+&quot; \n&quot;
            notetime_2 = notetime_2 + subeat_2                      # increment notetime by subeat time value
    i_2 = i_2 + 1
    c_2 = 0
score = scoreText_2
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>141.0</startTime>
          <name>Ringer_10a</name>
          <backgroundColor>-10092442</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_2 - 3h13TET
scoreText_2 = &quot;&quot;                              	# scoreText_2 is cleared
bart_2 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_2 = [&apos;-&apos;,&apos;b&apos;,&apos;-&apos;,&apos;-&apos;,&apos;-&apos;]			# rhythm
bpb_2 = len(rhythmr0_2)                         # beats per bar
beat_2 = bart_2/bpb_2                           # time of beat in seconds
notetime_2 = 0                                  # set intitial note start time
durlist_2 = [4]			# note duration list
notelist_2 = [50]				# note list
splist_2 = [5]				# subpatch list
panalist_2 = [-.9]			# pana list
panblist_2 = [.9]			# panb list
nvatlist_2 = [2]			# nvat list
nvaclist_2 = [.5]				# nvac list
nvpalist_2 = [1]				# nvpa list
nvtalist_2 = [.5]			# nvta list
nvxalist_2 = [0]			# nvxa list
nvpblist_2 = [.9]			# nvpb list
nvxblist_2 = [.5]			# nvxb list
nvpclist_2 = [.7]			# nvpc list
nvtclist_2 = [3.99]			# nvtc list
nvxclist_2 = [1.5]			# nvxc list
matlist_2 = [2]		# mat list
maclist_2 = [0]			# mac list
mpalist_2 = [.5]			# mpa list
mtalist_2 = [.5]		# mta list
mxalist_2 = [.5]			# mxa list
mpblist_2 = [.5]			# mpb list
mxblist_2 = [.5]			# mxb list
mpclist_2 = [.3]		# mpc list
mtclist_2 = [2.99]			# mtc list
mxclist_2 = [3]			# mxc list
bndalist_2 = [1]			# bnda list
bndblist_2 = [1]			# bndb list
bndclist_2 = [1]			# bndc list
bndtlist_2 = [.5]			# bndt list
bndulist_2 = [.5]			# bndu list
bndvlist_2 = [.5]			# bndv list
i_2 = 0						# loop iteration counter
c_2 = 0						# note iteration counter
while i_2 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_2 in range(bpb_2) :                           # loop through the items in the rhythm list
        sb_2 = rhythmr0_2[a_2]                          # sb is current item in the rhythm list
        subeat_2 = beat_2/len(sb_2)                     # subeat is the number of sub-beats in the beat
        for b_2 in range(len(sb_2)) :                   # loop through the items in the beat string
            if sb_2[b_2].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_2[b_2])                   # get ascii number of the character
                if sb_2[b_2].isdigit() :                # check if character is numeric
                    amp_2 = (asky-47)                   # assign amplitude
                elif sb_2[b_2].isupper() :              # check if character is uppercase
                    amp_2 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_2 = (asky-60)                   # assign amplitude
            elif sb_2[b_2] == &apos;-&apos; : amp_2 = 0           # character for amp = 0                         
            elif sb_2[b_2] == &apos;&gt;&apos; : amp_2 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_2 = blueDuration + 1           # set notetime_2 &gt; blueduration
                scoreText_2 = &apos;&apos;                        # clear scoreText_2
            if notetime_2 &gt;= blueDuration : break       # break out of the loop
	    if amp_2 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_2 = durlist_2[c_2]			# get duration from durlist
		amp_2 = amp_2-62			# move amp value to correct dbfs range (max=1)
		note_2 = notelist_2[c_2]		# get note from notelist
	        sp_2 = splist_2[c_2]			# get subpatch from splist
		pana_2 = panalist_2[c_2]		# get pana from panalist
		panb_2 = panblist_2[c_2]		# get panb from panblist
		nvat_2 = nvatlist_2[c_2]		# get nvat from nvatlist
		nvac_2 = nvaclist_2[c_2]		# get nvac from nvatlist
		nvpa_2 = nvpalist_2[c_2]		# get nvpa from nvpalist
		nvta_2 = nvtalist_2[c_2]		# get nvta from nvtalist
		nvxa_2 = nvxalist_2[c_2]		# get nvxa from nvxalist
		nvpb_2 = nvpblist_2[c_2]		# get nvpb from nvpblist
		nvxb_2 = nvxblist_2[c_2]		# get nvxb from nvxblist
		nvpc_2 = nvpclist_2[c_2]		# get nvpc from nvpclist
		nvtc_2 = nvtclist_2[c_2]		# get nvtc from nvtclist
		nvxc_2 = nvxclist_2[c_2]		# get nvxc from nvxclist
		mat_2 = matlist_2[c_2]			# get mat from matlist
		mac_2 = maclist_2[c_2]			# get mac from maclist
		mpa_2 = mpalist_2[c_2]			# get mpa from mpalist
		mta_2 = mtalist_2[c_2]			# get mta from mtalist
		mxa_2 = mxalist_2[c_2]			# get mxa from mxalist
		mpb_2 = mpblist_2[c_2]			# get mpb from mpblist
		mxb_2 = mxblist_2[c_2]			# get mxb from mxblist
		mpc_2 = mpclist_2[c_2]			# get mpc from mpclist
		mtc_2 = mtclist_2[c_2]			# get mtc from mtclist
		mxc_2 = mxclist_2[c_2]			# get mxc from mxclist
		bnda_2 = bndalist_2[c_2]		# get bnda from bndalist
		bndb_2 = bndblist_2[c_2]		# get bndb from bndblist
		bndc_2 = bndclist_2[c_2]		# get bndc from bndclist
		bndt_2 = bndtlist_2[c_2]		# get bndt from bndtlist		
		bndu_2 = bndulist_2[c_2]		# get bndu from bndulist		
		bndv_2 = bndvlist_2[c_2]		# get bndv from bndvlist		
                c_2 = c_2 + 1
                scoreText_2 += &quot;i1 &quot;+str(notetime_2)+&quot; &quot;+str(dur_2)+&quot; &quot;+str(amp_2)+&quot; &quot;+str(note_2)+&quot; &quot;+str(sp_2)+&quot; &quot;+str(pana_2)+&quot; &quot;+str(panb_2)+&quot; &quot;+str(nvat_2)+&quot; &quot;+str(nvac_2)+&quot; &quot;+str(nvpa_2)+&quot; &quot;+str(nvta_2)+&quot; &quot;+str(nvxa_2)+&quot; &quot;+str(nvpb_2)+&quot; &quot;+str(nvxb_2)+&quot; &quot;+str(nvpc_2)+&quot; &quot;+str(nvtc_2)+&quot; &quot;+str(nvxc_2)+&quot; &quot;+str(mat_2)+&quot; &quot;+str(mac_2)+&quot; &quot;+str(mpa_2)+&quot; &quot;+str(mta_2)+&quot; &quot;+str(mxa_2)+&quot; &quot;+str(mpb_2)+&quot; &quot;+str(mxb_2)+&quot; &quot;+str(mpc_2)+&quot; &quot;+str(mtc_2)+&quot; &quot;+str(mxc_2)+&quot; &quot;+str(bnda_2)+&quot; &quot;+str(bndb_2)+&quot; &quot;+str(bndc_2)+&quot; &quot;+str(bndt_2)+&quot; &quot;+str(bndu_2)+&quot; &quot;+str(bndv_2)+&quot; \n&quot;
            notetime_2 = notetime_2 + subeat_2                      # increment notetime by subeat time value
    i_2 = i_2 + 1
    c_2 = 0
score = scoreText_2
</pythonCode>
        </soundObject>
      </soundLayer>
      <soundLayer name='' muted='false' solo='false' heightIndex='0'>
        <noteProcessorChain/>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>15.0</startTime>
          <name>Ringer_3a</name>
          <backgroundColor>-6710785</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_3 - 3h6TET
scoreText_3 = &quot;&quot;                              	# scoreText_3 is cleared
bart_3 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_3 = [&apos;gbeba&apos;,&apos;fbeba&apos;,&apos;fbece&apos;]		# rhythm
bpb_3 = len(rhythmr0_3)                         # beats per bar
beat_3 = bart_3/bpb_3                           # time of beat in seconds
notetime_3 = 0                                  # set intitial note start time
durlist_3 = [.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33]		# note duration list
notelist_3 = [76,82,80,79,76,75,80,79,76,75,73,79,76,75,73]			# note list
splist_3 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]				# subpatch list
panalist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# pana list
panblist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# panb list
nvatlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]		# nvat list
nvaclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]				# nvac list
nvpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]				# nvpa list
nvtalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]		# nvta list
nvxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxa list
nvpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpb list
nvxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxb list
nvpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpc list
nvtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# nvtc list
nvxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]			# nvxc list
matlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]	# mat list
maclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mac list
mpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpa list
mtalist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1]		# mta list
mxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxa list
mpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpb list
mxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxb list
mpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpc list
mtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# mtc list
mxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]	# mxc list
bndalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bnda list
bndblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndb list
bndclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndc list
bndtlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndt list
bndulist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndu list
bndvlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndv list
i_3 = 0						# loop iteration counter
c_3 = 0						# note iteration counter
while i_3 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_3 in range(bpb_3) :                           # loop through the items in the rhythm list
        sb_3 = rhythmr0_3[a_3]                          # sb is current item in the rhythm list
        subeat_3 = beat_3/len(sb_3)                     # subeat is the number of sub-beats in the beat
        for b_3 in range(len(sb_3)) :                   # loop through the items in the beat string
            if sb_3[b_3].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_3[b_3])                   # get ascii number of the character
                if sb_3[b_3].isdigit() :                # check if character is numeric
                    amp_3 = (asky-47)                   # assign amplitude
                elif sb_3[b_3].isupper() :              # check if character is uppercase
                    amp_3 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_3 = (asky-60)                   # assign amplitude
            elif sb_3[b_3] == &apos;-&apos; : amp_3 = 0           # character for amp = 0                         
            elif sb_3[b_3] == &apos;&gt;&apos; : amp_3 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_3 = blueDuration + 1           # set notetime_3 &gt; blueduration
                scoreText_3 = &apos;&apos;                        # clear scoreText_3
            if notetime_3 &gt;= blueDuration : break       # break out of the loop
	    if amp_3 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_3 = durlist_3[c_3]			# get duration from durlist
		amp_3 = amp_3-62			# move amp value to correct dbfs range (max=1)
		note_3 = notelist_3[c_3]		# get note from notelist
	        sp_3 = splist_3[c_3]			# get subpatch from splist
		pana_3 = panalist_3[c_3]		# get pana from panalist
		panb_3 = panblist_3[c_3]		# get panb from panblist
		nvat_3 = nvatlist_3[c_3]		# get nvat from nvatlist
		nvac_3 = nvaclist_3[c_3]		# get nvac from nvatlist
		nvpa_3 = nvpalist_3[c_3]		# get nvpa from nvpalist
		nvta_3 = nvtalist_3[c_3]		# get nvta from nvtalist
		nvxa_3 = nvxalist_3[c_3]		# get nvxa from nvxalist
		nvpb_3 = nvpblist_3[c_3]		# get nvpb from nvpblist
		nvxb_3 = nvxblist_3[c_3]		# get nvxb from nvxblist
		nvpc_3 = nvpclist_3[c_3]		# get nvpc from nvpclist
		nvtc_3 = nvtclist_3[c_3]		# get nvtc from nvtclist
		nvxc_3 = nvxclist_3[c_3]		# get nvxc from nvxclist
		mat_3 = matlist_3[c_3]			# get mat from matlist
		mac_3 = maclist_3[c_3]			# get mac from maclist
		mpa_3 = mpalist_3[c_3]			# get mpa from mpalist
		mta_3 = mtalist_3[c_3]			# get mta from mtalist
		mxa_3 = mxalist_3[c_3]			# get mxa from mxalist
		mpb_3 = mpblist_3[c_3]			# get mpb from mpblist
		mxb_3 = mxblist_3[c_3]			# get mxb from mxblist
		mpc_3 = mpclist_3[c_3]			# get mpc from mpclist
		mtc_3 = mtclist_3[c_3]			# get mtc from mtclist
		mxc_3 = mxclist_3[c_3]			# get mxc from mxclist
		bnda_3 = bndalist_3[c_3]		# get bnda from bndalist
		bndb_3 = bndblist_3[c_3]		# get bndb from bndblist
		bndc_3 = bndclist_3[c_3]		# get bndc from bndclist
		bndt_3 = bndtlist_3[c_3]		# get bndt from bndtlist		
		bndu_3 = bndulist_3[c_3]		# get bndu from bndulist		
		bndv_3 = bndvlist_3[c_3]		# get bndv from bndvlist		
                c_3 = c_3 + 1
                scoreText_3 += &quot;i2 &quot;+str(notetime_3-nvat_3)+&quot; &quot;+str(dur_3)+&quot; &quot;+str(amp_3)+&quot; &quot;+str(note_3)+&quot; &quot;+str(sp_3)+&quot; &quot;+str(pana_3)+&quot; &quot;+str(panb_3)+&quot; &quot;+str(nvat_3)+&quot; &quot;+str(nvac_3)+&quot; &quot;+str(nvpa_3)+&quot; &quot;+str(nvta_3)+&quot; &quot;+str(nvxa_3)+&quot; &quot;+str(nvpb_3)+&quot; &quot;+str(nvxb_3)+&quot; &quot;+str(nvpc_3)+&quot; &quot;+str(nvtc_3)+&quot; &quot;+str(nvxc_3)+&quot; &quot;+str(mat_3)+&quot; &quot;+str(mac_3)+&quot; &quot;+str(mpa_3)+&quot; &quot;+str(mta_3)+&quot; &quot;+str(mxa_3)+&quot; &quot;+str(mpb_3)+&quot; &quot;+str(mxb_3)+&quot; &quot;+str(mpc_3)+&quot; &quot;+str(mtc_3)+&quot; &quot;+str(mxc_3)+&quot; &quot;+str(bnda_3)+&quot; &quot;+str(bndb_3)+&quot; &quot;+str(bndc_3)+&quot; &quot;+str(bndt_3)+&quot; &quot;+str(bndu_3)+&quot; &quot;+str(bndv_3)+&quot; \n&quot;
            notetime_3 = notetime_3 + subeat_3                      # increment notetime by subeat time value
    i_3 = i_3 + 1
    c_3 = 0
score = scoreText_3
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>20.0</startTime>
          <name>Ringer_3b</name>
          <backgroundColor>-6710785</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_3 - 3h13TET
scoreText_3 = &quot;&quot;                              	# scoreText_3 is cleared
bart_3 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_3 = [&apos;gbeba&apos;,&apos;fbeba&apos;,&apos;fbece&apos;]		# rhythm
bpb_3 = len(rhythmr0_3)                         # beats per bar
beat_3 = bart_3/bpb_3                           # time of beat in seconds
notetime_3 = 0                                  # set intitial note start time
durlist_3 = [.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33]		# note duration list
notelist_3 = [75,80,79,76,75,73,79,76,75,73,70,76,75,73,70]			# note list
splist_3 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]				# subpatch list
panalist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# pana list
panblist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# panb list
nvatlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]		# nvat list
nvaclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]				# nvac list
nvpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]				# nvpa list
nvtalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]		# nvta list
nvxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxa list
nvpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpb list
nvxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxb list
nvpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpc list
nvtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# nvtc list
nvxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]			# nvxc list
matlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]	# mat list
maclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mac list
mpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpa list
mtalist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1]		# mta list
mxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxa list
mpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpb list
mxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxb list
mpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpc list
mtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# mtc list
mxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]	# mxc list
bndalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bnda list
bndblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndb list
bndclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndc list
bndtlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndt list
bndulist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndu list
bndvlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndv list
i_3 = 0						# loop iteration counter
c_3 = 0						# note iteration counter
while i_3 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_3 in range(bpb_3) :                           # loop through the items in the rhythm list
        sb_3 = rhythmr0_3[a_3]                          # sb is current item in the rhythm list
        subeat_3 = beat_3/len(sb_3)                     # subeat is the number of sub-beats in the beat
        for b_3 in range(len(sb_3)) :                   # loop through the items in the beat string
            if sb_3[b_3].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_3[b_3])                   # get ascii number of the character
                if sb_3[b_3].isdigit() :                # check if character is numeric
                    amp_3 = (asky-47)                   # assign amplitude
                elif sb_3[b_3].isupper() :              # check if character is uppercase
                    amp_3 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_3 = (asky-60)                   # assign amplitude
            elif sb_3[b_3] == &apos;-&apos; : amp_3 = 0           # character for amp = 0                         
            elif sb_3[b_3] == &apos;&gt;&apos; : amp_3 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_3 = blueDuration + 1           # set notetime_3 &gt; blueduration
                scoreText_3 = &apos;&apos;                        # clear scoreText_3
            if notetime_3 &gt;= blueDuration : break       # break out of the loop
	    if amp_3 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_3 = durlist_3[c_3]			# get duration from durlist
		amp_3 = amp_3-62			# move amp value to correct dbfs range (max=1)
		note_3 = notelist_3[c_3]		# get note from notelist
	        sp_3 = splist_3[c_3]			# get subpatch from splist
		pana_3 = panalist_3[c_3]		# get pana from panalist
		panb_3 = panblist_3[c_3]		# get panb from panblist
		nvat_3 = nvatlist_3[c_3]		# get nvat from nvatlist
		nvac_3 = nvaclist_3[c_3]		# get nvac from nvatlist
		nvpa_3 = nvpalist_3[c_3]		# get nvpa from nvpalist
		nvta_3 = nvtalist_3[c_3]		# get nvta from nvtalist
		nvxa_3 = nvxalist_3[c_3]		# get nvxa from nvxalist
		nvpb_3 = nvpblist_3[c_3]		# get nvpb from nvpblist
		nvxb_3 = nvxblist_3[c_3]		# get nvxb from nvxblist
		nvpc_3 = nvpclist_3[c_3]		# get nvpc from nvpclist
		nvtc_3 = nvtclist_3[c_3]		# get nvtc from nvtclist
		nvxc_3 = nvxclist_3[c_3]		# get nvxc from nvxclist
		mat_3 = matlist_3[c_3]			# get mat from matlist
		mac_3 = maclist_3[c_3]			# get mac from maclist
		mpa_3 = mpalist_3[c_3]			# get mpa from mpalist
		mta_3 = mtalist_3[c_3]			# get mta from mtalist
		mxa_3 = mxalist_3[c_3]			# get mxa from mxalist
		mpb_3 = mpblist_3[c_3]			# get mpb from mpblist
		mxb_3 = mxblist_3[c_3]			# get mxb from mxblist
		mpc_3 = mpclist_3[c_3]			# get mpc from mpclist
		mtc_3 = mtclist_3[c_3]			# get mtc from mtclist
		mxc_3 = mxclist_3[c_3]			# get mxc from mxclist
		bnda_3 = bndalist_3[c_3]		# get bnda from bndalist
		bndb_3 = bndblist_3[c_3]		# get bndb from bndblist
		bndc_3 = bndclist_3[c_3]		# get bndc from bndclist
		bndt_3 = bndtlist_3[c_3]		# get bndt from bndtlist		
		bndu_3 = bndulist_3[c_3]		# get bndu from bndulist		
		bndv_3 = bndvlist_3[c_3]		# get bndv from bndvlist		
                c_3 = c_3 + 1
                scoreText_3 += &quot;i2 &quot;+str(notetime_3-nvat_3)+&quot; &quot;+str(dur_3)+&quot; &quot;+str(amp_3)+&quot; &quot;+str(note_3)+&quot; &quot;+str(sp_3)+&quot; &quot;+str(pana_3)+&quot; &quot;+str(panb_3)+&quot; &quot;+str(nvat_3)+&quot; &quot;+str(nvac_3)+&quot; &quot;+str(nvpa_3)+&quot; &quot;+str(nvta_3)+&quot; &quot;+str(nvxa_3)+&quot; &quot;+str(nvpb_3)+&quot; &quot;+str(nvxb_3)+&quot; &quot;+str(nvpc_3)+&quot; &quot;+str(nvtc_3)+&quot; &quot;+str(nvxc_3)+&quot; &quot;+str(mat_3)+&quot; &quot;+str(mac_3)+&quot; &quot;+str(mpa_3)+&quot; &quot;+str(mta_3)+&quot; &quot;+str(mxa_3)+&quot; &quot;+str(mpb_3)+&quot; &quot;+str(mxb_3)+&quot; &quot;+str(mpc_3)+&quot; &quot;+str(mtc_3)+&quot; &quot;+str(mxc_3)+&quot; &quot;+str(bnda_3)+&quot; &quot;+str(bndb_3)+&quot; &quot;+str(bndc_3)+&quot; &quot;+str(bndt_3)+&quot; &quot;+str(bndu_3)+&quot; &quot;+str(bndv_3)+&quot; \n&quot;
            notetime_3 = notetime_3 + subeat_3                      # increment notetime by subeat time value
    i_3 = i_3 + 1
    c_3 = 0
score = scoreText_3
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>25.0</startTime>
          <name>Ringer_3c</name>
          <backgroundColor>-6710785</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_3 - 3h13TET
scoreText_3 = &quot;&quot;                              	# scoreText_3 is cleared
bart_3 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_3 = [&apos;gbeba&apos;,&apos;fbeba&apos;,&apos;fbece&apos;]		# rhythm
bpb_3 = len(rhythmr0_3)                         # beats per bar
beat_3 = bart_3/bpb_3                           # time of beat in seconds
notetime_3 = 0                                  # set intitial note start time
durlist_3 = [.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33]		# note duration list
notelist_3 = [76,82,80,82,83,75,80,79,80,76,73,79,76,79,80]			# note list
splist_3 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]				# subpatch list
panalist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# pana list
panblist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# panb list
nvatlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]		# nvat list
nvaclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]				# nvac list
nvpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]				# nvpa list
nvtalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]		# nvta list
nvxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxa list
nvpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpb list
nvxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxb list
nvpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpc list
nvtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# nvtc list
nvxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]			# nvxc list
matlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]	# mat list
maclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mac list
mpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpa list
mtalist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1]		# mta list
mxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxa list
mpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpb list
mxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxb list
mpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpc list
mtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# mtc list
mxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]	# mxc list
bndalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bnda list
bndblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndb list
bndclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndc list
bndtlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndt list
bndulist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndu list
bndvlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndv list
i_3 = 0						# loop iteration counter
c_3 = 0						# note iteration counter
while i_3 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_3 in range(bpb_3) :                           # loop through the items in the rhythm list
        sb_3 = rhythmr0_3[a_3]                          # sb is current item in the rhythm list
        subeat_3 = beat_3/len(sb_3)                     # subeat is the number of sub-beats in the beat
        for b_3 in range(len(sb_3)) :                   # loop through the items in the beat string
            if sb_3[b_3].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_3[b_3])                   # get ascii number of the character
                if sb_3[b_3].isdigit() :                # check if character is numeric
                    amp_3 = (asky-47)                   # assign amplitude
                elif sb_3[b_3].isupper() :              # check if character is uppercase
                    amp_3 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_3 = (asky-60)                   # assign amplitude
            elif sb_3[b_3] == &apos;-&apos; : amp_3 = 0           # character for amp = 0                         
            elif sb_3[b_3] == &apos;&gt;&apos; : amp_3 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_3 = blueDuration + 1           # set notetime_3 &gt; blueduration
                scoreText_3 = &apos;&apos;                        # clear scoreText_3
            if notetime_3 &gt;= blueDuration : break       # break out of the loop
	    if amp_3 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_3 = durlist_3[c_3]			# get duration from durlist
		amp_3 = amp_3-62			# move amp value to correct dbfs range (max=1)
		note_3 = notelist_3[c_3]		# get note from notelist
	        sp_3 = splist_3[c_3]			# get subpatch from splist
		pana_3 = panalist_3[c_3]		# get pana from panalist
		panb_3 = panblist_3[c_3]		# get panb from panblist
		nvat_3 = nvatlist_3[c_3]		# get nvat from nvatlist
		nvac_3 = nvaclist_3[c_3]		# get nvac from nvatlist
		nvpa_3 = nvpalist_3[c_3]		# get nvpa from nvpalist
		nvta_3 = nvtalist_3[c_3]		# get nvta from nvtalist
		nvxa_3 = nvxalist_3[c_3]		# get nvxa from nvxalist
		nvpb_3 = nvpblist_3[c_3]		# get nvpb from nvpblist
		nvxb_3 = nvxblist_3[c_3]		# get nvxb from nvxblist
		nvpc_3 = nvpclist_3[c_3]		# get nvpc from nvpclist
		nvtc_3 = nvtclist_3[c_3]		# get nvtc from nvtclist
		nvxc_3 = nvxclist_3[c_3]		# get nvxc from nvxclist
		mat_3 = matlist_3[c_3]			# get mat from matlist
		mac_3 = maclist_3[c_3]			# get mac from maclist
		mpa_3 = mpalist_3[c_3]			# get mpa from mpalist
		mta_3 = mtalist_3[c_3]			# get mta from mtalist
		mxa_3 = mxalist_3[c_3]			# get mxa from mxalist
		mpb_3 = mpblist_3[c_3]			# get mpb from mpblist
		mxb_3 = mxblist_3[c_3]			# get mxb from mxblist
		mpc_3 = mpclist_3[c_3]			# get mpc from mpclist
		mtc_3 = mtclist_3[c_3]			# get mtc from mtclist
		mxc_3 = mxclist_3[c_3]			# get mxc from mxclist
		bnda_3 = bndalist_3[c_3]		# get bnda from bndalist
		bndb_3 = bndblist_3[c_3]		# get bndb from bndblist
		bndc_3 = bndclist_3[c_3]		# get bndc from bndclist
		bndt_3 = bndtlist_3[c_3]		# get bndt from bndtlist		
		bndu_3 = bndulist_3[c_3]		# get bndu from bndulist		
		bndv_3 = bndvlist_3[c_3]		# get bndv from bndvlist		
                c_3 = c_3 + 1
                scoreText_3 += &quot;i2 &quot;+str(notetime_3-nvat_3)+&quot; &quot;+str(dur_3)+&quot; &quot;+str(amp_3)+&quot; &quot;+str(note_3)+&quot; &quot;+str(sp_3)+&quot; &quot;+str(pana_3)+&quot; &quot;+str(panb_3)+&quot; &quot;+str(nvat_3)+&quot; &quot;+str(nvac_3)+&quot; &quot;+str(nvpa_3)+&quot; &quot;+str(nvta_3)+&quot; &quot;+str(nvxa_3)+&quot; &quot;+str(nvpb_3)+&quot; &quot;+str(nvxb_3)+&quot; &quot;+str(nvpc_3)+&quot; &quot;+str(nvtc_3)+&quot; &quot;+str(nvxc_3)+&quot; &quot;+str(mat_3)+&quot; &quot;+str(mac_3)+&quot; &quot;+str(mpa_3)+&quot; &quot;+str(mta_3)+&quot; &quot;+str(mxa_3)+&quot; &quot;+str(mpb_3)+&quot; &quot;+str(mxb_3)+&quot; &quot;+str(mpc_3)+&quot; &quot;+str(mtc_3)+&quot; &quot;+str(mxc_3)+&quot; &quot;+str(bnda_3)+&quot; &quot;+str(bndb_3)+&quot; &quot;+str(bndc_3)+&quot; &quot;+str(bndt_3)+&quot; &quot;+str(bndu_3)+&quot; &quot;+str(bndv_3)+&quot; \n&quot;
            notetime_3 = notetime_3 + subeat_3                      # increment notetime by subeat time value
    i_3 = i_3 + 1
    c_3 = 0
score = scoreText_3
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>30.0</startTime>
          <name>Ringer_3d</name>
          <backgroundColor>-6710785</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_3 - 3h13TET
scoreText_3 = &quot;&quot;                              	# scoreText_3 is cleared
bart_3 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_3 = [&apos;gbeba&apos;,&apos;fbeba&apos;,&apos;fbece&apos;]		# rhythm
bpb_3 = len(rhythmr0_3)                         # beats per bar
beat_3 = bart_3/bpb_3                           # time of beat in seconds
notetime_3 = 0                                  # set intitial note start time
durlist_3 = [.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33]		# note duration list
notelist_3 = [75,79,76,79,76,73,76,75,76,79,70,75,73,75,73]			# note list
splist_3 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]				# subpatch list
panalist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# pana list
panblist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# panb list
nvatlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]		# nvat list
nvaclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]				# nvac list
nvpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]				# nvpa list
nvtalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]		# nvta list
nvxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxa list
nvpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpb list
nvxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxb list
nvpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpc list
nvtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# nvtc list
nvxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]			# nvxc list
matlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]	# mat list
maclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mac list
mpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpa list
mtalist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1]		# mta list
mxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxa list
mpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpb list
mxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxb list
mpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpc list
mtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# mtc list
mxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]	# mxc list
bndalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bnda list
bndblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndb list
bndclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndc list
bndtlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndt list
bndulist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndu list
bndvlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndv list
i_3 = 0						# loop iteration counter
c_3 = 0						# note iteration counter
while i_3 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_3 in range(bpb_3) :                           # loop through the items in the rhythm list
        sb_3 = rhythmr0_3[a_3]                          # sb is current item in the rhythm list
        subeat_3 = beat_3/len(sb_3)                     # subeat is the number of sub-beats in the beat
        for b_3 in range(len(sb_3)) :                   # loop through the items in the beat string
            if sb_3[b_3].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_3[b_3])                   # get ascii number of the character
                if sb_3[b_3].isdigit() :                # check if character is numeric
                    amp_3 = (asky-47)                   # assign amplitude
                elif sb_3[b_3].isupper() :              # check if character is uppercase
                    amp_3 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_3 = (asky-60)                   # assign amplitude
            elif sb_3[b_3] == &apos;-&apos; : amp_3 = 0           # character for amp = 0                         
            elif sb_3[b_3] == &apos;&gt;&apos; : amp_3 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_3 = blueDuration + 1           # set notetime_3 &gt; blueduration
                scoreText_3 = &apos;&apos;                        # clear scoreText_3
            if notetime_3 &gt;= blueDuration : break       # break out of the loop
	    if amp_3 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_3 = durlist_3[c_3]			# get duration from durlist
		amp_3 = amp_3-62			# move amp value to correct dbfs range (max=1)
		note_3 = notelist_3[c_3]		# get note from notelist
	        sp_3 = splist_3[c_3]			# get subpatch from splist
		pana_3 = panalist_3[c_3]		# get pana from panalist
		panb_3 = panblist_3[c_3]		# get panb from panblist
		nvat_3 = nvatlist_3[c_3]		# get nvat from nvatlist
		nvac_3 = nvaclist_3[c_3]		# get nvac from nvatlist
		nvpa_3 = nvpalist_3[c_3]		# get nvpa from nvpalist
		nvta_3 = nvtalist_3[c_3]		# get nvta from nvtalist
		nvxa_3 = nvxalist_3[c_3]		# get nvxa from nvxalist
		nvpb_3 = nvpblist_3[c_3]		# get nvpb from nvpblist
		nvxb_3 = nvxblist_3[c_3]		# get nvxb from nvxblist
		nvpc_3 = nvpclist_3[c_3]		# get nvpc from nvpclist
		nvtc_3 = nvtclist_3[c_3]		# get nvtc from nvtclist
		nvxc_3 = nvxclist_3[c_3]		# get nvxc from nvxclist
		mat_3 = matlist_3[c_3]			# get mat from matlist
		mac_3 = maclist_3[c_3]			# get mac from maclist
		mpa_3 = mpalist_3[c_3]			# get mpa from mpalist
		mta_3 = mtalist_3[c_3]			# get mta from mtalist
		mxa_3 = mxalist_3[c_3]			# get mxa from mxalist
		mpb_3 = mpblist_3[c_3]			# get mpb from mpblist
		mxb_3 = mxblist_3[c_3]			# get mxb from mxblist
		mpc_3 = mpclist_3[c_3]			# get mpc from mpclist
		mtc_3 = mtclist_3[c_3]			# get mtc from mtclist
		mxc_3 = mxclist_3[c_3]			# get mxc from mxclist
		bnda_3 = bndalist_3[c_3]		# get bnda from bndalist
		bndb_3 = bndblist_3[c_3]		# get bndb from bndblist
		bndc_3 = bndclist_3[c_3]		# get bndc from bndclist
		bndt_3 = bndtlist_3[c_3]		# get bndt from bndtlist		
		bndu_3 = bndulist_3[c_3]		# get bndu from bndulist		
		bndv_3 = bndvlist_3[c_3]		# get bndv from bndvlist		
                c_3 = c_3 + 1
                scoreText_3 += &quot;i2 &quot;+str(notetime_3-nvat_3)+&quot; &quot;+str(dur_3)+&quot; &quot;+str(amp_3)+&quot; &quot;+str(note_3)+&quot; &quot;+str(sp_3)+&quot; &quot;+str(pana_3)+&quot; &quot;+str(panb_3)+&quot; &quot;+str(nvat_3)+&quot; &quot;+str(nvac_3)+&quot; &quot;+str(nvpa_3)+&quot; &quot;+str(nvta_3)+&quot; &quot;+str(nvxa_3)+&quot; &quot;+str(nvpb_3)+&quot; &quot;+str(nvxb_3)+&quot; &quot;+str(nvpc_3)+&quot; &quot;+str(nvtc_3)+&quot; &quot;+str(nvxc_3)+&quot; &quot;+str(mat_3)+&quot; &quot;+str(mac_3)+&quot; &quot;+str(mpa_3)+&quot; &quot;+str(mta_3)+&quot; &quot;+str(mxa_3)+&quot; &quot;+str(mpb_3)+&quot; &quot;+str(mxb_3)+&quot; &quot;+str(mpc_3)+&quot; &quot;+str(mtc_3)+&quot; &quot;+str(mxc_3)+&quot; &quot;+str(bnda_3)+&quot; &quot;+str(bndb_3)+&quot; &quot;+str(bndc_3)+&quot; &quot;+str(bndt_3)+&quot; &quot;+str(bndu_3)+&quot; &quot;+str(bndv_3)+&quot; \n&quot;
            notetime_3 = notetime_3 + subeat_3                      # increment notetime by subeat time value
    i_3 = i_3 + 1
    c_3 = 0
score = scoreText_3
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>35.0</startTime>
          <name>Ringer_3e</name>
          <backgroundColor>-6710785</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_3 - 3h13TET
scoreText_3 = &quot;&quot;                              	# scoreText_3 is cleared
bart_3 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_3 = [&apos;gbeba&apos;,&apos;fbeba&apos;,&apos;fbece&apos;]		# rhythm
bpb_3 = len(rhythmr0_3)                         # beats per bar
beat_3 = bart_3/bpb_3                           # time of beat in seconds
notetime_3 = 0                                  # set intitial note start time
durlist_3 = [.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33]		# note duration list
notelist_3 = [69,73,70,75,73,76,75,79,76,80,79,82,79,80,79]			# note list
splist_3 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]				# subpatch list
panalist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# pana list
panblist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# panb list
nvatlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]		# nvat list
nvaclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]				# nvac list
nvpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]				# nvpa list
nvtalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]		# nvta list
nvxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxa list
nvpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpb list
nvxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxb list
nvpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpc list
nvtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# nvtc list
nvxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]			# nvxc list
matlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]	# mat list
maclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mac list
mpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpa list
mtalist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1]		# mta list
mxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxa list
mpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpb list
mxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxb list
mpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpc list
mtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# mtc list
mxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]	# mxc list
bndalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bnda list
bndblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndb list
bndclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndc list
bndtlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndt list
bndulist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndu list
bndvlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndv list
i_3 = 0						# loop iteration counter
c_3 = 0						# note iteration counter
while i_3 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_3 in range(bpb_3) :                           # loop through the items in the rhythm list
        sb_3 = rhythmr0_3[a_3]                          # sb is current item in the rhythm list
        subeat_3 = beat_3/len(sb_3)                     # subeat is the number of sub-beats in the beat
        for b_3 in range(len(sb_3)) :                   # loop through the items in the beat string
            if sb_3[b_3].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_3[b_3])                   # get ascii number of the character
                if sb_3[b_3].isdigit() :                # check if character is numeric
                    amp_3 = (asky-47)                   # assign amplitude
                elif sb_3[b_3].isupper() :              # check if character is uppercase
                    amp_3 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_3 = (asky-60)                   # assign amplitude
            elif sb_3[b_3] == &apos;-&apos; : amp_3 = 0           # character for amp = 0                         
            elif sb_3[b_3] == &apos;&gt;&apos; : amp_3 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_3 = blueDuration + 1           # set notetime_3 &gt; blueduration
                scoreText_3 = &apos;&apos;                        # clear scoreText_3
            if notetime_3 &gt;= blueDuration : break       # break out of the loop
	    if amp_3 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_3 = durlist_3[c_3]			# get duration from durlist
		amp_3 = amp_3-62			# move amp value to correct dbfs range (max=1)
		note_3 = notelist_3[c_3]		# get note from notelist
	        sp_3 = splist_3[c_3]			# get subpatch from splist
		pana_3 = panalist_3[c_3]		# get pana from panalist
		panb_3 = panblist_3[c_3]		# get panb from panblist
		nvat_3 = nvatlist_3[c_3]		# get nvat from nvatlist
		nvac_3 = nvaclist_3[c_3]		# get nvac from nvatlist
		nvpa_3 = nvpalist_3[c_3]		# get nvpa from nvpalist
		nvta_3 = nvtalist_3[c_3]		# get nvta from nvtalist
		nvxa_3 = nvxalist_3[c_3]		# get nvxa from nvxalist
		nvpb_3 = nvpblist_3[c_3]		# get nvpb from nvpblist
		nvxb_3 = nvxblist_3[c_3]		# get nvxb from nvxblist
		nvpc_3 = nvpclist_3[c_3]		# get nvpc from nvpclist
		nvtc_3 = nvtclist_3[c_3]		# get nvtc from nvtclist
		nvxc_3 = nvxclist_3[c_3]		# get nvxc from nvxclist
		mat_3 = matlist_3[c_3]			# get mat from matlist
		mac_3 = maclist_3[c_3]			# get mac from maclist
		mpa_3 = mpalist_3[c_3]			# get mpa from mpalist
		mta_3 = mtalist_3[c_3]			# get mta from mtalist
		mxa_3 = mxalist_3[c_3]			# get mxa from mxalist
		mpb_3 = mpblist_3[c_3]			# get mpb from mpblist
		mxb_3 = mxblist_3[c_3]			# get mxb from mxblist
		mpc_3 = mpclist_3[c_3]			# get mpc from mpclist
		mtc_3 = mtclist_3[c_3]			# get mtc from mtclist
		mxc_3 = mxclist_3[c_3]			# get mxc from mxclist
		bnda_3 = bndalist_3[c_3]		# get bnda from bndalist
		bndb_3 = bndblist_3[c_3]		# get bndb from bndblist
		bndc_3 = bndclist_3[c_3]		# get bndc from bndclist
		bndt_3 = bndtlist_3[c_3]		# get bndt from bndtlist		
		bndu_3 = bndulist_3[c_3]		# get bndu from bndulist		
		bndv_3 = bndvlist_3[c_3]		# get bndv from bndvlist		
                c_3 = c_3 + 1
                scoreText_3 += &quot;i2 &quot;+str(notetime_3-nvat_3)+&quot; &quot;+str(dur_3)+&quot; &quot;+str(amp_3)+&quot; &quot;+str(note_3)+&quot; &quot;+str(sp_3)+&quot; &quot;+str(pana_3)+&quot; &quot;+str(panb_3)+&quot; &quot;+str(nvat_3)+&quot; &quot;+str(nvac_3)+&quot; &quot;+str(nvpa_3)+&quot; &quot;+str(nvta_3)+&quot; &quot;+str(nvxa_3)+&quot; &quot;+str(nvpb_3)+&quot; &quot;+str(nvxb_3)+&quot; &quot;+str(nvpc_3)+&quot; &quot;+str(nvtc_3)+&quot; &quot;+str(nvxc_3)+&quot; &quot;+str(mat_3)+&quot; &quot;+str(mac_3)+&quot; &quot;+str(mpa_3)+&quot; &quot;+str(mta_3)+&quot; &quot;+str(mxa_3)+&quot; &quot;+str(mpb_3)+&quot; &quot;+str(mxb_3)+&quot; &quot;+str(mpc_3)+&quot; &quot;+str(mtc_3)+&quot; &quot;+str(mxc_3)+&quot; &quot;+str(bnda_3)+&quot; &quot;+str(bndb_3)+&quot; &quot;+str(bndc_3)+&quot; &quot;+str(bndt_3)+&quot; &quot;+str(bndu_3)+&quot; &quot;+str(bndv_3)+&quot; \n&quot;
            notetime_3 = notetime_3 + subeat_3                      # increment notetime by subeat time value
    i_3 = i_3 + 1
    c_3 = 0
score = scoreText_3
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>40.0</startTime>
          <name>Ringer_3a</name>
          <backgroundColor>-6710785</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_3 - 3h13TET
scoreText_3 = &quot;&quot;                              	# scoreText_3 is cleared
bart_3 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_3 = [&apos;gbeba&apos;,&apos;fbeba&apos;,&apos;fbece&apos;]		# rhythm
bpb_3 = len(rhythmr0_3)                         # beats per bar
beat_3 = bart_3/bpb_3                           # time of beat in seconds
notetime_3 = 0                                  # set intitial note start time
durlist_3 = [.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33]		# note duration list
notelist_3 = [76,82,80,79,76,75,80,79,76,75,73,79,76,75,73]			# note list
splist_3 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]				# subpatch list
panalist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# pana list
panblist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# panb list
nvatlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]		# nvat list
nvaclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]				# nvac list
nvpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]				# nvpa list
nvtalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]		# nvta list
nvxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxa list
nvpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpb list
nvxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxb list
nvpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpc list
nvtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# nvtc list
nvxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]			# nvxc list
matlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]	# mat list
maclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mac list
mpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpa list
mtalist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1]		# mta list
mxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxa list
mpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpb list
mxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxb list
mpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpc list
mtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# mtc list
mxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]	# mxc list
bndalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bnda list
bndblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndb list
bndclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndc list
bndtlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndt list
bndulist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndu list
bndvlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndv list
i_3 = 0						# loop iteration counter
c_3 = 0						# note iteration counter
while i_3 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_3 in range(bpb_3) :                           # loop through the items in the rhythm list
        sb_3 = rhythmr0_3[a_3]                          # sb is current item in the rhythm list
        subeat_3 = beat_3/len(sb_3)                     # subeat is the number of sub-beats in the beat
        for b_3 in range(len(sb_3)) :                   # loop through the items in the beat string
            if sb_3[b_3].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_3[b_3])                   # get ascii number of the character
                if sb_3[b_3].isdigit() :                # check if character is numeric
                    amp_3 = (asky-47)                   # assign amplitude
                elif sb_3[b_3].isupper() :              # check if character is uppercase
                    amp_3 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_3 = (asky-60)                   # assign amplitude
            elif sb_3[b_3] == &apos;-&apos; : amp_3 = 0           # character for amp = 0                         
            elif sb_3[b_3] == &apos;&gt;&apos; : amp_3 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_3 = blueDuration + 1           # set notetime_3 &gt; blueduration
                scoreText_3 = &apos;&apos;                        # clear scoreText_3
            if notetime_3 &gt;= blueDuration : break       # break out of the loop
	    if amp_3 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_3 = durlist_3[c_3]			# get duration from durlist
		amp_3 = amp_3-62			# move amp value to correct dbfs range (max=1)
		note_3 = notelist_3[c_3]		# get note from notelist
	        sp_3 = splist_3[c_3]			# get subpatch from splist
		pana_3 = panalist_3[c_3]		# get pana from panalist
		panb_3 = panblist_3[c_3]		# get panb from panblist
		nvat_3 = nvatlist_3[c_3]		# get nvat from nvatlist
		nvac_3 = nvaclist_3[c_3]		# get nvac from nvatlist
		nvpa_3 = nvpalist_3[c_3]		# get nvpa from nvpalist
		nvta_3 = nvtalist_3[c_3]		# get nvta from nvtalist
		nvxa_3 = nvxalist_3[c_3]		# get nvxa from nvxalist
		nvpb_3 = nvpblist_3[c_3]		# get nvpb from nvpblist
		nvxb_3 = nvxblist_3[c_3]		# get nvxb from nvxblist
		nvpc_3 = nvpclist_3[c_3]		# get nvpc from nvpclist
		nvtc_3 = nvtclist_3[c_3]		# get nvtc from nvtclist
		nvxc_3 = nvxclist_3[c_3]		# get nvxc from nvxclist
		mat_3 = matlist_3[c_3]			# get mat from matlist
		mac_3 = maclist_3[c_3]			# get mac from maclist
		mpa_3 = mpalist_3[c_3]			# get mpa from mpalist
		mta_3 = mtalist_3[c_3]			# get mta from mtalist
		mxa_3 = mxalist_3[c_3]			# get mxa from mxalist
		mpb_3 = mpblist_3[c_3]			# get mpb from mpblist
		mxb_3 = mxblist_3[c_3]			# get mxb from mxblist
		mpc_3 = mpclist_3[c_3]			# get mpc from mpclist
		mtc_3 = mtclist_3[c_3]			# get mtc from mtclist
		mxc_3 = mxclist_3[c_3]			# get mxc from mxclist
		bnda_3 = bndalist_3[c_3]		# get bnda from bndalist
		bndb_3 = bndblist_3[c_3]		# get bndb from bndblist
		bndc_3 = bndclist_3[c_3]		# get bndc from bndclist
		bndt_3 = bndtlist_3[c_3]		# get bndt from bndtlist		
		bndu_3 = bndulist_3[c_3]		# get bndu from bndulist		
		bndv_3 = bndvlist_3[c_3]		# get bndv from bndvlist		
                c_3 = c_3 + 1
                scoreText_3 += &quot;i2 &quot;+str(notetime_3-nvat_3)+&quot; &quot;+str(dur_3)+&quot; &quot;+str(amp_3)+&quot; &quot;+str(note_3)+&quot; &quot;+str(sp_3)+&quot; &quot;+str(pana_3)+&quot; &quot;+str(panb_3)+&quot; &quot;+str(nvat_3)+&quot; &quot;+str(nvac_3)+&quot; &quot;+str(nvpa_3)+&quot; &quot;+str(nvta_3)+&quot; &quot;+str(nvxa_3)+&quot; &quot;+str(nvpb_3)+&quot; &quot;+str(nvxb_3)+&quot; &quot;+str(nvpc_3)+&quot; &quot;+str(nvtc_3)+&quot; &quot;+str(nvxc_3)+&quot; &quot;+str(mat_3)+&quot; &quot;+str(mac_3)+&quot; &quot;+str(mpa_3)+&quot; &quot;+str(mta_3)+&quot; &quot;+str(mxa_3)+&quot; &quot;+str(mpb_3)+&quot; &quot;+str(mxb_3)+&quot; &quot;+str(mpc_3)+&quot; &quot;+str(mtc_3)+&quot; &quot;+str(mxc_3)+&quot; &quot;+str(bnda_3)+&quot; &quot;+str(bndb_3)+&quot; &quot;+str(bndc_3)+&quot; &quot;+str(bndt_3)+&quot; &quot;+str(bndu_3)+&quot; &quot;+str(bndv_3)+&quot; \n&quot;
            notetime_3 = notetime_3 + subeat_3                      # increment notetime by subeat time value
    i_3 = i_3 + 1
    c_3 = 0
score = scoreText_3
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>45.0</startTime>
          <name>Ringer_3b</name>
          <backgroundColor>-6710785</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_3 - 3h13TET
scoreText_3 = &quot;&quot;                              	# scoreText_3 is cleared
bart_3 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_3 = [&apos;gbeba&apos;,&apos;fbeba&apos;,&apos;fbece&apos;]		# rhythm
bpb_3 = len(rhythmr0_3)                         # beats per bar
beat_3 = bart_3/bpb_3                           # time of beat in seconds
notetime_3 = 0                                  # set intitial note start time
durlist_3 = [.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33]		# note duration list
notelist_3 = [75,80,79,76,75,73,79,76,75,73,70,76,75,73,70]			# note list
splist_3 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]				# subpatch list
panalist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# pana list
panblist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# panb list
nvatlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]		# nvat list
nvaclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]				# nvac list
nvpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]				# nvpa list
nvtalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]		# nvta list
nvxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxa list
nvpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpb list
nvxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxb list
nvpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpc list
nvtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# nvtc list
nvxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]			# nvxc list
matlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]	# mat list
maclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mac list
mpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpa list
mtalist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1]		# mta list
mxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxa list
mpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpb list
mxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxb list
mpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpc list
mtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# mtc list
mxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]	# mxc list
bndalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bnda list
bndblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndb list
bndclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndc list
bndtlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndt list
bndulist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndu list
bndvlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndv list
i_3 = 0						# loop iteration counter
c_3 = 0						# note iteration counter
while i_3 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_3 in range(bpb_3) :                           # loop through the items in the rhythm list
        sb_3 = rhythmr0_3[a_3]                          # sb is current item in the rhythm list
        subeat_3 = beat_3/len(sb_3)                     # subeat is the number of sub-beats in the beat
        for b_3 in range(len(sb_3)) :                   # loop through the items in the beat string
            if sb_3[b_3].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_3[b_3])                   # get ascii number of the character
                if sb_3[b_3].isdigit() :                # check if character is numeric
                    amp_3 = (asky-47)                   # assign amplitude
                elif sb_3[b_3].isupper() :              # check if character is uppercase
                    amp_3 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_3 = (asky-60)                   # assign amplitude
            elif sb_3[b_3] == &apos;-&apos; : amp_3 = 0           # character for amp = 0                         
            elif sb_3[b_3] == &apos;&gt;&apos; : amp_3 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_3 = blueDuration + 1           # set notetime_3 &gt; blueduration
                scoreText_3 = &apos;&apos;                        # clear scoreText_3
            if notetime_3 &gt;= blueDuration : break       # break out of the loop
	    if amp_3 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_3 = durlist_3[c_3]			# get duration from durlist
		amp_3 = amp_3-62			# move amp value to correct dbfs range (max=1)
		note_3 = notelist_3[c_3]		# get note from notelist
	        sp_3 = splist_3[c_3]			# get subpatch from splist
		pana_3 = panalist_3[c_3]		# get pana from panalist
		panb_3 = panblist_3[c_3]		# get panb from panblist
		nvat_3 = nvatlist_3[c_3]		# get nvat from nvatlist
		nvac_3 = nvaclist_3[c_3]		# get nvac from nvatlist
		nvpa_3 = nvpalist_3[c_3]		# get nvpa from nvpalist
		nvta_3 = nvtalist_3[c_3]		# get nvta from nvtalist
		nvxa_3 = nvxalist_3[c_3]		# get nvxa from nvxalist
		nvpb_3 = nvpblist_3[c_3]		# get nvpb from nvpblist
		nvxb_3 = nvxblist_3[c_3]		# get nvxb from nvxblist
		nvpc_3 = nvpclist_3[c_3]		# get nvpc from nvpclist
		nvtc_3 = nvtclist_3[c_3]		# get nvtc from nvtclist
		nvxc_3 = nvxclist_3[c_3]		# get nvxc from nvxclist
		mat_3 = matlist_3[c_3]			# get mat from matlist
		mac_3 = maclist_3[c_3]			# get mac from maclist
		mpa_3 = mpalist_3[c_3]			# get mpa from mpalist
		mta_3 = mtalist_3[c_3]			# get mta from mtalist
		mxa_3 = mxalist_3[c_3]			# get mxa from mxalist
		mpb_3 = mpblist_3[c_3]			# get mpb from mpblist
		mxb_3 = mxblist_3[c_3]			# get mxb from mxblist
		mpc_3 = mpclist_3[c_3]			# get mpc from mpclist
		mtc_3 = mtclist_3[c_3]			# get mtc from mtclist
		mxc_3 = mxclist_3[c_3]			# get mxc from mxclist
		bnda_3 = bndalist_3[c_3]		# get bnda from bndalist
		bndb_3 = bndblist_3[c_3]		# get bndb from bndblist
		bndc_3 = bndclist_3[c_3]		# get bndc from bndclist
		bndt_3 = bndtlist_3[c_3]		# get bndt from bndtlist		
		bndu_3 = bndulist_3[c_3]		# get bndu from bndulist		
		bndv_3 = bndvlist_3[c_3]		# get bndv from bndvlist		
                c_3 = c_3 + 1
                scoreText_3 += &quot;i2 &quot;+str(notetime_3-nvat_3)+&quot; &quot;+str(dur_3)+&quot; &quot;+str(amp_3)+&quot; &quot;+str(note_3)+&quot; &quot;+str(sp_3)+&quot; &quot;+str(pana_3)+&quot; &quot;+str(panb_3)+&quot; &quot;+str(nvat_3)+&quot; &quot;+str(nvac_3)+&quot; &quot;+str(nvpa_3)+&quot; &quot;+str(nvta_3)+&quot; &quot;+str(nvxa_3)+&quot; &quot;+str(nvpb_3)+&quot; &quot;+str(nvxb_3)+&quot; &quot;+str(nvpc_3)+&quot; &quot;+str(nvtc_3)+&quot; &quot;+str(nvxc_3)+&quot; &quot;+str(mat_3)+&quot; &quot;+str(mac_3)+&quot; &quot;+str(mpa_3)+&quot; &quot;+str(mta_3)+&quot; &quot;+str(mxa_3)+&quot; &quot;+str(mpb_3)+&quot; &quot;+str(mxb_3)+&quot; &quot;+str(mpc_3)+&quot; &quot;+str(mtc_3)+&quot; &quot;+str(mxc_3)+&quot; &quot;+str(bnda_3)+&quot; &quot;+str(bndb_3)+&quot; &quot;+str(bndc_3)+&quot; &quot;+str(bndt_3)+&quot; &quot;+str(bndu_3)+&quot; &quot;+str(bndv_3)+&quot; \n&quot;
            notetime_3 = notetime_3 + subeat_3                      # increment notetime by subeat time value
    i_3 = i_3 + 1
    c_3 = 0
score = scoreText_3
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>50.0</startTime>
          <name>Ringer_3c</name>
          <backgroundColor>-6710785</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_3 - 3h13TET
scoreText_3 = &quot;&quot;                              	# scoreText_3 is cleared
bart_3 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_3 = [&apos;gbeba&apos;,&apos;fbeba&apos;,&apos;fbece&apos;]		# rhythm
bpb_3 = len(rhythmr0_3)                         # beats per bar
beat_3 = bart_3/bpb_3                           # time of beat in seconds
notetime_3 = 0                                  # set intitial note start time
durlist_3 = [.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33]		# note duration list
notelist_3 = [76,82,80,82,83,75,80,79,80,76,73,79,76,79,80]			# note list
splist_3 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]				# subpatch list
panalist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# pana list
panblist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# panb list
nvatlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]		# nvat list
nvaclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]				# nvac list
nvpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]				# nvpa list
nvtalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]		# nvta list
nvxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxa list
nvpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpb list
nvxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxb list
nvpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpc list
nvtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# nvtc list
nvxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]			# nvxc list
matlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]	# mat list
maclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mac list
mpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpa list
mtalist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1]		# mta list
mxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxa list
mpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpb list
mxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxb list
mpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpc list
mtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# mtc list
mxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]	# mxc list
bndalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bnda list
bndblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndb list
bndclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndc list
bndtlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndt list
bndulist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndu list
bndvlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndv list
i_3 = 0						# loop iteration counter
c_3 = 0						# note iteration counter
while i_3 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_3 in range(bpb_3) :                           # loop through the items in the rhythm list
        sb_3 = rhythmr0_3[a_3]                          # sb is current item in the rhythm list
        subeat_3 = beat_3/len(sb_3)                     # subeat is the number of sub-beats in the beat
        for b_3 in range(len(sb_3)) :                   # loop through the items in the beat string
            if sb_3[b_3].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_3[b_3])                   # get ascii number of the character
                if sb_3[b_3].isdigit() :                # check if character is numeric
                    amp_3 = (asky-47)                   # assign amplitude
                elif sb_3[b_3].isupper() :              # check if character is uppercase
                    amp_3 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_3 = (asky-60)                   # assign amplitude
            elif sb_3[b_3] == &apos;-&apos; : amp_3 = 0           # character for amp = 0                         
            elif sb_3[b_3] == &apos;&gt;&apos; : amp_3 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_3 = blueDuration + 1           # set notetime_3 &gt; blueduration
                scoreText_3 = &apos;&apos;                        # clear scoreText_3
            if notetime_3 &gt;= blueDuration : break       # break out of the loop
	    if amp_3 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_3 = durlist_3[c_3]			# get duration from durlist
		amp_3 = amp_3-62			# move amp value to correct dbfs range (max=1)
		note_3 = notelist_3[c_3]		# get note from notelist
	        sp_3 = splist_3[c_3]			# get subpatch from splist
		pana_3 = panalist_3[c_3]		# get pana from panalist
		panb_3 = panblist_3[c_3]		# get panb from panblist
		nvat_3 = nvatlist_3[c_3]		# get nvat from nvatlist
		nvac_3 = nvaclist_3[c_3]		# get nvac from nvatlist
		nvpa_3 = nvpalist_3[c_3]		# get nvpa from nvpalist
		nvta_3 = nvtalist_3[c_3]		# get nvta from nvtalist
		nvxa_3 = nvxalist_3[c_3]		# get nvxa from nvxalist
		nvpb_3 = nvpblist_3[c_3]		# get nvpb from nvpblist
		nvxb_3 = nvxblist_3[c_3]		# get nvxb from nvxblist
		nvpc_3 = nvpclist_3[c_3]		# get nvpc from nvpclist
		nvtc_3 = nvtclist_3[c_3]		# get nvtc from nvtclist
		nvxc_3 = nvxclist_3[c_3]		# get nvxc from nvxclist
		mat_3 = matlist_3[c_3]			# get mat from matlist
		mac_3 = maclist_3[c_3]			# get mac from maclist
		mpa_3 = mpalist_3[c_3]			# get mpa from mpalist
		mta_3 = mtalist_3[c_3]			# get mta from mtalist
		mxa_3 = mxalist_3[c_3]			# get mxa from mxalist
		mpb_3 = mpblist_3[c_3]			# get mpb from mpblist
		mxb_3 = mxblist_3[c_3]			# get mxb from mxblist
		mpc_3 = mpclist_3[c_3]			# get mpc from mpclist
		mtc_3 = mtclist_3[c_3]			# get mtc from mtclist
		mxc_3 = mxclist_3[c_3]			# get mxc from mxclist
		bnda_3 = bndalist_3[c_3]		# get bnda from bndalist
		bndb_3 = bndblist_3[c_3]		# get bndb from bndblist
		bndc_3 = bndclist_3[c_3]		# get bndc from bndclist
		bndt_3 = bndtlist_3[c_3]		# get bndt from bndtlist		
		bndu_3 = bndulist_3[c_3]		# get bndu from bndulist		
		bndv_3 = bndvlist_3[c_3]		# get bndv from bndvlist		
                c_3 = c_3 + 1
                scoreText_3 += &quot;i2 &quot;+str(notetime_3-nvat_3)+&quot; &quot;+str(dur_3)+&quot; &quot;+str(amp_3)+&quot; &quot;+str(note_3)+&quot; &quot;+str(sp_3)+&quot; &quot;+str(pana_3)+&quot; &quot;+str(panb_3)+&quot; &quot;+str(nvat_3)+&quot; &quot;+str(nvac_3)+&quot; &quot;+str(nvpa_3)+&quot; &quot;+str(nvta_3)+&quot; &quot;+str(nvxa_3)+&quot; &quot;+str(nvpb_3)+&quot; &quot;+str(nvxb_3)+&quot; &quot;+str(nvpc_3)+&quot; &quot;+str(nvtc_3)+&quot; &quot;+str(nvxc_3)+&quot; &quot;+str(mat_3)+&quot; &quot;+str(mac_3)+&quot; &quot;+str(mpa_3)+&quot; &quot;+str(mta_3)+&quot; &quot;+str(mxa_3)+&quot; &quot;+str(mpb_3)+&quot; &quot;+str(mxb_3)+&quot; &quot;+str(mpc_3)+&quot; &quot;+str(mtc_3)+&quot; &quot;+str(mxc_3)+&quot; &quot;+str(bnda_3)+&quot; &quot;+str(bndb_3)+&quot; &quot;+str(bndc_3)+&quot; &quot;+str(bndt_3)+&quot; &quot;+str(bndu_3)+&quot; &quot;+str(bndv_3)+&quot; \n&quot;
            notetime_3 = notetime_3 + subeat_3                      # increment notetime by subeat time value
    i_3 = i_3 + 1
    c_3 = 0
score = scoreText_3
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>55.0</startTime>
          <name>Ringer_3d</name>
          <backgroundColor>-6710785</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_3 - 3h13TET
scoreText_3 = &quot;&quot;                              	# scoreText_3 is cleared
bart_3 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_3 = [&apos;gbeba&apos;,&apos;fbeba&apos;,&apos;fbece&apos;]		# rhythm
bpb_3 = len(rhythmr0_3)                         # beats per bar
beat_3 = bart_3/bpb_3                           # time of beat in seconds
notetime_3 = 0                                  # set intitial note start time
durlist_3 = [.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33]		# note duration list
notelist_3 = [75,79,76,79,76,73,76,75,76,79,70,75,73,75,73]			# note list
splist_3 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]				# subpatch list
panalist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# pana list
panblist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# panb list
nvatlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]		# nvat list
nvaclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]				# nvac list
nvpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]				# nvpa list
nvtalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]		# nvta list
nvxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxa list
nvpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpb list
nvxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxb list
nvpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpc list
nvtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# nvtc list
nvxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]			# nvxc list
matlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]	# mat list
maclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mac list
mpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpa list
mtalist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1]		# mta list
mxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxa list
mpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpb list
mxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxb list
mpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpc list
mtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# mtc list
mxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]	# mxc list
bndalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bnda list
bndblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndb list
bndclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndc list
bndtlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndt list
bndulist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndu list
bndvlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndv list
i_3 = 0						# loop iteration counter
c_3 = 0						# note iteration counter
while i_3 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_3 in range(bpb_3) :                           # loop through the items in the rhythm list
        sb_3 = rhythmr0_3[a_3]                          # sb is current item in the rhythm list
        subeat_3 = beat_3/len(sb_3)                     # subeat is the number of sub-beats in the beat
        for b_3 in range(len(sb_3)) :                   # loop through the items in the beat string
            if sb_3[b_3].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_3[b_3])                   # get ascii number of the character
                if sb_3[b_3].isdigit() :                # check if character is numeric
                    amp_3 = (asky-47)                   # assign amplitude
                elif sb_3[b_3].isupper() :              # check if character is uppercase
                    amp_3 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_3 = (asky-60)                   # assign amplitude
            elif sb_3[b_3] == &apos;-&apos; : amp_3 = 0           # character for amp = 0                         
            elif sb_3[b_3] == &apos;&gt;&apos; : amp_3 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_3 = blueDuration + 1           # set notetime_3 &gt; blueduration
                scoreText_3 = &apos;&apos;                        # clear scoreText_3
            if notetime_3 &gt;= blueDuration : break       # break out of the loop
	    if amp_3 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_3 = durlist_3[c_3]			# get duration from durlist
		amp_3 = amp_3-62			# move amp value to correct dbfs range (max=1)
		note_3 = notelist_3[c_3]		# get note from notelist
	        sp_3 = splist_3[c_3]			# get subpatch from splist
		pana_3 = panalist_3[c_3]		# get pana from panalist
		panb_3 = panblist_3[c_3]		# get panb from panblist
		nvat_3 = nvatlist_3[c_3]		# get nvat from nvatlist
		nvac_3 = nvaclist_3[c_3]		# get nvac from nvatlist
		nvpa_3 = nvpalist_3[c_3]		# get nvpa from nvpalist
		nvta_3 = nvtalist_3[c_3]		# get nvta from nvtalist
		nvxa_3 = nvxalist_3[c_3]		# get nvxa from nvxalist
		nvpb_3 = nvpblist_3[c_3]		# get nvpb from nvpblist
		nvxb_3 = nvxblist_3[c_3]		# get nvxb from nvxblist
		nvpc_3 = nvpclist_3[c_3]		# get nvpc from nvpclist
		nvtc_3 = nvtclist_3[c_3]		# get nvtc from nvtclist
		nvxc_3 = nvxclist_3[c_3]		# get nvxc from nvxclist
		mat_3 = matlist_3[c_3]			# get mat from matlist
		mac_3 = maclist_3[c_3]			# get mac from maclist
		mpa_3 = mpalist_3[c_3]			# get mpa from mpalist
		mta_3 = mtalist_3[c_3]			# get mta from mtalist
		mxa_3 = mxalist_3[c_3]			# get mxa from mxalist
		mpb_3 = mpblist_3[c_3]			# get mpb from mpblist
		mxb_3 = mxblist_3[c_3]			# get mxb from mxblist
		mpc_3 = mpclist_3[c_3]			# get mpc from mpclist
		mtc_3 = mtclist_3[c_3]			# get mtc from mtclist
		mxc_3 = mxclist_3[c_3]			# get mxc from mxclist
		bnda_3 = bndalist_3[c_3]		# get bnda from bndalist
		bndb_3 = bndblist_3[c_3]		# get bndb from bndblist
		bndc_3 = bndclist_3[c_3]		# get bndc from bndclist
		bndt_3 = bndtlist_3[c_3]		# get bndt from bndtlist		
		bndu_3 = bndulist_3[c_3]		# get bndu from bndulist		
		bndv_3 = bndvlist_3[c_3]		# get bndv from bndvlist		
                c_3 = c_3 + 1
                scoreText_3 += &quot;i2 &quot;+str(notetime_3-nvat_3)+&quot; &quot;+str(dur_3)+&quot; &quot;+str(amp_3)+&quot; &quot;+str(note_3)+&quot; &quot;+str(sp_3)+&quot; &quot;+str(pana_3)+&quot; &quot;+str(panb_3)+&quot; &quot;+str(nvat_3)+&quot; &quot;+str(nvac_3)+&quot; &quot;+str(nvpa_3)+&quot; &quot;+str(nvta_3)+&quot; &quot;+str(nvxa_3)+&quot; &quot;+str(nvpb_3)+&quot; &quot;+str(nvxb_3)+&quot; &quot;+str(nvpc_3)+&quot; &quot;+str(nvtc_3)+&quot; &quot;+str(nvxc_3)+&quot; &quot;+str(mat_3)+&quot; &quot;+str(mac_3)+&quot; &quot;+str(mpa_3)+&quot; &quot;+str(mta_3)+&quot; &quot;+str(mxa_3)+&quot; &quot;+str(mpb_3)+&quot; &quot;+str(mxb_3)+&quot; &quot;+str(mpc_3)+&quot; &quot;+str(mtc_3)+&quot; &quot;+str(mxc_3)+&quot; &quot;+str(bnda_3)+&quot; &quot;+str(bndb_3)+&quot; &quot;+str(bndc_3)+&quot; &quot;+str(bndt_3)+&quot; &quot;+str(bndu_3)+&quot; &quot;+str(bndv_3)+&quot; \n&quot;
            notetime_3 = notetime_3 + subeat_3                      # increment notetime by subeat time value
    i_3 = i_3 + 1
    c_3 = 0
score = scoreText_3
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>60.0</startTime>
          <name>Ringer_3f</name>
          <backgroundColor>-6710785</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_3 - 3h13TET
scoreText_3 = &quot;&quot;                              	# scoreText_3 is cleared
bart_3 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_3 = [&apos;gbeba&apos;,&apos;fbeba&apos;,&apos;fbecU&apos;]		# rhythm
bpb_3 = len(rhythmr0_3)                         # beats per bar
beat_3 = bart_3/bpb_3                           # time of beat in seconds
notetime_3 = 0                                  # set intitial note start time
durlist_3 = [.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33]		# note duration list
notelist_3 = [69,73,70,75,73,76,75,79,76,80,79,82,79,80,79]			# note list
splist_3 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]				# subpatch list
panalist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# pana list
panblist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# panb list
nvatlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]		# nvat list
nvaclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]				# nvac list
nvpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]				# nvpa list
nvtalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]		# nvta list
nvxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxa list
nvpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpb list
nvxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxb list
nvpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpc list
nvtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# nvtc list
nvxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]			# nvxc list
matlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]	# mat list
maclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mac list
mpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpa list
mtalist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1]		# mta list
mxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxa list
mpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpb list
mxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxb list
mpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpc list
mtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# mtc list
mxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]	# mxc list
bndalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bnda list
bndblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndb list
bndclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndc list
bndtlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndt list
bndulist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndu list
bndvlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndv list
i_3 = 0						# loop iteration counter
c_3 = 0						# note iteration counter
while i_3 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_3 in range(bpb_3) :                           # loop through the items in the rhythm list
        sb_3 = rhythmr0_3[a_3]                          # sb is current item in the rhythm list
        subeat_3 = beat_3/len(sb_3)                     # subeat is the number of sub-beats in the beat
        for b_3 in range(len(sb_3)) :                   # loop through the items in the beat string
            if sb_3[b_3].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_3[b_3])                   # get ascii number of the character
                if sb_3[b_3].isdigit() :                # check if character is numeric
                    amp_3 = (asky-47)                   # assign amplitude
                elif sb_3[b_3].isupper() :              # check if character is uppercase
                    amp_3 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_3 = (asky-60)                   # assign amplitude
            elif sb_3[b_3] == &apos;-&apos; : amp_3 = 0           # character for amp = 0                         
            elif sb_3[b_3] == &apos;&gt;&apos; : amp_3 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_3 = blueDuration + 1           # set notetime_3 &gt; blueduration
                scoreText_3 = &apos;&apos;                        # clear scoreText_3
            if notetime_3 &gt;= blueDuration : break       # break out of the loop
	    if amp_3 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_3 = durlist_3[c_3]			# get duration from durlist
		amp_3 = amp_3-62			# move amp value to correct dbfs range (max=1)
		note_3 = notelist_3[c_3]		# get note from notelist
	        sp_3 = splist_3[c_3]			# get subpatch from splist
		pana_3 = panalist_3[c_3]		# get pana from panalist
		panb_3 = panblist_3[c_3]		# get panb from panblist
		nvat_3 = nvatlist_3[c_3]		# get nvat from nvatlist
		nvac_3 = nvaclist_3[c_3]		# get nvac from nvatlist
		nvpa_3 = nvpalist_3[c_3]		# get nvpa from nvpalist
		nvta_3 = nvtalist_3[c_3]		# get nvta from nvtalist
		nvxa_3 = nvxalist_3[c_3]		# get nvxa from nvxalist
		nvpb_3 = nvpblist_3[c_3]		# get nvpb from nvpblist
		nvxb_3 = nvxblist_3[c_3]		# get nvxb from nvxblist
		nvpc_3 = nvpclist_3[c_3]		# get nvpc from nvpclist
		nvtc_3 = nvtclist_3[c_3]		# get nvtc from nvtclist
		nvxc_3 = nvxclist_3[c_3]		# get nvxc from nvxclist
		mat_3 = matlist_3[c_3]			# get mat from matlist
		mac_3 = maclist_3[c_3]			# get mac from maclist
		mpa_3 = mpalist_3[c_3]			# get mpa from mpalist
		mta_3 = mtalist_3[c_3]			# get mta from mtalist
		mxa_3 = mxalist_3[c_3]			# get mxa from mxalist
		mpb_3 = mpblist_3[c_3]			# get mpb from mpblist
		mxb_3 = mxblist_3[c_3]			# get mxb from mxblist
		mpc_3 = mpclist_3[c_3]			# get mpc from mpclist
		mtc_3 = mtclist_3[c_3]			# get mtc from mtclist
		mxc_3 = mxclist_3[c_3]			# get mxc from mxclist
		bnda_3 = bndalist_3[c_3]		# get bnda from bndalist
		bndb_3 = bndblist_3[c_3]		# get bndb from bndblist
		bndc_3 = bndclist_3[c_3]		# get bndc from bndclist
		bndt_3 = bndtlist_3[c_3]		# get bndt from bndtlist		
		bndu_3 = bndulist_3[c_3]		# get bndu from bndulist		
		bndv_3 = bndvlist_3[c_3]		# get bndv from bndvlist		
                c_3 = c_3 + 1
                scoreText_3 += &quot;i2 &quot;+str(notetime_3-nvat_3)+&quot; &quot;+str(dur_3)+&quot; &quot;+str(amp_3)+&quot; &quot;+str(note_3)+&quot; &quot;+str(sp_3)+&quot; &quot;+str(pana_3)+&quot; &quot;+str(panb_3)+&quot; &quot;+str(nvat_3)+&quot; &quot;+str(nvac_3)+&quot; &quot;+str(nvpa_3)+&quot; &quot;+str(nvta_3)+&quot; &quot;+str(nvxa_3)+&quot; &quot;+str(nvpb_3)+&quot; &quot;+str(nvxb_3)+&quot; &quot;+str(nvpc_3)+&quot; &quot;+str(nvtc_3)+&quot; &quot;+str(nvxc_3)+&quot; &quot;+str(mat_3)+&quot; &quot;+str(mac_3)+&quot; &quot;+str(mpa_3)+&quot; &quot;+str(mta_3)+&quot; &quot;+str(mxa_3)+&quot; &quot;+str(mpb_3)+&quot; &quot;+str(mxb_3)+&quot; &quot;+str(mpc_3)+&quot; &quot;+str(mtc_3)+&quot; &quot;+str(mxc_3)+&quot; &quot;+str(bnda_3)+&quot; &quot;+str(bndb_3)+&quot; &quot;+str(bndc_3)+&quot; &quot;+str(bndt_3)+&quot; &quot;+str(bndu_3)+&quot; &quot;+str(bndv_3)+&quot; \n&quot;
            notetime_3 = notetime_3 + subeat_3                      # increment notetime by subeat time value
    i_3 = i_3 + 1
    c_3 = 0
score = scoreText_3
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>66.0</startTime>
          <name>Ringer_7a</name>
          <backgroundColor>-6710785</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_3 - 3h6TET
scoreText_3 = &quot;&quot;                              	# scoreText_3 is cleared
bart_3 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_3 = [&apos;fadaZ&apos;,&apos;eadaZ&apos;,&apos;eadbd&apos;]		# rhythm
bpb_3 = len(rhythmr0_3)                         # beats per bar
beat_3 = bart_3/bpb_3                           # time of beat in seconds
notetime_3 = 0                                  # set intitial note start time
durlist_3 = [.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33]		# note duration list
notelist_3 = [60,63,62,61,60,59,62,61,60,59,58,61,60,59,58]			# note list
splist_3 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]				# subpatch list
panalist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# pana list
panblist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# panb list
nvatlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]		# nvat list
nvaclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]				# nvac list
nvpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]				# nvpa list
nvtalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]		# nvta list
nvxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxa list
nvpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpb list
nvxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxb list
nvpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpc list
nvtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# nvtc list
nvxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]			# nvxc list
matlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]	# mat list
maclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mac list
mpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpa list
mtalist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1]		# mta list
mxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxa list
mpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpb list
mxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxb list
mpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpc list
mtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# mtc list
mxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]	# mxc list
bndalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bnda list
bndblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndb list
bndclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndc list
bndtlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndt list
bndulist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndu list
bndvlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndv list
i_3 = 0						# loop iteration counter
c_3 = 0						# note iteration counter
while i_3 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_3 in range(bpb_3) :                           # loop through the items in the rhythm list
        sb_3 = rhythmr0_3[a_3]                          # sb is current item in the rhythm list
        subeat_3 = beat_3/len(sb_3)                     # subeat is the number of sub-beats in the beat
        for b_3 in range(len(sb_3)) :                   # loop through the items in the beat string
            if sb_3[b_3].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_3[b_3])                   # get ascii number of the character
                if sb_3[b_3].isdigit() :                # check if character is numeric
                    amp_3 = (asky-47)                   # assign amplitude
                elif sb_3[b_3].isupper() :              # check if character is uppercase
                    amp_3 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_3 = (asky-60)                   # assign amplitude
            elif sb_3[b_3] == &apos;-&apos; : amp_3 = 0           # character for amp = 0                         
            elif sb_3[b_3] == &apos;&gt;&apos; : amp_3 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_3 = blueDuration + 1           # set notetime_3 &gt; blueduration
                scoreText_3 = &apos;&apos;                        # clear scoreText_3
            if notetime_3 &gt;= blueDuration : break       # break out of the loop
	    if amp_3 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_3 = durlist_3[c_3]			# get duration from durlist
		amp_3 = amp_3-62			# move amp value to correct dbfs range (max=1)
		note_3 = notelist_3[c_3]		# get note from notelist
	        sp_3 = splist_3[c_3]			# get subpatch from splist
		pana_3 = panalist_3[c_3]		# get pana from panalist
		panb_3 = panblist_3[c_3]		# get panb from panblist
		nvat_3 = nvatlist_3[c_3]		# get nvat from nvatlist
		nvac_3 = nvaclist_3[c_3]		# get nvac from nvatlist
		nvpa_3 = nvpalist_3[c_3]		# get nvpa from nvpalist
		nvta_3 = nvtalist_3[c_3]		# get nvta from nvtalist
		nvxa_3 = nvxalist_3[c_3]		# get nvxa from nvxalist
		nvpb_3 = nvpblist_3[c_3]		# get nvpb from nvpblist
		nvxb_3 = nvxblist_3[c_3]		# get nvxb from nvxblist
		nvpc_3 = nvpclist_3[c_3]		# get nvpc from nvpclist
		nvtc_3 = nvtclist_3[c_3]		# get nvtc from nvtclist
		nvxc_3 = nvxclist_3[c_3]		# get nvxc from nvxclist
		mat_3 = matlist_3[c_3]			# get mat from matlist
		mac_3 = maclist_3[c_3]			# get mac from maclist
		mpa_3 = mpalist_3[c_3]			# get mpa from mpalist
		mta_3 = mtalist_3[c_3]			# get mta from mtalist
		mxa_3 = mxalist_3[c_3]			# get mxa from mxalist
		mpb_3 = mpblist_3[c_3]			# get mpb from mpblist
		mxb_3 = mxblist_3[c_3]			# get mxb from mxblist
		mpc_3 = mpclist_3[c_3]			# get mpc from mpclist
		mtc_3 = mtclist_3[c_3]			# get mtc from mtclist
		mxc_3 = mxclist_3[c_3]			# get mxc from mxclist
		bnda_3 = bndalist_3[c_3]		# get bnda from bndalist
		bndb_3 = bndblist_3[c_3]		# get bndb from bndblist
		bndc_3 = bndclist_3[c_3]		# get bndc from bndclist
		bndt_3 = bndtlist_3[c_3]		# get bndt from bndtlist		
		bndu_3 = bndulist_3[c_3]		# get bndu from bndulist		
		bndv_3 = bndvlist_3[c_3]		# get bndv from bndvlist		
                c_3 = c_3 + 1
                scoreText_3 += &quot;i2 &quot;+str(notetime_3-nvat_3)+&quot; &quot;+str(dur_3)+&quot; &quot;+str(amp_3)+&quot; &quot;+str(note_3)+&quot; &quot;+str(sp_3)+&quot; &quot;+str(pana_3)+&quot; &quot;+str(panb_3)+&quot; &quot;+str(nvat_3)+&quot; &quot;+str(nvac_3)+&quot; &quot;+str(nvpa_3)+&quot; &quot;+str(nvta_3)+&quot; &quot;+str(nvxa_3)+&quot; &quot;+str(nvpb_3)+&quot; &quot;+str(nvxb_3)+&quot; &quot;+str(nvpc_3)+&quot; &quot;+str(nvtc_3)+&quot; &quot;+str(nvxc_3)+&quot; &quot;+str(mat_3)+&quot; &quot;+str(mac_3)+&quot; &quot;+str(mpa_3)+&quot; &quot;+str(mta_3)+&quot; &quot;+str(mxa_3)+&quot; &quot;+str(mpb_3)+&quot; &quot;+str(mxb_3)+&quot; &quot;+str(mpc_3)+&quot; &quot;+str(mtc_3)+&quot; &quot;+str(mxc_3)+&quot; &quot;+str(bnda_3)+&quot; &quot;+str(bndb_3)+&quot; &quot;+str(bndc_3)+&quot; &quot;+str(bndt_3)+&quot; &quot;+str(bndu_3)+&quot; &quot;+str(bndv_3)+&quot; \n&quot;
            notetime_3 = notetime_3 + subeat_3                      # increment notetime by subeat time value
    i_3 = i_3 + 1
    c_3 = 0
score = scoreText_3
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>71.0</startTime>
          <name>Ringer_7b</name>
          <backgroundColor>-6710785</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_3 - 3h13TET
scoreText_3 = &quot;&quot;                              	# scoreText_3 is cleared
bart_3 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_3 = [&apos;fadaZ&apos;,&apos;eadaZ&apos;,&apos;eadbd&apos;]		# rhythm
bpb_3 = len(rhythmr0_3)                         # beats per bar
beat_3 = bart_3/bpb_3                           # time of beat in seconds
notetime_3 = 0                                  # set intitial note start time
durlist_3 = [.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33]		# note duration list
notelist_3 = [59,62,61,60,59,58,61,60,59,58,57,60,59,58,57]			# note list
splist_3 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]				# subpatch list
panalist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# pana list
panblist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# panb list
nvatlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]		# nvat list
nvaclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]				# nvac list
nvpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]				# nvpa list
nvtalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]		# nvta list
nvxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxa list
nvpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpb list
nvxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxb list
nvpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpc list
nvtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# nvtc list
nvxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]			# nvxc list
matlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]	# mat list
maclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mac list
mpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpa list
mtalist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1]		# mta list
mxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxa list
mpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpb list
mxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxb list
mpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpc list
mtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# mtc list
mxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]	# mxc list
bndalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bnda list
bndblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndb list
bndclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndc list
bndtlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndt list
bndulist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndu list
bndvlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndv list
i_3 = 0						# loop iteration counter
c_3 = 0						# note iteration counter
while i_3 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_3 in range(bpb_3) :                           # loop through the items in the rhythm list
        sb_3 = rhythmr0_3[a_3]                          # sb is current item in the rhythm list
        subeat_3 = beat_3/len(sb_3)                     # subeat is the number of sub-beats in the beat
        for b_3 in range(len(sb_3)) :                   # loop through the items in the beat string
            if sb_3[b_3].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_3[b_3])                   # get ascii number of the character
                if sb_3[b_3].isdigit() :                # check if character is numeric
                    amp_3 = (asky-47)                   # assign amplitude
                elif sb_3[b_3].isupper() :              # check if character is uppercase
                    amp_3 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_3 = (asky-60)                   # assign amplitude
            elif sb_3[b_3] == &apos;-&apos; : amp_3 = 0           # character for amp = 0                         
            elif sb_3[b_3] == &apos;&gt;&apos; : amp_3 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_3 = blueDuration + 1           # set notetime_3 &gt; blueduration
                scoreText_3 = &apos;&apos;                        # clear scoreText_3
            if notetime_3 &gt;= blueDuration : break       # break out of the loop
	    if amp_3 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_3 = durlist_3[c_3]			# get duration from durlist
		amp_3 = amp_3-62			# move amp value to correct dbfs range (max=1)
		note_3 = notelist_3[c_3]		# get note from notelist
	        sp_3 = splist_3[c_3]			# get subpatch from splist
		pana_3 = panalist_3[c_3]		# get pana from panalist
		panb_3 = panblist_3[c_3]		# get panb from panblist
		nvat_3 = nvatlist_3[c_3]		# get nvat from nvatlist
		nvac_3 = nvaclist_3[c_3]		# get nvac from nvatlist
		nvpa_3 = nvpalist_3[c_3]		# get nvpa from nvpalist
		nvta_3 = nvtalist_3[c_3]		# get nvta from nvtalist
		nvxa_3 = nvxalist_3[c_3]		# get nvxa from nvxalist
		nvpb_3 = nvpblist_3[c_3]		# get nvpb from nvpblist
		nvxb_3 = nvxblist_3[c_3]		# get nvxb from nvxblist
		nvpc_3 = nvpclist_3[c_3]		# get nvpc from nvpclist
		nvtc_3 = nvtclist_3[c_3]		# get nvtc from nvtclist
		nvxc_3 = nvxclist_3[c_3]		# get nvxc from nvxclist
		mat_3 = matlist_3[c_3]			# get mat from matlist
		mac_3 = maclist_3[c_3]			# get mac from maclist
		mpa_3 = mpalist_3[c_3]			# get mpa from mpalist
		mta_3 = mtalist_3[c_3]			# get mta from mtalist
		mxa_3 = mxalist_3[c_3]			# get mxa from mxalist
		mpb_3 = mpblist_3[c_3]			# get mpb from mpblist
		mxb_3 = mxblist_3[c_3]			# get mxb from mxblist
		mpc_3 = mpclist_3[c_3]			# get mpc from mpclist
		mtc_3 = mtclist_3[c_3]			# get mtc from mtclist
		mxc_3 = mxclist_3[c_3]			# get mxc from mxclist
		bnda_3 = bndalist_3[c_3]		# get bnda from bndalist
		bndb_3 = bndblist_3[c_3]		# get bndb from bndblist
		bndc_3 = bndclist_3[c_3]		# get bndc from bndclist
		bndt_3 = bndtlist_3[c_3]		# get bndt from bndtlist		
		bndu_3 = bndulist_3[c_3]		# get bndu from bndulist		
		bndv_3 = bndvlist_3[c_3]		# get bndv from bndvlist		
                c_3 = c_3 + 1
                scoreText_3 += &quot;i2 &quot;+str(notetime_3-nvat_3)+&quot; &quot;+str(dur_3)+&quot; &quot;+str(amp_3)+&quot; &quot;+str(note_3)+&quot; &quot;+str(sp_3)+&quot; &quot;+str(pana_3)+&quot; &quot;+str(panb_3)+&quot; &quot;+str(nvat_3)+&quot; &quot;+str(nvac_3)+&quot; &quot;+str(nvpa_3)+&quot; &quot;+str(nvta_3)+&quot; &quot;+str(nvxa_3)+&quot; &quot;+str(nvpb_3)+&quot; &quot;+str(nvxb_3)+&quot; &quot;+str(nvpc_3)+&quot; &quot;+str(nvtc_3)+&quot; &quot;+str(nvxc_3)+&quot; &quot;+str(mat_3)+&quot; &quot;+str(mac_3)+&quot; &quot;+str(mpa_3)+&quot; &quot;+str(mta_3)+&quot; &quot;+str(mxa_3)+&quot; &quot;+str(mpb_3)+&quot; &quot;+str(mxb_3)+&quot; &quot;+str(mpc_3)+&quot; &quot;+str(mtc_3)+&quot; &quot;+str(mxc_3)+&quot; &quot;+str(bnda_3)+&quot; &quot;+str(bndb_3)+&quot; &quot;+str(bndc_3)+&quot; &quot;+str(bndt_3)+&quot; &quot;+str(bndu_3)+&quot; &quot;+str(bndv_3)+&quot; \n&quot;
            notetime_3 = notetime_3 + subeat_3                      # increment notetime by subeat time value
    i_3 = i_3 + 1
    c_3 = 0
score = scoreText_3
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>76.0</startTime>
          <name>Ringer_7c</name>
          <backgroundColor>-6710785</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_3 - 3h13TET
scoreText_3 = &quot;&quot;                              	# scoreText_3 is cleared
bart_3 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_3 = [&apos;fadaZ&apos;,&apos;eadaZ&apos;,&apos;eadbd&apos;]		# rhythm
bpb_3 = len(rhythmr0_3)                         # beats per bar
beat_3 = bart_3/bpb_3                           # time of beat in seconds
notetime_3 = 0                                  # set intitial note start time
durlist_3 = [.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33]		# note duration list
notelist_3 = [60,63,62,61,60,59,62,61,60,59,58,61,60,61,62]			# note list
splist_3 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]				# subpatch list
panalist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# pana list
panblist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# panb list
nvatlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]		# nvat list
nvaclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]				# nvac list
nvpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]				# nvpa list
nvtalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]		# nvta list
nvxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxa list
nvpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpb list
nvxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxb list
nvpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpc list
nvtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# nvtc list
nvxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]			# nvxc list
matlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]	# mat list
maclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mac list
mpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpa list
mtalist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1]		# mta list
mxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxa list
mpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpb list
mxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxb list
mpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpc list
mtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# mtc list
mxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]	# mxc list
bndalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bnda list
bndblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndb list
bndclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndc list
bndtlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndt list
bndulist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndu list
bndvlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndv list
i_3 = 0						# loop iteration counter
c_3 = 0						# note iteration counter
while i_3 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_3 in range(bpb_3) :                           # loop through the items in the rhythm list
        sb_3 = rhythmr0_3[a_3]                          # sb is current item in the rhythm list
        subeat_3 = beat_3/len(sb_3)                     # subeat is the number of sub-beats in the beat
        for b_3 in range(len(sb_3)) :                   # loop through the items in the beat string
            if sb_3[b_3].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_3[b_3])                   # get ascii number of the character
                if sb_3[b_3].isdigit() :                # check if character is numeric
                    amp_3 = (asky-47)                   # assign amplitude
                elif sb_3[b_3].isupper() :              # check if character is uppercase
                    amp_3 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_3 = (asky-60)                   # assign amplitude
            elif sb_3[b_3] == &apos;-&apos; : amp_3 = 0           # character for amp = 0                         
            elif sb_3[b_3] == &apos;&gt;&apos; : amp_3 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_3 = blueDuration + 1           # set notetime_3 &gt; blueduration
                scoreText_3 = &apos;&apos;                        # clear scoreText_3
            if notetime_3 &gt;= blueDuration : break       # break out of the loop
	    if amp_3 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_3 = durlist_3[c_3]			# get duration from durlist
		amp_3 = amp_3-62			# move amp value to correct dbfs range (max=1)
		note_3 = notelist_3[c_3]		# get note from notelist
	        sp_3 = splist_3[c_3]			# get subpatch from splist
		pana_3 = panalist_3[c_3]		# get pana from panalist
		panb_3 = panblist_3[c_3]		# get panb from panblist
		nvat_3 = nvatlist_3[c_3]		# get nvat from nvatlist
		nvac_3 = nvaclist_3[c_3]		# get nvac from nvatlist
		nvpa_3 = nvpalist_3[c_3]		# get nvpa from nvpalist
		nvta_3 = nvtalist_3[c_3]		# get nvta from nvtalist
		nvxa_3 = nvxalist_3[c_3]		# get nvxa from nvxalist
		nvpb_3 = nvpblist_3[c_3]		# get nvpb from nvpblist
		nvxb_3 = nvxblist_3[c_3]		# get nvxb from nvxblist
		nvpc_3 = nvpclist_3[c_3]		# get nvpc from nvpclist
		nvtc_3 = nvtclist_3[c_3]		# get nvtc from nvtclist
		nvxc_3 = nvxclist_3[c_3]		# get nvxc from nvxclist
		mat_3 = matlist_3[c_3]			# get mat from matlist
		mac_3 = maclist_3[c_3]			# get mac from maclist
		mpa_3 = mpalist_3[c_3]			# get mpa from mpalist
		mta_3 = mtalist_3[c_3]			# get mta from mtalist
		mxa_3 = mxalist_3[c_3]			# get mxa from mxalist
		mpb_3 = mpblist_3[c_3]			# get mpb from mpblist
		mxb_3 = mxblist_3[c_3]			# get mxb from mxblist
		mpc_3 = mpclist_3[c_3]			# get mpc from mpclist
		mtc_3 = mtclist_3[c_3]			# get mtc from mtclist
		mxc_3 = mxclist_3[c_3]			# get mxc from mxclist
		bnda_3 = bndalist_3[c_3]		# get bnda from bndalist
		bndb_3 = bndblist_3[c_3]		# get bndb from bndblist
		bndc_3 = bndclist_3[c_3]		# get bndc from bndclist
		bndt_3 = bndtlist_3[c_3]		# get bndt from bndtlist		
		bndu_3 = bndulist_3[c_3]		# get bndu from bndulist		
		bndv_3 = bndvlist_3[c_3]		# get bndv from bndvlist		
                c_3 = c_3 + 1
                scoreText_3 += &quot;i2 &quot;+str(notetime_3-nvat_3)+&quot; &quot;+str(dur_3)+&quot; &quot;+str(amp_3)+&quot; &quot;+str(note_3)+&quot; &quot;+str(sp_3)+&quot; &quot;+str(pana_3)+&quot; &quot;+str(panb_3)+&quot; &quot;+str(nvat_3)+&quot; &quot;+str(nvac_3)+&quot; &quot;+str(nvpa_3)+&quot; &quot;+str(nvta_3)+&quot; &quot;+str(nvxa_3)+&quot; &quot;+str(nvpb_3)+&quot; &quot;+str(nvxb_3)+&quot; &quot;+str(nvpc_3)+&quot; &quot;+str(nvtc_3)+&quot; &quot;+str(nvxc_3)+&quot; &quot;+str(mat_3)+&quot; &quot;+str(mac_3)+&quot; &quot;+str(mpa_3)+&quot; &quot;+str(mta_3)+&quot; &quot;+str(mxa_3)+&quot; &quot;+str(mpb_3)+&quot; &quot;+str(mxb_3)+&quot; &quot;+str(mpc_3)+&quot; &quot;+str(mtc_3)+&quot; &quot;+str(mxc_3)+&quot; &quot;+str(bnda_3)+&quot; &quot;+str(bndb_3)+&quot; &quot;+str(bndc_3)+&quot; &quot;+str(bndt_3)+&quot; &quot;+str(bndu_3)+&quot; &quot;+str(bndv_3)+&quot; \n&quot;
            notetime_3 = notetime_3 + subeat_3                      # increment notetime by subeat time value
    i_3 = i_3 + 1
    c_3 = 0
score = scoreText_3
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>81.0</startTime>
          <name>Ringer_7d</name>
          <backgroundColor>-6710785</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_3 - 3h13TET
scoreText_3 = &quot;&quot;                              	# scoreText_3 is cleared
bart_3 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_3 = [&apos;fadaZ&apos;,&apos;eadaZ&apos;,&apos;eadbd&apos;]		# rhythm
bpb_3 = len(rhythmr0_3)                         # beats per bar
beat_3 = bart_3/bpb_3                           # time of beat in seconds
notetime_3 = 0                                  # set intitial note start time
durlist_3 = [.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33]		# note duration list
notelist_3 = [59,61,60,61,60,58,60,59,60,61,57,59,58,59,58]			# note list
splist_3 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]				# subpatch list
panalist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# pana list
panblist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# panb list
nvatlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]		# nvat list
nvaclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]				# nvac list
nvpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]				# nvpa list
nvtalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]		# nvta list
nvxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxa list
nvpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpb list
nvxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxb list
nvpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpc list
nvtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# nvtc list
nvxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]			# nvxc list
matlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]	# mat list
maclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mac list
mpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpa list
mtalist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1]		# mta list
mxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxa list
mpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpb list
mxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxb list
mpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpc list
mtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# mtc list
mxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]	# mxc list
bndalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bnda list
bndblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndb list
bndclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndc list
bndtlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndt list
bndulist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndu list
bndvlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndv list
i_3 = 0						# loop iteration counter
c_3 = 0						# note iteration counter
while i_3 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_3 in range(bpb_3) :                           # loop through the items in the rhythm list
        sb_3 = rhythmr0_3[a_3]                          # sb is current item in the rhythm list
        subeat_3 = beat_3/len(sb_3)                     # subeat is the number of sub-beats in the beat
        for b_3 in range(len(sb_3)) :                   # loop through the items in the beat string
            if sb_3[b_3].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_3[b_3])                   # get ascii number of the character
                if sb_3[b_3].isdigit() :                # check if character is numeric
                    amp_3 = (asky-47)                   # assign amplitude
                elif sb_3[b_3].isupper() :              # check if character is uppercase
                    amp_3 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_3 = (asky-60)                   # assign amplitude
            elif sb_3[b_3] == &apos;-&apos; : amp_3 = 0           # character for amp = 0                         
            elif sb_3[b_3] == &apos;&gt;&apos; : amp_3 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_3 = blueDuration + 1           # set notetime_3 &gt; blueduration
                scoreText_3 = &apos;&apos;                        # clear scoreText_3
            if notetime_3 &gt;= blueDuration : break       # break out of the loop
	    if amp_3 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_3 = durlist_3[c_3]			# get duration from durlist
		amp_3 = amp_3-62			# move amp value to correct dbfs range (max=1)
		note_3 = notelist_3[c_3]		# get note from notelist
	        sp_3 = splist_3[c_3]			# get subpatch from splist
		pana_3 = panalist_3[c_3]		# get pana from panalist
		panb_3 = panblist_3[c_3]		# get panb from panblist
		nvat_3 = nvatlist_3[c_3]		# get nvat from nvatlist
		nvac_3 = nvaclist_3[c_3]		# get nvac from nvatlist
		nvpa_3 = nvpalist_3[c_3]		# get nvpa from nvpalist
		nvta_3 = nvtalist_3[c_3]		# get nvta from nvtalist
		nvxa_3 = nvxalist_3[c_3]		# get nvxa from nvxalist
		nvpb_3 = nvpblist_3[c_3]		# get nvpb from nvpblist
		nvxb_3 = nvxblist_3[c_3]		# get nvxb from nvxblist
		nvpc_3 = nvpclist_3[c_3]		# get nvpc from nvpclist
		nvtc_3 = nvtclist_3[c_3]		# get nvtc from nvtclist
		nvxc_3 = nvxclist_3[c_3]		# get nvxc from nvxclist
		mat_3 = matlist_3[c_3]			# get mat from matlist
		mac_3 = maclist_3[c_3]			# get mac from maclist
		mpa_3 = mpalist_3[c_3]			# get mpa from mpalist
		mta_3 = mtalist_3[c_3]			# get mta from mtalist
		mxa_3 = mxalist_3[c_3]			# get mxa from mxalist
		mpb_3 = mpblist_3[c_3]			# get mpb from mpblist
		mxb_3 = mxblist_3[c_3]			# get mxb from mxblist
		mpc_3 = mpclist_3[c_3]			# get mpc from mpclist
		mtc_3 = mtclist_3[c_3]			# get mtc from mtclist
		mxc_3 = mxclist_3[c_3]			# get mxc from mxclist
		bnda_3 = bndalist_3[c_3]		# get bnda from bndalist
		bndb_3 = bndblist_3[c_3]		# get bndb from bndblist
		bndc_3 = bndclist_3[c_3]		# get bndc from bndclist
		bndt_3 = bndtlist_3[c_3]		# get bndt from bndtlist		
		bndu_3 = bndulist_3[c_3]		# get bndu from bndulist		
		bndv_3 = bndvlist_3[c_3]		# get bndv from bndvlist		
                c_3 = c_3 + 1
                scoreText_3 += &quot;i2 &quot;+str(notetime_3-nvat_3)+&quot; &quot;+str(dur_3)+&quot; &quot;+str(amp_3)+&quot; &quot;+str(note_3)+&quot; &quot;+str(sp_3)+&quot; &quot;+str(pana_3)+&quot; &quot;+str(panb_3)+&quot; &quot;+str(nvat_3)+&quot; &quot;+str(nvac_3)+&quot; &quot;+str(nvpa_3)+&quot; &quot;+str(nvta_3)+&quot; &quot;+str(nvxa_3)+&quot; &quot;+str(nvpb_3)+&quot; &quot;+str(nvxb_3)+&quot; &quot;+str(nvpc_3)+&quot; &quot;+str(nvtc_3)+&quot; &quot;+str(nvxc_3)+&quot; &quot;+str(mat_3)+&quot; &quot;+str(mac_3)+&quot; &quot;+str(mpa_3)+&quot; &quot;+str(mta_3)+&quot; &quot;+str(mxa_3)+&quot; &quot;+str(mpb_3)+&quot; &quot;+str(mxb_3)+&quot; &quot;+str(mpc_3)+&quot; &quot;+str(mtc_3)+&quot; &quot;+str(mxc_3)+&quot; &quot;+str(bnda_3)+&quot; &quot;+str(bndb_3)+&quot; &quot;+str(bndc_3)+&quot; &quot;+str(bndt_3)+&quot; &quot;+str(bndu_3)+&quot; &quot;+str(bndv_3)+&quot; \n&quot;
            notetime_3 = notetime_3 + subeat_3                      # increment notetime by subeat time value
    i_3 = i_3 + 1
    c_3 = 0
score = scoreText_3
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>86.0</startTime>
          <name>Ringer_7e</name>
          <backgroundColor>-6710785</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_3 - 3h13TET
scoreText_3 = &quot;&quot;                              	# scoreText_3 is cleared
bart_3 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_3 = [&apos;fadaZ&apos;,&apos;eadaZ&apos;,&apos;eadbd&apos;]		# rhythm
bpb_3 = len(rhythmr0_3)                         # beats per bar
beat_3 = bart_3/bpb_3                           # time of beat in seconds
notetime_3 = 0                                  # set intitial note start time
durlist_3 = [.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33]		# note duration list
notelist_3 = [56,58,57,59,58,60,59,61,60,62,61,63,61,62,61]			# note list
splist_3 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]				# subpatch list
panalist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# pana list
panblist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# panb list
nvatlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]		# nvat list
nvaclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]				# nvac list
nvpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]				# nvpa list
nvtalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]		# nvta list
nvxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxa list
nvpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpb list
nvxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxb list
nvpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpc list
nvtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# nvtc list
nvxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]			# nvxc list
matlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]	# mat list
maclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mac list
mpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpa list
mtalist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1]		# mta list
mxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxa list
mpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpb list
mxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxb list
mpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpc list
mtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# mtc list
mxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]	# mxc list
bndalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bnda list
bndblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndb list
bndclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndc list
bndtlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndt list
bndulist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndu list
bndvlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndv list
i_3 = 0						# loop iteration counter
c_3 = 0						# note iteration counter
while i_3 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_3 in range(bpb_3) :                           # loop through the items in the rhythm list
        sb_3 = rhythmr0_3[a_3]                          # sb is current item in the rhythm list
        subeat_3 = beat_3/len(sb_3)                     # subeat is the number of sub-beats in the beat
        for b_3 in range(len(sb_3)) :                   # loop through the items in the beat string
            if sb_3[b_3].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_3[b_3])                   # get ascii number of the character
                if sb_3[b_3].isdigit() :                # check if character is numeric
                    amp_3 = (asky-47)                   # assign amplitude
                elif sb_3[b_3].isupper() :              # check if character is uppercase
                    amp_3 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_3 = (asky-60)                   # assign amplitude
            elif sb_3[b_3] == &apos;-&apos; : amp_3 = 0           # character for amp = 0                         
            elif sb_3[b_3] == &apos;&gt;&apos; : amp_3 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_3 = blueDuration + 1           # set notetime_3 &gt; blueduration
                scoreText_3 = &apos;&apos;                        # clear scoreText_3
            if notetime_3 &gt;= blueDuration : break       # break out of the loop
	    if amp_3 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_3 = durlist_3[c_3]			# get duration from durlist
		amp_3 = amp_3-62			# move amp value to correct dbfs range (max=1)
		note_3 = notelist_3[c_3]		# get note from notelist
	        sp_3 = splist_3[c_3]			# get subpatch from splist
		pana_3 = panalist_3[c_3]		# get pana from panalist
		panb_3 = panblist_3[c_3]		# get panb from panblist
		nvat_3 = nvatlist_3[c_3]		# get nvat from nvatlist
		nvac_3 = nvaclist_3[c_3]		# get nvac from nvatlist
		nvpa_3 = nvpalist_3[c_3]		# get nvpa from nvpalist
		nvta_3 = nvtalist_3[c_3]		# get nvta from nvtalist
		nvxa_3 = nvxalist_3[c_3]		# get nvxa from nvxalist
		nvpb_3 = nvpblist_3[c_3]		# get nvpb from nvpblist
		nvxb_3 = nvxblist_3[c_3]		# get nvxb from nvxblist
		nvpc_3 = nvpclist_3[c_3]		# get nvpc from nvpclist
		nvtc_3 = nvtclist_3[c_3]		# get nvtc from nvtclist
		nvxc_3 = nvxclist_3[c_3]		# get nvxc from nvxclist
		mat_3 = matlist_3[c_3]			# get mat from matlist
		mac_3 = maclist_3[c_3]			# get mac from maclist
		mpa_3 = mpalist_3[c_3]			# get mpa from mpalist
		mta_3 = mtalist_3[c_3]			# get mta from mtalist
		mxa_3 = mxalist_3[c_3]			# get mxa from mxalist
		mpb_3 = mpblist_3[c_3]			# get mpb from mpblist
		mxb_3 = mxblist_3[c_3]			# get mxb from mxblist
		mpc_3 = mpclist_3[c_3]			# get mpc from mpclist
		mtc_3 = mtclist_3[c_3]			# get mtc from mtclist
		mxc_3 = mxclist_3[c_3]			# get mxc from mxclist
		bnda_3 = bndalist_3[c_3]		# get bnda from bndalist
		bndb_3 = bndblist_3[c_3]		# get bndb from bndblist
		bndc_3 = bndclist_3[c_3]		# get bndc from bndclist
		bndt_3 = bndtlist_3[c_3]		# get bndt from bndtlist		
		bndu_3 = bndulist_3[c_3]		# get bndu from bndulist		
		bndv_3 = bndvlist_3[c_3]		# get bndv from bndvlist		
                c_3 = c_3 + 1
                scoreText_3 += &quot;i2 &quot;+str(notetime_3-nvat_3)+&quot; &quot;+str(dur_3)+&quot; &quot;+str(amp_3)+&quot; &quot;+str(note_3)+&quot; &quot;+str(sp_3)+&quot; &quot;+str(pana_3)+&quot; &quot;+str(panb_3)+&quot; &quot;+str(nvat_3)+&quot; &quot;+str(nvac_3)+&quot; &quot;+str(nvpa_3)+&quot; &quot;+str(nvta_3)+&quot; &quot;+str(nvxa_3)+&quot; &quot;+str(nvpb_3)+&quot; &quot;+str(nvxb_3)+&quot; &quot;+str(nvpc_3)+&quot; &quot;+str(nvtc_3)+&quot; &quot;+str(nvxc_3)+&quot; &quot;+str(mat_3)+&quot; &quot;+str(mac_3)+&quot; &quot;+str(mpa_3)+&quot; &quot;+str(mta_3)+&quot; &quot;+str(mxa_3)+&quot; &quot;+str(mpb_3)+&quot; &quot;+str(mxb_3)+&quot; &quot;+str(mpc_3)+&quot; &quot;+str(mtc_3)+&quot; &quot;+str(mxc_3)+&quot; &quot;+str(bnda_3)+&quot; &quot;+str(bndb_3)+&quot; &quot;+str(bndc_3)+&quot; &quot;+str(bndt_3)+&quot; &quot;+str(bndu_3)+&quot; &quot;+str(bndv_3)+&quot; \n&quot;
            notetime_3 = notetime_3 + subeat_3                      # increment notetime by subeat time value
    i_3 = i_3 + 1
    c_3 = 0
score = scoreText_3
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>91.0</startTime>
          <name>Ringer_7a</name>
          <backgroundColor>-6710785</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_3 - 3h6TET
scoreText_3 = &quot;&quot;                              	# scoreText_3 is cleared
bart_3 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_3 = [&apos;fadaZ&apos;,&apos;eadaZ&apos;,&apos;eadbd&apos;]		# rhythm
bpb_3 = len(rhythmr0_3)                         # beats per bar
beat_3 = bart_3/bpb_3                           # time of beat in seconds
notetime_3 = 0                                  # set intitial note start time
durlist_3 = [.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33]		# note duration list
notelist_3 = [60,63,62,61,60,59,62,61,60,59,58,61,60,59,58]			# note list
splist_3 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]				# subpatch list
panalist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# pana list
panblist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# panb list
nvatlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]		# nvat list
nvaclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]				# nvac list
nvpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]				# nvpa list
nvtalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]		# nvta list
nvxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxa list
nvpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpb list
nvxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxb list
nvpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpc list
nvtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# nvtc list
nvxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]			# nvxc list
matlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]	# mat list
maclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mac list
mpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpa list
mtalist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1]		# mta list
mxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxa list
mpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpb list
mxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxb list
mpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpc list
mtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# mtc list
mxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]	# mxc list
bndalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bnda list
bndblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndb list
bndclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndc list
bndtlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndt list
bndulist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndu list
bndvlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndv list
i_3 = 0						# loop iteration counter
c_3 = 0						# note iteration counter
while i_3 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_3 in range(bpb_3) :                           # loop through the items in the rhythm list
        sb_3 = rhythmr0_3[a_3]                          # sb is current item in the rhythm list
        subeat_3 = beat_3/len(sb_3)                     # subeat is the number of sub-beats in the beat
        for b_3 in range(len(sb_3)) :                   # loop through the items in the beat string
            if sb_3[b_3].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_3[b_3])                   # get ascii number of the character
                if sb_3[b_3].isdigit() :                # check if character is numeric
                    amp_3 = (asky-47)                   # assign amplitude
                elif sb_3[b_3].isupper() :              # check if character is uppercase
                    amp_3 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_3 = (asky-60)                   # assign amplitude
            elif sb_3[b_3] == &apos;-&apos; : amp_3 = 0           # character for amp = 0                         
            elif sb_3[b_3] == &apos;&gt;&apos; : amp_3 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_3 = blueDuration + 1           # set notetime_3 &gt; blueduration
                scoreText_3 = &apos;&apos;                        # clear scoreText_3
            if notetime_3 &gt;= blueDuration : break       # break out of the loop
	    if amp_3 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_3 = durlist_3[c_3]			# get duration from durlist
		amp_3 = amp_3-62			# move amp value to correct dbfs range (max=1)
		note_3 = notelist_3[c_3]		# get note from notelist
	        sp_3 = splist_3[c_3]			# get subpatch from splist
		pana_3 = panalist_3[c_3]		# get pana from panalist
		panb_3 = panblist_3[c_3]		# get panb from panblist
		nvat_3 = nvatlist_3[c_3]		# get nvat from nvatlist
		nvac_3 = nvaclist_3[c_3]		# get nvac from nvatlist
		nvpa_3 = nvpalist_3[c_3]		# get nvpa from nvpalist
		nvta_3 = nvtalist_3[c_3]		# get nvta from nvtalist
		nvxa_3 = nvxalist_3[c_3]		# get nvxa from nvxalist
		nvpb_3 = nvpblist_3[c_3]		# get nvpb from nvpblist
		nvxb_3 = nvxblist_3[c_3]		# get nvxb from nvxblist
		nvpc_3 = nvpclist_3[c_3]		# get nvpc from nvpclist
		nvtc_3 = nvtclist_3[c_3]		# get nvtc from nvtclist
		nvxc_3 = nvxclist_3[c_3]		# get nvxc from nvxclist
		mat_3 = matlist_3[c_3]			# get mat from matlist
		mac_3 = maclist_3[c_3]			# get mac from maclist
		mpa_3 = mpalist_3[c_3]			# get mpa from mpalist
		mta_3 = mtalist_3[c_3]			# get mta from mtalist
		mxa_3 = mxalist_3[c_3]			# get mxa from mxalist
		mpb_3 = mpblist_3[c_3]			# get mpb from mpblist
		mxb_3 = mxblist_3[c_3]			# get mxb from mxblist
		mpc_3 = mpclist_3[c_3]			# get mpc from mpclist
		mtc_3 = mtclist_3[c_3]			# get mtc from mtclist
		mxc_3 = mxclist_3[c_3]			# get mxc from mxclist
		bnda_3 = bndalist_3[c_3]		# get bnda from bndalist
		bndb_3 = bndblist_3[c_3]		# get bndb from bndblist
		bndc_3 = bndclist_3[c_3]		# get bndc from bndclist
		bndt_3 = bndtlist_3[c_3]		# get bndt from bndtlist		
		bndu_3 = bndulist_3[c_3]		# get bndu from bndulist		
		bndv_3 = bndvlist_3[c_3]		# get bndv from bndvlist		
                c_3 = c_3 + 1
                scoreText_3 += &quot;i2 &quot;+str(notetime_3-nvat_3)+&quot; &quot;+str(dur_3)+&quot; &quot;+str(amp_3)+&quot; &quot;+str(note_3)+&quot; &quot;+str(sp_3)+&quot; &quot;+str(pana_3)+&quot; &quot;+str(panb_3)+&quot; &quot;+str(nvat_3)+&quot; &quot;+str(nvac_3)+&quot; &quot;+str(nvpa_3)+&quot; &quot;+str(nvta_3)+&quot; &quot;+str(nvxa_3)+&quot; &quot;+str(nvpb_3)+&quot; &quot;+str(nvxb_3)+&quot; &quot;+str(nvpc_3)+&quot; &quot;+str(nvtc_3)+&quot; &quot;+str(nvxc_3)+&quot; &quot;+str(mat_3)+&quot; &quot;+str(mac_3)+&quot; &quot;+str(mpa_3)+&quot; &quot;+str(mta_3)+&quot; &quot;+str(mxa_3)+&quot; &quot;+str(mpb_3)+&quot; &quot;+str(mxb_3)+&quot; &quot;+str(mpc_3)+&quot; &quot;+str(mtc_3)+&quot; &quot;+str(mxc_3)+&quot; &quot;+str(bnda_3)+&quot; &quot;+str(bndb_3)+&quot; &quot;+str(bndc_3)+&quot; &quot;+str(bndt_3)+&quot; &quot;+str(bndu_3)+&quot; &quot;+str(bndv_3)+&quot; \n&quot;
            notetime_3 = notetime_3 + subeat_3                      # increment notetime by subeat time value
    i_3 = i_3 + 1
    c_3 = 0
score = scoreText_3
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>96.0</startTime>
          <name>Ringer_3b</name>
          <backgroundColor>-6710785</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_3 - 3h13TET
scoreText_3 = &quot;&quot;                              	# scoreText_3 is cleared
bart_3 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_3 = [&apos;fadaZ&apos;,&apos;eadaZ&apos;,&apos;eadbd&apos;]		# rhythm
bpb_3 = len(rhythmr0_3)                         # beats per bar
beat_3 = bart_3/bpb_3                           # time of beat in seconds
notetime_3 = 0                                  # set intitial note start time
durlist_3 = [.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33]		# note duration list
notelist_3 = [75,80,79,76,75,73,79,76,75,73,70,76,75,73,70]			# note list
splist_3 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]				# subpatch list
panalist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# pana list
panblist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# panb list
nvatlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]		# nvat list
nvaclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]				# nvac list
nvpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]				# nvpa list
nvtalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]		# nvta list
nvxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxa list
nvpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpb list
nvxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxb list
nvpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpc list
nvtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# nvtc list
nvxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]			# nvxc list
matlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]	# mat list
maclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mac list
mpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpa list
mtalist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1]		# mta list
mxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxa list
mpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpb list
mxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxb list
mpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpc list
mtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# mtc list
mxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]	# mxc list
bndalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bnda list
bndblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndb list
bndclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndc list
bndtlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndt list
bndulist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndu list
bndvlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndv list
i_3 = 0						# loop iteration counter
c_3 = 0						# note iteration counter
while i_3 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_3 in range(bpb_3) :                           # loop through the items in the rhythm list
        sb_3 = rhythmr0_3[a_3]                          # sb is current item in the rhythm list
        subeat_3 = beat_3/len(sb_3)                     # subeat is the number of sub-beats in the beat
        for b_3 in range(len(sb_3)) :                   # loop through the items in the beat string
            if sb_3[b_3].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_3[b_3])                   # get ascii number of the character
                if sb_3[b_3].isdigit() :                # check if character is numeric
                    amp_3 = (asky-47)                   # assign amplitude
                elif sb_3[b_3].isupper() :              # check if character is uppercase
                    amp_3 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_3 = (asky-60)                   # assign amplitude
            elif sb_3[b_3] == &apos;-&apos; : amp_3 = 0           # character for amp = 0                         
            elif sb_3[b_3] == &apos;&gt;&apos; : amp_3 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_3 = blueDuration + 1           # set notetime_3 &gt; blueduration
                scoreText_3 = &apos;&apos;                        # clear scoreText_3
            if notetime_3 &gt;= blueDuration : break       # break out of the loop
	    if amp_3 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_3 = durlist_3[c_3]			# get duration from durlist
		amp_3 = amp_3-62			# move amp value to correct dbfs range (max=1)
		note_3 = notelist_3[c_3]		# get note from notelist
	        sp_3 = splist_3[c_3]			# get subpatch from splist
		pana_3 = panalist_3[c_3]		# get pana from panalist
		panb_3 = panblist_3[c_3]		# get panb from panblist
		nvat_3 = nvatlist_3[c_3]		# get nvat from nvatlist
		nvac_3 = nvaclist_3[c_3]		# get nvac from nvatlist
		nvpa_3 = nvpalist_3[c_3]		# get nvpa from nvpalist
		nvta_3 = nvtalist_3[c_3]		# get nvta from nvtalist
		nvxa_3 = nvxalist_3[c_3]		# get nvxa from nvxalist
		nvpb_3 = nvpblist_3[c_3]		# get nvpb from nvpblist
		nvxb_3 = nvxblist_3[c_3]		# get nvxb from nvxblist
		nvpc_3 = nvpclist_3[c_3]		# get nvpc from nvpclist
		nvtc_3 = nvtclist_3[c_3]		# get nvtc from nvtclist
		nvxc_3 = nvxclist_3[c_3]		# get nvxc from nvxclist
		mat_3 = matlist_3[c_3]			# get mat from matlist
		mac_3 = maclist_3[c_3]			# get mac from maclist
		mpa_3 = mpalist_3[c_3]			# get mpa from mpalist
		mta_3 = mtalist_3[c_3]			# get mta from mtalist
		mxa_3 = mxalist_3[c_3]			# get mxa from mxalist
		mpb_3 = mpblist_3[c_3]			# get mpb from mpblist
		mxb_3 = mxblist_3[c_3]			# get mxb from mxblist
		mpc_3 = mpclist_3[c_3]			# get mpc from mpclist
		mtc_3 = mtclist_3[c_3]			# get mtc from mtclist
		mxc_3 = mxclist_3[c_3]			# get mxc from mxclist
		bnda_3 = bndalist_3[c_3]		# get bnda from bndalist
		bndb_3 = bndblist_3[c_3]		# get bndb from bndblist
		bndc_3 = bndclist_3[c_3]		# get bndc from bndclist
		bndt_3 = bndtlist_3[c_3]		# get bndt from bndtlist		
		bndu_3 = bndulist_3[c_3]		# get bndu from bndulist		
		bndv_3 = bndvlist_3[c_3]		# get bndv from bndvlist		
                c_3 = c_3 + 1
                scoreText_3 += &quot;i2 &quot;+str(notetime_3-nvat_3)+&quot; &quot;+str(dur_3)+&quot; &quot;+str(amp_3)+&quot; &quot;+str(note_3)+&quot; &quot;+str(sp_3)+&quot; &quot;+str(pana_3)+&quot; &quot;+str(panb_3)+&quot; &quot;+str(nvat_3)+&quot; &quot;+str(nvac_3)+&quot; &quot;+str(nvpa_3)+&quot; &quot;+str(nvta_3)+&quot; &quot;+str(nvxa_3)+&quot; &quot;+str(nvpb_3)+&quot; &quot;+str(nvxb_3)+&quot; &quot;+str(nvpc_3)+&quot; &quot;+str(nvtc_3)+&quot; &quot;+str(nvxc_3)+&quot; &quot;+str(mat_3)+&quot; &quot;+str(mac_3)+&quot; &quot;+str(mpa_3)+&quot; &quot;+str(mta_3)+&quot; &quot;+str(mxa_3)+&quot; &quot;+str(mpb_3)+&quot; &quot;+str(mxb_3)+&quot; &quot;+str(mpc_3)+&quot; &quot;+str(mtc_3)+&quot; &quot;+str(mxc_3)+&quot; &quot;+str(bnda_3)+&quot; &quot;+str(bndb_3)+&quot; &quot;+str(bndc_3)+&quot; &quot;+str(bndt_3)+&quot; &quot;+str(bndu_3)+&quot; &quot;+str(bndv_3)+&quot; \n&quot;
            notetime_3 = notetime_3 + subeat_3                      # increment notetime by subeat time value
    i_3 = i_3 + 1
    c_3 = 0
score = scoreText_3
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>101.0</startTime>
          <name>Ringer_7c</name>
          <backgroundColor>-6710785</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_3 - 3h13TET
scoreText_3 = &quot;&quot;                              	# scoreText_3 is cleared
bart_3 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_3 = [&apos;fadaZ&apos;,&apos;eadaZ&apos;,&apos;eadbd&apos;]		# rhythm
bpb_3 = len(rhythmr0_3)                         # beats per bar
beat_3 = bart_3/bpb_3                           # time of beat in seconds
notetime_3 = 0                                  # set intitial note start time
durlist_3 = [.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33]		# note duration list
notelist_3 = [60,63,62,61,60,59,62,61,60,59,58,61,60,61,62]			# note list
splist_3 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]				# subpatch list
panalist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# pana list
panblist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# panb list
nvatlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]		# nvat list
nvaclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]				# nvac list
nvpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]				# nvpa list
nvtalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]		# nvta list
nvxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxa list
nvpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpb list
nvxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxb list
nvpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpc list
nvtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# nvtc list
nvxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]			# nvxc list
matlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]	# mat list
maclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mac list
mpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpa list
mtalist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1]		# mta list
mxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxa list
mpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpb list
mxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxb list
mpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpc list
mtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# mtc list
mxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]	# mxc list
bndalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bnda list
bndblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndb list
bndclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndc list
bndtlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndt list
bndulist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndu list
bndvlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndv list
i_3 = 0						# loop iteration counter
c_3 = 0						# note iteration counter
while i_3 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_3 in range(bpb_3) :                           # loop through the items in the rhythm list
        sb_3 = rhythmr0_3[a_3]                          # sb is current item in the rhythm list
        subeat_3 = beat_3/len(sb_3)                     # subeat is the number of sub-beats in the beat
        for b_3 in range(len(sb_3)) :                   # loop through the items in the beat string
            if sb_3[b_3].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_3[b_3])                   # get ascii number of the character
                if sb_3[b_3].isdigit() :                # check if character is numeric
                    amp_3 = (asky-47)                   # assign amplitude
                elif sb_3[b_3].isupper() :              # check if character is uppercase
                    amp_3 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_3 = (asky-60)                   # assign amplitude
            elif sb_3[b_3] == &apos;-&apos; : amp_3 = 0           # character for amp = 0                         
            elif sb_3[b_3] == &apos;&gt;&apos; : amp_3 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_3 = blueDuration + 1           # set notetime_3 &gt; blueduration
                scoreText_3 = &apos;&apos;                        # clear scoreText_3
            if notetime_3 &gt;= blueDuration : break       # break out of the loop
	    if amp_3 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_3 = durlist_3[c_3]			# get duration from durlist
		amp_3 = amp_3-62			# move amp value to correct dbfs range (max=1)
		note_3 = notelist_3[c_3]		# get note from notelist
	        sp_3 = splist_3[c_3]			# get subpatch from splist
		pana_3 = panalist_3[c_3]		# get pana from panalist
		panb_3 = panblist_3[c_3]		# get panb from panblist
		nvat_3 = nvatlist_3[c_3]		# get nvat from nvatlist
		nvac_3 = nvaclist_3[c_3]		# get nvac from nvatlist
		nvpa_3 = nvpalist_3[c_3]		# get nvpa from nvpalist
		nvta_3 = nvtalist_3[c_3]		# get nvta from nvtalist
		nvxa_3 = nvxalist_3[c_3]		# get nvxa from nvxalist
		nvpb_3 = nvpblist_3[c_3]		# get nvpb from nvpblist
		nvxb_3 = nvxblist_3[c_3]		# get nvxb from nvxblist
		nvpc_3 = nvpclist_3[c_3]		# get nvpc from nvpclist
		nvtc_3 = nvtclist_3[c_3]		# get nvtc from nvtclist
		nvxc_3 = nvxclist_3[c_3]		# get nvxc from nvxclist
		mat_3 = matlist_3[c_3]			# get mat from matlist
		mac_3 = maclist_3[c_3]			# get mac from maclist
		mpa_3 = mpalist_3[c_3]			# get mpa from mpalist
		mta_3 = mtalist_3[c_3]			# get mta from mtalist
		mxa_3 = mxalist_3[c_3]			# get mxa from mxalist
		mpb_3 = mpblist_3[c_3]			# get mpb from mpblist
		mxb_3 = mxblist_3[c_3]			# get mxb from mxblist
		mpc_3 = mpclist_3[c_3]			# get mpc from mpclist
		mtc_3 = mtclist_3[c_3]			# get mtc from mtclist
		mxc_3 = mxclist_3[c_3]			# get mxc from mxclist
		bnda_3 = bndalist_3[c_3]		# get bnda from bndalist
		bndb_3 = bndblist_3[c_3]		# get bndb from bndblist
		bndc_3 = bndclist_3[c_3]		# get bndc from bndclist
		bndt_3 = bndtlist_3[c_3]		# get bndt from bndtlist		
		bndu_3 = bndulist_3[c_3]		# get bndu from bndulist		
		bndv_3 = bndvlist_3[c_3]		# get bndv from bndvlist		
                c_3 = c_3 + 1
                scoreText_3 += &quot;i2 &quot;+str(notetime_3-nvat_3)+&quot; &quot;+str(dur_3)+&quot; &quot;+str(amp_3)+&quot; &quot;+str(note_3)+&quot; &quot;+str(sp_3)+&quot; &quot;+str(pana_3)+&quot; &quot;+str(panb_3)+&quot; &quot;+str(nvat_3)+&quot; &quot;+str(nvac_3)+&quot; &quot;+str(nvpa_3)+&quot; &quot;+str(nvta_3)+&quot; &quot;+str(nvxa_3)+&quot; &quot;+str(nvpb_3)+&quot; &quot;+str(nvxb_3)+&quot; &quot;+str(nvpc_3)+&quot; &quot;+str(nvtc_3)+&quot; &quot;+str(nvxc_3)+&quot; &quot;+str(mat_3)+&quot; &quot;+str(mac_3)+&quot; &quot;+str(mpa_3)+&quot; &quot;+str(mta_3)+&quot; &quot;+str(mxa_3)+&quot; &quot;+str(mpb_3)+&quot; &quot;+str(mxb_3)+&quot; &quot;+str(mpc_3)+&quot; &quot;+str(mtc_3)+&quot; &quot;+str(mxc_3)+&quot; &quot;+str(bnda_3)+&quot; &quot;+str(bndb_3)+&quot; &quot;+str(bndc_3)+&quot; &quot;+str(bndt_3)+&quot; &quot;+str(bndu_3)+&quot; &quot;+str(bndv_3)+&quot; \n&quot;
            notetime_3 = notetime_3 + subeat_3                      # increment notetime by subeat time value
    i_3 = i_3 + 1
    c_3 = 0
score = scoreText_3
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>106.0</startTime>
          <name>Ringer_3d</name>
          <backgroundColor>-6710785</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_3 - 3h13TET
scoreText_3 = &quot;&quot;                              	# scoreText_3 is cleared
bart_3 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_3 = [&apos;fadaZ&apos;,&apos;eadaZ&apos;,&apos;eadbd&apos;]		# rhythm
bpb_3 = len(rhythmr0_3)                         # beats per bar
beat_3 = bart_3/bpb_3                           # time of beat in seconds
notetime_3 = 0                                  # set intitial note start time
durlist_3 = [.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33]		# note duration list
notelist_3 = [75,79,76,79,76,73,76,75,76,79,70,75,73,75,73]			# note list
splist_3 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]				# subpatch list
panalist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# pana list
panblist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# panb list
nvatlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]		# nvat list
nvaclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]				# nvac list
nvpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]				# nvpa list
nvtalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]		# nvta list
nvxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxa list
nvpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpb list
nvxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxb list
nvpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpc list
nvtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# nvtc list
nvxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]			# nvxc list
matlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]	# mat list
maclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mac list
mpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpa list
mtalist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1]		# mta list
mxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxa list
mpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpb list
mxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxb list
mpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpc list
mtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# mtc list
mxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]	# mxc list
bndalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bnda list
bndblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndb list
bndclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndc list
bndtlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndt list
bndulist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndu list
bndvlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndv list
i_3 = 0						# loop iteration counter
c_3 = 0						# note iteration counter
while i_3 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_3 in range(bpb_3) :                           # loop through the items in the rhythm list
        sb_3 = rhythmr0_3[a_3]                          # sb is current item in the rhythm list
        subeat_3 = beat_3/len(sb_3)                     # subeat is the number of sub-beats in the beat
        for b_3 in range(len(sb_3)) :                   # loop through the items in the beat string
            if sb_3[b_3].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_3[b_3])                   # get ascii number of the character
                if sb_3[b_3].isdigit() :                # check if character is numeric
                    amp_3 = (asky-47)                   # assign amplitude
                elif sb_3[b_3].isupper() :              # check if character is uppercase
                    amp_3 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_3 = (asky-60)                   # assign amplitude
            elif sb_3[b_3] == &apos;-&apos; : amp_3 = 0           # character for amp = 0                         
            elif sb_3[b_3] == &apos;&gt;&apos; : amp_3 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_3 = blueDuration + 1           # set notetime_3 &gt; blueduration
                scoreText_3 = &apos;&apos;                        # clear scoreText_3
            if notetime_3 &gt;= blueDuration : break       # break out of the loop
	    if amp_3 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_3 = durlist_3[c_3]			# get duration from durlist
		amp_3 = amp_3-62			# move amp value to correct dbfs range (max=1)
		note_3 = notelist_3[c_3]		# get note from notelist
	        sp_3 = splist_3[c_3]			# get subpatch from splist
		pana_3 = panalist_3[c_3]		# get pana from panalist
		panb_3 = panblist_3[c_3]		# get panb from panblist
		nvat_3 = nvatlist_3[c_3]		# get nvat from nvatlist
		nvac_3 = nvaclist_3[c_3]		# get nvac from nvatlist
		nvpa_3 = nvpalist_3[c_3]		# get nvpa from nvpalist
		nvta_3 = nvtalist_3[c_3]		# get nvta from nvtalist
		nvxa_3 = nvxalist_3[c_3]		# get nvxa from nvxalist
		nvpb_3 = nvpblist_3[c_3]		# get nvpb from nvpblist
		nvxb_3 = nvxblist_3[c_3]		# get nvxb from nvxblist
		nvpc_3 = nvpclist_3[c_3]		# get nvpc from nvpclist
		nvtc_3 = nvtclist_3[c_3]		# get nvtc from nvtclist
		nvxc_3 = nvxclist_3[c_3]		# get nvxc from nvxclist
		mat_3 = matlist_3[c_3]			# get mat from matlist
		mac_3 = maclist_3[c_3]			# get mac from maclist
		mpa_3 = mpalist_3[c_3]			# get mpa from mpalist
		mta_3 = mtalist_3[c_3]			# get mta from mtalist
		mxa_3 = mxalist_3[c_3]			# get mxa from mxalist
		mpb_3 = mpblist_3[c_3]			# get mpb from mpblist
		mxb_3 = mxblist_3[c_3]			# get mxb from mxblist
		mpc_3 = mpclist_3[c_3]			# get mpc from mpclist
		mtc_3 = mtclist_3[c_3]			# get mtc from mtclist
		mxc_3 = mxclist_3[c_3]			# get mxc from mxclist
		bnda_3 = bndalist_3[c_3]		# get bnda from bndalist
		bndb_3 = bndblist_3[c_3]		# get bndb from bndblist
		bndc_3 = bndclist_3[c_3]		# get bndc from bndclist
		bndt_3 = bndtlist_3[c_3]		# get bndt from bndtlist		
		bndu_3 = bndulist_3[c_3]		# get bndu from bndulist		
		bndv_3 = bndvlist_3[c_3]		# get bndv from bndvlist		
                c_3 = c_3 + 1
                scoreText_3 += &quot;i2 &quot;+str(notetime_3-nvat_3)+&quot; &quot;+str(dur_3)+&quot; &quot;+str(amp_3)+&quot; &quot;+str(note_3)+&quot; &quot;+str(sp_3)+&quot; &quot;+str(pana_3)+&quot; &quot;+str(panb_3)+&quot; &quot;+str(nvat_3)+&quot; &quot;+str(nvac_3)+&quot; &quot;+str(nvpa_3)+&quot; &quot;+str(nvta_3)+&quot; &quot;+str(nvxa_3)+&quot; &quot;+str(nvpb_3)+&quot; &quot;+str(nvxb_3)+&quot; &quot;+str(nvpc_3)+&quot; &quot;+str(nvtc_3)+&quot; &quot;+str(nvxc_3)+&quot; &quot;+str(mat_3)+&quot; &quot;+str(mac_3)+&quot; &quot;+str(mpa_3)+&quot; &quot;+str(mta_3)+&quot; &quot;+str(mxa_3)+&quot; &quot;+str(mpb_3)+&quot; &quot;+str(mxb_3)+&quot; &quot;+str(mpc_3)+&quot; &quot;+str(mtc_3)+&quot; &quot;+str(mxc_3)+&quot; &quot;+str(bnda_3)+&quot; &quot;+str(bndb_3)+&quot; &quot;+str(bndc_3)+&quot; &quot;+str(bndt_3)+&quot; &quot;+str(bndu_3)+&quot; &quot;+str(bndv_3)+&quot; \n&quot;
            notetime_3 = notetime_3 + subeat_3                      # increment notetime by subeat time value
    i_3 = i_3 + 1
    c_3 = 0
score = scoreText_3
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>111.0</startTime>
          <name>Ringer_7e</name>
          <backgroundColor>-6710785</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_3 - 3h13TET
scoreText_3 = &quot;&quot;                              	# scoreText_3 is cleared
bart_3 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_3 = [&apos;fadaZ&apos;,&apos;eadaZ&apos;,&apos;eadbd&apos;]		# rhythm
bpb_3 = len(rhythmr0_3)                         # beats per bar
beat_3 = bart_3/bpb_3                           # time of beat in seconds
notetime_3 = 0                                  # set intitial note start time
durlist_3 = [.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.66]		# note duration list
notelist_3 = [56,58,57,59,58,60,59,61,60,62,61,63,61,62,61]			# note list
splist_3 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]				# subpatch list
panalist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# pana list
panblist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# panb list
nvatlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]		# nvat list
nvaclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]				# nvac list
nvpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]				# nvpa list
nvtalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]		# nvta list
nvxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxa list
nvpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpb list
nvxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxb list
nvpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpc list
nvtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# nvtc list
nvxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]			# nvxc list
matlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]	# mat list
maclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mac list
mpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpa list
mtalist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1]		# mta list
mxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxa list
mpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpb list
mxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxb list
mpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpc list
mtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.65]		# mtc list
mxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]	# mxc list
bndalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bnda list
bndblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndb list
bndclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndc list
bndtlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndt list
bndulist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndu list
bndvlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndv list
i_3 = 0						# loop iteration counter
c_3 = 0						# note iteration counter
while i_3 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_3 in range(bpb_3) :                           # loop through the items in the rhythm list
        sb_3 = rhythmr0_3[a_3]                          # sb is current item in the rhythm list
        subeat_3 = beat_3/len(sb_3)                     # subeat is the number of sub-beats in the beat
        for b_3 in range(len(sb_3)) :                   # loop through the items in the beat string
            if sb_3[b_3].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_3[b_3])                   # get ascii number of the character
                if sb_3[b_3].isdigit() :                # check if character is numeric
                    amp_3 = (asky-47)                   # assign amplitude
                elif sb_3[b_3].isupper() :              # check if character is uppercase
                    amp_3 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_3 = (asky-60)                   # assign amplitude
            elif sb_3[b_3] == &apos;-&apos; : amp_3 = 0           # character for amp = 0                         
            elif sb_3[b_3] == &apos;&gt;&apos; : amp_3 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_3 = blueDuration + 1           # set notetime_3 &gt; blueduration
                scoreText_3 = &apos;&apos;                        # clear scoreText_3
            if notetime_3 &gt;= blueDuration : break       # break out of the loop
	    if amp_3 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_3 = durlist_3[c_3]			# get duration from durlist
		amp_3 = amp_3-62			# move amp value to correct dbfs range (max=1)
		note_3 = notelist_3[c_3]		# get note from notelist
	        sp_3 = splist_3[c_3]			# get subpatch from splist
		pana_3 = panalist_3[c_3]		# get pana from panalist
		panb_3 = panblist_3[c_3]		# get panb from panblist
		nvat_3 = nvatlist_3[c_3]		# get nvat from nvatlist
		nvac_3 = nvaclist_3[c_3]		# get nvac from nvatlist
		nvpa_3 = nvpalist_3[c_3]		# get nvpa from nvpalist
		nvta_3 = nvtalist_3[c_3]		# get nvta from nvtalist
		nvxa_3 = nvxalist_3[c_3]		# get nvxa from nvxalist
		nvpb_3 = nvpblist_3[c_3]		# get nvpb from nvpblist
		nvxb_3 = nvxblist_3[c_3]		# get nvxb from nvxblist
		nvpc_3 = nvpclist_3[c_3]		# get nvpc from nvpclist
		nvtc_3 = nvtclist_3[c_3]		# get nvtc from nvtclist
		nvxc_3 = nvxclist_3[c_3]		# get nvxc from nvxclist
		mat_3 = matlist_3[c_3]			# get mat from matlist
		mac_3 = maclist_3[c_3]			# get mac from maclist
		mpa_3 = mpalist_3[c_3]			# get mpa from mpalist
		mta_3 = mtalist_3[c_3]			# get mta from mtalist
		mxa_3 = mxalist_3[c_3]			# get mxa from mxalist
		mpb_3 = mpblist_3[c_3]			# get mpb from mpblist
		mxb_3 = mxblist_3[c_3]			# get mxb from mxblist
		mpc_3 = mpclist_3[c_3]			# get mpc from mpclist
		mtc_3 = mtclist_3[c_3]			# get mtc from mtclist
		mxc_3 = mxclist_3[c_3]			# get mxc from mxclist
		bnda_3 = bndalist_3[c_3]		# get bnda from bndalist
		bndb_3 = bndblist_3[c_3]		# get bndb from bndblist
		bndc_3 = bndclist_3[c_3]		# get bndc from bndclist
		bndt_3 = bndtlist_3[c_3]		# get bndt from bndtlist		
		bndu_3 = bndulist_3[c_3]		# get bndu from bndulist		
		bndv_3 = bndvlist_3[c_3]		# get bndv from bndvlist		
                c_3 = c_3 + 1
                scoreText_3 += &quot;i2 &quot;+str(notetime_3-nvat_3)+&quot; &quot;+str(dur_3)+&quot; &quot;+str(amp_3)+&quot; &quot;+str(note_3)+&quot; &quot;+str(sp_3)+&quot; &quot;+str(pana_3)+&quot; &quot;+str(panb_3)+&quot; &quot;+str(nvat_3)+&quot; &quot;+str(nvac_3)+&quot; &quot;+str(nvpa_3)+&quot; &quot;+str(nvta_3)+&quot; &quot;+str(nvxa_3)+&quot; &quot;+str(nvpb_3)+&quot; &quot;+str(nvxb_3)+&quot; &quot;+str(nvpc_3)+&quot; &quot;+str(nvtc_3)+&quot; &quot;+str(nvxc_3)+&quot; &quot;+str(mat_3)+&quot; &quot;+str(mac_3)+&quot; &quot;+str(mpa_3)+&quot; &quot;+str(mta_3)+&quot; &quot;+str(mxa_3)+&quot; &quot;+str(mpb_3)+&quot; &quot;+str(mxb_3)+&quot; &quot;+str(mpc_3)+&quot; &quot;+str(mtc_3)+&quot; &quot;+str(mxc_3)+&quot; &quot;+str(bnda_3)+&quot; &quot;+str(bndb_3)+&quot; &quot;+str(bndc_3)+&quot; &quot;+str(bndt_3)+&quot; &quot;+str(bndu_3)+&quot; &quot;+str(bndv_3)+&quot; \n&quot;
            notetime_3 = notetime_3 + subeat_3                      # increment notetime by subeat time value
    i_3 = i_3 + 1
    c_3 = 0
score = scoreText_3
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>121.0</startTime>
          <name>Ringer_11a</name>
          <backgroundColor>-6710785</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_3 - 3h6TET
scoreText_3 = &quot;&quot;                              	# scoreText_3 is cleared
bart_3 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_3 = [&apos;fadaZ&apos;,&apos;eadaZ&apos;,&apos;eadbd&apos;]		# rhythm
bpb_3 = len(rhythmr0_3)                         # beats per bar
beat_3 = bart_3/bpb_3                           # time of beat in seconds
notetime_3 = 0                                  # set intitial note start time
durlist_3 = [.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33]		# note duration list
notelist_3 = [58,61,60,59,58,57,60,59,58,57,56,59,58,57,56]			# note list
splist_3 = [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6]				# subpatch list
panalist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# pana list
panblist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# panb list
nvatlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]		# nvat list
nvaclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]				# nvac list
nvpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]				# nvpa list
nvtalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]		# nvta list
nvxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxa list
nvpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpb list
nvxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxb list
nvpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpc list
nvtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# nvtc list
nvxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]			# nvxc list
matlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]	# mat list
maclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mac list
mpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpa list
mtalist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1]		# mta list
mxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxa list
mpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpb list
mxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxb list
mpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpc list
mtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# mtc list
mxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]	# mxc list
bndalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bnda list
bndblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndb list
bndclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndc list
bndtlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndt list
bndulist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndu list
bndvlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndv list
i_3 = 0						# loop iteration counter
c_3 = 0						# note iteration counter
while i_3 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_3 in range(bpb_3) :                           # loop through the items in the rhythm list
        sb_3 = rhythmr0_3[a_3]                          # sb is current item in the rhythm list
        subeat_3 = beat_3/len(sb_3)                     # subeat is the number of sub-beats in the beat
        for b_3 in range(len(sb_3)) :                   # loop through the items in the beat string
            if sb_3[b_3].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_3[b_3])                   # get ascii number of the character
                if sb_3[b_3].isdigit() :                # check if character is numeric
                    amp_3 = (asky-47)                   # assign amplitude
                elif sb_3[b_3].isupper() :              # check if character is uppercase
                    amp_3 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_3 = (asky-60)                   # assign amplitude
            elif sb_3[b_3] == &apos;-&apos; : amp_3 = 0           # character for amp = 0                         
            elif sb_3[b_3] == &apos;&gt;&apos; : amp_3 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_3 = blueDuration + 1           # set notetime_3 &gt; blueduration
                scoreText_3 = &apos;&apos;                        # clear scoreText_3
            if notetime_3 &gt;= blueDuration : break       # break out of the loop
	    if amp_3 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_3 = durlist_3[c_3]			# get duration from durlist
		amp_3 = amp_3-62			# move amp value to correct dbfs range (max=1)
		note_3 = notelist_3[c_3]		# get note from notelist
	        sp_3 = splist_3[c_3]			# get subpatch from splist
		pana_3 = panalist_3[c_3]		# get pana from panalist
		panb_3 = panblist_3[c_3]		# get panb from panblist
		nvat_3 = nvatlist_3[c_3]		# get nvat from nvatlist
		nvac_3 = nvaclist_3[c_3]		# get nvac from nvatlist
		nvpa_3 = nvpalist_3[c_3]		# get nvpa from nvpalist
		nvta_3 = nvtalist_3[c_3]		# get nvta from nvtalist
		nvxa_3 = nvxalist_3[c_3]		# get nvxa from nvxalist
		nvpb_3 = nvpblist_3[c_3]		# get nvpb from nvpblist
		nvxb_3 = nvxblist_3[c_3]		# get nvxb from nvxblist
		nvpc_3 = nvpclist_3[c_3]		# get nvpc from nvpclist
		nvtc_3 = nvtclist_3[c_3]		# get nvtc from nvtclist
		nvxc_3 = nvxclist_3[c_3]		# get nvxc from nvxclist
		mat_3 = matlist_3[c_3]			# get mat from matlist
		mac_3 = maclist_3[c_3]			# get mac from maclist
		mpa_3 = mpalist_3[c_3]			# get mpa from mpalist
		mta_3 = mtalist_3[c_3]			# get mta from mtalist
		mxa_3 = mxalist_3[c_3]			# get mxa from mxalist
		mpb_3 = mpblist_3[c_3]			# get mpb from mpblist
		mxb_3 = mxblist_3[c_3]			# get mxb from mxblist
		mpc_3 = mpclist_3[c_3]			# get mpc from mpclist
		mtc_3 = mtclist_3[c_3]			# get mtc from mtclist
		mxc_3 = mxclist_3[c_3]			# get mxc from mxclist
		bnda_3 = bndalist_3[c_3]		# get bnda from bndalist
		bndb_3 = bndblist_3[c_3]		# get bndb from bndblist
		bndc_3 = bndclist_3[c_3]		# get bndc from bndclist
		bndt_3 = bndtlist_3[c_3]		# get bndt from bndtlist		
		bndu_3 = bndulist_3[c_3]		# get bndu from bndulist		
		bndv_3 = bndvlist_3[c_3]		# get bndv from bndvlist		
                c_3 = c_3 + 1
                scoreText_3 += &quot;i2 &quot;+str(notetime_3-nvat_3)+&quot; &quot;+str(dur_3)+&quot; &quot;+str(amp_3)+&quot; &quot;+str(note_3)+&quot; &quot;+str(sp_3)+&quot; &quot;+str(pana_3)+&quot; &quot;+str(panb_3)+&quot; &quot;+str(nvat_3)+&quot; &quot;+str(nvac_3)+&quot; &quot;+str(nvpa_3)+&quot; &quot;+str(nvta_3)+&quot; &quot;+str(nvxa_3)+&quot; &quot;+str(nvpb_3)+&quot; &quot;+str(nvxb_3)+&quot; &quot;+str(nvpc_3)+&quot; &quot;+str(nvtc_3)+&quot; &quot;+str(nvxc_3)+&quot; &quot;+str(mat_3)+&quot; &quot;+str(mac_3)+&quot; &quot;+str(mpa_3)+&quot; &quot;+str(mta_3)+&quot; &quot;+str(mxa_3)+&quot; &quot;+str(mpb_3)+&quot; &quot;+str(mxb_3)+&quot; &quot;+str(mpc_3)+&quot; &quot;+str(mtc_3)+&quot; &quot;+str(mxc_3)+&quot; &quot;+str(bnda_3)+&quot; &quot;+str(bndb_3)+&quot; &quot;+str(bndc_3)+&quot; &quot;+str(bndt_3)+&quot; &quot;+str(bndu_3)+&quot; &quot;+str(bndv_3)+&quot; \n&quot;
            notetime_3 = notetime_3 + subeat_3                      # increment notetime by subeat time value
    i_3 = i_3 + 1
    c_3 = 0
score = scoreText_3
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>126.0</startTime>
          <name>Ringer_11b</name>
          <backgroundColor>-6710785</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_3 - 3h13TET
scoreText_3 = &quot;&quot;                              	# scoreText_3 is cleared
bart_3 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_3 = [&apos;fadaZ&apos;,&apos;eadaZ&apos;,&apos;eadbd&apos;]		# rhythm
bpb_3 = len(rhythmr0_3)                         # beats per bar
beat_3 = bart_3/bpb_3                           # time of beat in seconds
notetime_3 = 0                                  # set intitial note start time
durlist_3 = [.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33]		# note duration list
notelist_3 = [57,60,59,58,57,56,59,58,57,56,55,58,57,56,55]			# note list
splist_3 = [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6]				# subpatch list
panalist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# pana list
panblist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]		# panb list
nvatlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]		# nvat list
nvaclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]				# nvac list
nvpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]				# nvpa list
nvtalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]		# nvta list
nvxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxa list
nvpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpb list
nvxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxb list
nvpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpc list
nvtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# nvtc list
nvxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]			# nvxc list
matlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]	# mat list
maclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mac list
mpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpa list
mtalist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1]		# mta list
mxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxa list
mpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpb list
mxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxb list
mpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpc list
mtclist_3 = [.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32,.32]		# mtc list
mxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]	# mxc list
bndalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bnda list
bndblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndb list
bndclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndc list
bndtlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndt list
bndulist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndu list
bndvlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndv list
i_3 = 0						# loop iteration counter
c_3 = 0						# note iteration counter
while i_3 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_3 in range(bpb_3) :                           # loop through the items in the rhythm list
        sb_3 = rhythmr0_3[a_3]                          # sb is current item in the rhythm list
        subeat_3 = beat_3/len(sb_3)                     # subeat is the number of sub-beats in the beat
        for b_3 in range(len(sb_3)) :                   # loop through the items in the beat string
            if sb_3[b_3].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_3[b_3])                   # get ascii number of the character
                if sb_3[b_3].isdigit() :                # check if character is numeric
                    amp_3 = (asky-47)                   # assign amplitude
                elif sb_3[b_3].isupper() :              # check if character is uppercase
                    amp_3 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_3 = (asky-60)                   # assign amplitude
            elif sb_3[b_3] == &apos;-&apos; : amp_3 = 0           # character for amp = 0                         
            elif sb_3[b_3] == &apos;&gt;&apos; : amp_3 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_3 = blueDuration + 1           # set notetime_3 &gt; blueduration
                scoreText_3 = &apos;&apos;                        # clear scoreText_3
            if notetime_3 &gt;= blueDuration : break       # break out of the loop
	    if amp_3 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_3 = durlist_3[c_3]			# get duration from durlist
		amp_3 = amp_3-62			# move amp value to correct dbfs range (max=1)
		note_3 = notelist_3[c_3]		# get note from notelist
	        sp_3 = splist_3[c_3]			# get subpatch from splist
		pana_3 = panalist_3[c_3]		# get pana from panalist
		panb_3 = panblist_3[c_3]		# get panb from panblist
		nvat_3 = nvatlist_3[c_3]		# get nvat from nvatlist
		nvac_3 = nvaclist_3[c_3]		# get nvac from nvatlist
		nvpa_3 = nvpalist_3[c_3]		# get nvpa from nvpalist
		nvta_3 = nvtalist_3[c_3]		# get nvta from nvtalist
		nvxa_3 = nvxalist_3[c_3]		# get nvxa from nvxalist
		nvpb_3 = nvpblist_3[c_3]		# get nvpb from nvpblist
		nvxb_3 = nvxblist_3[c_3]		# get nvxb from nvxblist
		nvpc_3 = nvpclist_3[c_3]		# get nvpc from nvpclist
		nvtc_3 = nvtclist_3[c_3]		# get nvtc from nvtclist
		nvxc_3 = nvxclist_3[c_3]		# get nvxc from nvxclist
		mat_3 = matlist_3[c_3]			# get mat from matlist
		mac_3 = maclist_3[c_3]			# get mac from maclist
		mpa_3 = mpalist_3[c_3]			# get mpa from mpalist
		mta_3 = mtalist_3[c_3]			# get mta from mtalist
		mxa_3 = mxalist_3[c_3]			# get mxa from mxalist
		mpb_3 = mpblist_3[c_3]			# get mpb from mpblist
		mxb_3 = mxblist_3[c_3]			# get mxb from mxblist
		mpc_3 = mpclist_3[c_3]			# get mpc from mpclist
		mtc_3 = mtclist_3[c_3]			# get mtc from mtclist
		mxc_3 = mxclist_3[c_3]			# get mxc from mxclist
		bnda_3 = bndalist_3[c_3]		# get bnda from bndalist
		bndb_3 = bndblist_3[c_3]		# get bndb from bndblist
		bndc_3 = bndclist_3[c_3]		# get bndc from bndclist
		bndt_3 = bndtlist_3[c_3]		# get bndt from bndtlist		
		bndu_3 = bndulist_3[c_3]		# get bndu from bndulist		
		bndv_3 = bndvlist_3[c_3]		# get bndv from bndvlist		
                c_3 = c_3 + 1
                scoreText_3 += &quot;i2 &quot;+str(notetime_3-nvat_3)+&quot; &quot;+str(dur_3)+&quot; &quot;+str(amp_3)+&quot; &quot;+str(note_3)+&quot; &quot;+str(sp_3)+&quot; &quot;+str(pana_3)+&quot; &quot;+str(panb_3)+&quot; &quot;+str(nvat_3)+&quot; &quot;+str(nvac_3)+&quot; &quot;+str(nvpa_3)+&quot; &quot;+str(nvta_3)+&quot; &quot;+str(nvxa_3)+&quot; &quot;+str(nvpb_3)+&quot; &quot;+str(nvxb_3)+&quot; &quot;+str(nvpc_3)+&quot; &quot;+str(nvtc_3)+&quot; &quot;+str(nvxc_3)+&quot; &quot;+str(mat_3)+&quot; &quot;+str(mac_3)+&quot; &quot;+str(mpa_3)+&quot; &quot;+str(mta_3)+&quot; &quot;+str(mxa_3)+&quot; &quot;+str(mpb_3)+&quot; &quot;+str(mxb_3)+&quot; &quot;+str(mpc_3)+&quot; &quot;+str(mtc_3)+&quot; &quot;+str(mxc_3)+&quot; &quot;+str(bnda_3)+&quot; &quot;+str(bndb_3)+&quot; &quot;+str(bndc_3)+&quot; &quot;+str(bndt_3)+&quot; &quot;+str(bndu_3)+&quot; &quot;+str(bndv_3)+&quot; \n&quot;
            notetime_3 = notetime_3 + subeat_3                      # increment notetime by subeat time value
    i_3 = i_3 + 1
    c_3 = 0
score = scoreText_3
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>131.0</startTime>
          <name>Ringer_11c</name>
          <backgroundColor>-6710785</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_3 - 3h6TET
scoreText_3 = &quot;&quot;                              	# scoreText_3 is cleared
bart_3 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_3 = [&apos;baZYZYXWVWVUTSR&apos;,&apos;e&apos;,&apos;U&apos;]	# rhythm
bpb_3 = len(rhythmr0_3)                         # beats per bar
beat_3 = bart_3/bpb_3                           # time of beat in seconds
notetime_3 = 0                                  # set intitial note start time
durlist_3 = [.11,.11,.11,.11,.11,.11,.11,.11,.11,.11,.11,.11,.11,.11,.11,3.33,3.33]		# note duration list
notelist_3 = [55,61,60,59,58,57,60,59,58,57,56,59,58,57,56,55,57]			# note list
splist_3 = [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6]				# subpatch list
panalist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,.1,-.1]		# pana list
panblist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,.2,-.2]		# panb list
nvatlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]		# nvat list
nvaclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]				# nvac list
nvpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]				# nvpa list
nvtalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]		# nvta list
nvxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxa list
nvpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpb list
nvxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxb list
nvpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpc list
nvtclist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,3.32,3.32]		# nvtc list
nvxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,1.5,1.5]			# nvxc list
matlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]	# mat list
maclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mac list
mpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpa list
mtalist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1]		# mta list
mxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxa list
mpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpb list
mxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxb list
mpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpc list
mtclist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,3.32,3.32]		# mtc list
mxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,1.5,1.5]	# mxc list
bndalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bnda list
bndblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndb list
bndclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndc list
bndtlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndt list
bndulist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndu list
bndvlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndv list
i_3 = 0						# loop iteration counter
c_3 = 0						# note iteration counter
while i_3 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_3 in range(bpb_3) :                           # loop through the items in the rhythm list
        sb_3 = rhythmr0_3[a_3]                          # sb is current item in the rhythm list
        subeat_3 = beat_3/len(sb_3)                     # subeat is the number of sub-beats in the beat
        for b_3 in range(len(sb_3)) :                   # loop through the items in the beat string
            if sb_3[b_3].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_3[b_3])                   # get ascii number of the character
                if sb_3[b_3].isdigit() :                # check if character is numeric
                    amp_3 = (asky-47)                   # assign amplitude
                elif sb_3[b_3].isupper() :              # check if character is uppercase
                    amp_3 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_3 = (asky-60)                   # assign amplitude
            elif sb_3[b_3] == &apos;-&apos; : amp_3 = 0           # character for amp = 0                         
            elif sb_3[b_3] == &apos;&gt;&apos; : amp_3 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_3 = blueDuration + 1           # set notetime_3 &gt; blueduration
                scoreText_3 = &apos;&apos;                        # clear scoreText_3
            if notetime_3 &gt;= blueDuration : break       # break out of the loop
	    if amp_3 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_3 = durlist_3[c_3]			# get duration from durlist
		amp_3 = amp_3-62			# move amp value to correct dbfs range (max=1)
		note_3 = notelist_3[c_3]		# get note from notelist
	        sp_3 = splist_3[c_3]			# get subpatch from splist
		pana_3 = panalist_3[c_3]		# get pana from panalist
		panb_3 = panblist_3[c_3]		# get panb from panblist
		nvat_3 = nvatlist_3[c_3]		# get nvat from nvatlist
		nvac_3 = nvaclist_3[c_3]		# get nvac from nvatlist
		nvpa_3 = nvpalist_3[c_3]		# get nvpa from nvpalist
		nvta_3 = nvtalist_3[c_3]		# get nvta from nvtalist
		nvxa_3 = nvxalist_3[c_3]		# get nvxa from nvxalist
		nvpb_3 = nvpblist_3[c_3]		# get nvpb from nvpblist
		nvxb_3 = nvxblist_3[c_3]		# get nvxb from nvxblist
		nvpc_3 = nvpclist_3[c_3]		# get nvpc from nvpclist
		nvtc_3 = nvtclist_3[c_3]		# get nvtc from nvtclist
		nvxc_3 = nvxclist_3[c_3]		# get nvxc from nvxclist
		mat_3 = matlist_3[c_3]			# get mat from matlist
		mac_3 = maclist_3[c_3]			# get mac from maclist
		mpa_3 = mpalist_3[c_3]			# get mpa from mpalist
		mta_3 = mtalist_3[c_3]			# get mta from mtalist
		mxa_3 = mxalist_3[c_3]			# get mxa from mxalist
		mpb_3 = mpblist_3[c_3]			# get mpb from mpblist
		mxb_3 = mxblist_3[c_3]			# get mxb from mxblist
		mpc_3 = mpclist_3[c_3]			# get mpc from mpclist
		mtc_3 = mtclist_3[c_3]			# get mtc from mtclist
		mxc_3 = mxclist_3[c_3]			# get mxc from mxclist
		bnda_3 = bndalist_3[c_3]		# get bnda from bndalist
		bndb_3 = bndblist_3[c_3]		# get bndb from bndblist
		bndc_3 = bndclist_3[c_3]		# get bndc from bndclist
		bndt_3 = bndtlist_3[c_3]		# get bndt from bndtlist		
		bndu_3 = bndulist_3[c_3]		# get bndu from bndulist		
		bndv_3 = bndvlist_3[c_3]		# get bndv from bndvlist		
                c_3 = c_3 + 1
                scoreText_3 += &quot;i2 &quot;+str(notetime_3-nvat_3)+&quot; &quot;+str(dur_3)+&quot; &quot;+str(amp_3)+&quot; &quot;+str(note_3)+&quot; &quot;+str(sp_3)+&quot; &quot;+str(pana_3)+&quot; &quot;+str(panb_3)+&quot; &quot;+str(nvat_3)+&quot; &quot;+str(nvac_3)+&quot; &quot;+str(nvpa_3)+&quot; &quot;+str(nvta_3)+&quot; &quot;+str(nvxa_3)+&quot; &quot;+str(nvpb_3)+&quot; &quot;+str(nvxb_3)+&quot; &quot;+str(nvpc_3)+&quot; &quot;+str(nvtc_3)+&quot; &quot;+str(nvxc_3)+&quot; &quot;+str(mat_3)+&quot; &quot;+str(mac_3)+&quot; &quot;+str(mpa_3)+&quot; &quot;+str(mta_3)+&quot; &quot;+str(mxa_3)+&quot; &quot;+str(mpb_3)+&quot; &quot;+str(mxb_3)+&quot; &quot;+str(mpc_3)+&quot; &quot;+str(mtc_3)+&quot; &quot;+str(mxc_3)+&quot; &quot;+str(bnda_3)+&quot; &quot;+str(bndb_3)+&quot; &quot;+str(bndc_3)+&quot; &quot;+str(bndt_3)+&quot; &quot;+str(bndu_3)+&quot; &quot;+str(bndv_3)+&quot; \n&quot;
            notetime_3 = notetime_3 + subeat_3                      # increment notetime by subeat time value
    i_3 = i_3 + 1
    c_3 = 0
score = scoreText_3
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>136.0</startTime>
          <name>Ringer_11d</name>
          <backgroundColor>-6710785</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_3 - 3h13TET
scoreText_3 = &quot;&quot;                              	# scoreText_3 is cleared
bart_3 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_3 = [&apos;e&apos;,&apos;-&apos;,&apos;baZYZYXWVWVUTSR&apos;]		# rhythm
bpb_3 = len(rhythmr0_3)                         # beats per bar
beat_3 = bart_3/bpb_3                           # time of beat in seconds
notetime_3 = 0                                  # set intitial note start time
durlist_3 = [3.33,.11,.11,.11,.11,.11,.11,.11,.11,.11,.11,.11,.11,.11,.11,.11]		# note duration list
notelist_3 = [54,59,58,57,56,55,58,57,56,55,54,57,56,55,54,53]			# note list
splist_3 = [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6]				# subpatch list
panalist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,-.3]		# pana list
panblist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,-.6]		# panb list
nvatlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]		# nvat list
nvaclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]				# nvac list
nvpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]				# nvpa list
nvtalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]		# nvta list
nvxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxa list
nvpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpb list
nvxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxb list
nvpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpc list
nvtclist_3 = [3.32,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1]		# nvtc list
nvxclist_3 = [1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]			# nvxc list
matlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]	# mat list
maclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mac list
mpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpa list
mtalist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1]		# mta list
mxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxa list
mpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpb list
mxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxb list
mpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpc list
mtclist_3 = [3.32,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1]		# mtc list
mxclist_3 = [1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5]	# mxc list
bndalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bnda list
bndblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndb list
bndclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndc list
bndtlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndt list
bndulist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndu list
bndvlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndv list
i_3 = 0						# loop iteration counter
c_3 = 0						# note iteration counter
while i_3 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_3 in range(bpb_3) :                           # loop through the items in the rhythm list
        sb_3 = rhythmr0_3[a_3]                          # sb is current item in the rhythm list
        subeat_3 = beat_3/len(sb_3)                     # subeat is the number of sub-beats in the beat
        for b_3 in range(len(sb_3)) :                   # loop through the items in the beat string
            if sb_3[b_3].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_3[b_3])                   # get ascii number of the character
                if sb_3[b_3].isdigit() :                # check if character is numeric
                    amp_3 = (asky-47)                   # assign amplitude
                elif sb_3[b_3].isupper() :              # check if character is uppercase
                    amp_3 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_3 = (asky-60)                   # assign amplitude
            elif sb_3[b_3] == &apos;-&apos; : amp_3 = 0           # character for amp = 0                         
            elif sb_3[b_3] == &apos;&gt;&apos; : amp_3 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_3 = blueDuration + 1           # set notetime_3 &gt; blueduration
                scoreText_3 = &apos;&apos;                        # clear scoreText_3
            if notetime_3 &gt;= blueDuration : break       # break out of the loop
	    if amp_3 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_3 = durlist_3[c_3]			# get duration from durlist
		amp_3 = amp_3-62			# move amp value to correct dbfs range (max=1)
		note_3 = notelist_3[c_3]		# get note from notelist
	        sp_3 = splist_3[c_3]			# get subpatch from splist
		pana_3 = panalist_3[c_3]		# get pana from panalist
		panb_3 = panblist_3[c_3]		# get panb from panblist
		nvat_3 = nvatlist_3[c_3]		# get nvat from nvatlist
		nvac_3 = nvaclist_3[c_3]		# get nvac from nvatlist
		nvpa_3 = nvpalist_3[c_3]		# get nvpa from nvpalist
		nvta_3 = nvtalist_3[c_3]		# get nvta from nvtalist
		nvxa_3 = nvxalist_3[c_3]		# get nvxa from nvxalist
		nvpb_3 = nvpblist_3[c_3]		# get nvpb from nvpblist
		nvxb_3 = nvxblist_3[c_3]		# get nvxb from nvxblist
		nvpc_3 = nvpclist_3[c_3]		# get nvpc from nvpclist
		nvtc_3 = nvtclist_3[c_3]		# get nvtc from nvtclist
		nvxc_3 = nvxclist_3[c_3]		# get nvxc from nvxclist
		mat_3 = matlist_3[c_3]			# get mat from matlist
		mac_3 = maclist_3[c_3]			# get mac from maclist
		mpa_3 = mpalist_3[c_3]			# get mpa from mpalist
		mta_3 = mtalist_3[c_3]			# get mta from mtalist
		mxa_3 = mxalist_3[c_3]			# get mxa from mxalist
		mpb_3 = mpblist_3[c_3]			# get mpb from mpblist
		mxb_3 = mxblist_3[c_3]			# get mxb from mxblist
		mpc_3 = mpclist_3[c_3]			# get mpc from mpclist
		mtc_3 = mtclist_3[c_3]			# get mtc from mtclist
		mxc_3 = mxclist_3[c_3]			# get mxc from mxclist
		bnda_3 = bndalist_3[c_3]		# get bnda from bndalist
		bndb_3 = bndblist_3[c_3]		# get bndb from bndblist
		bndc_3 = bndclist_3[c_3]		# get bndc from bndclist
		bndt_3 = bndtlist_3[c_3]		# get bndt from bndtlist		
		bndu_3 = bndulist_3[c_3]		# get bndu from bndulist		
		bndv_3 = bndvlist_3[c_3]		# get bndv from bndvlist		
                c_3 = c_3 + 1
                scoreText_3 += &quot;i2 &quot;+str(notetime_3-nvat_3)+&quot; &quot;+str(dur_3)+&quot; &quot;+str(amp_3)+&quot; &quot;+str(note_3)+&quot; &quot;+str(sp_3)+&quot; &quot;+str(pana_3)+&quot; &quot;+str(panb_3)+&quot; &quot;+str(nvat_3)+&quot; &quot;+str(nvac_3)+&quot; &quot;+str(nvpa_3)+&quot; &quot;+str(nvta_3)+&quot; &quot;+str(nvxa_3)+&quot; &quot;+str(nvpb_3)+&quot; &quot;+str(nvxb_3)+&quot; &quot;+str(nvpc_3)+&quot; &quot;+str(nvtc_3)+&quot; &quot;+str(nvxc_3)+&quot; &quot;+str(mat_3)+&quot; &quot;+str(mac_3)+&quot; &quot;+str(mpa_3)+&quot; &quot;+str(mta_3)+&quot; &quot;+str(mxa_3)+&quot; &quot;+str(mpb_3)+&quot; &quot;+str(mxb_3)+&quot; &quot;+str(mpc_3)+&quot; &quot;+str(mtc_3)+&quot; &quot;+str(mxc_3)+&quot; &quot;+str(bnda_3)+&quot; &quot;+str(bndb_3)+&quot; &quot;+str(bndc_3)+&quot; &quot;+str(bndt_3)+&quot; &quot;+str(bndu_3)+&quot; &quot;+str(bndv_3)+&quot; \n&quot;
            notetime_3 = notetime_3 + subeat_3                      # increment notetime by subeat time value
    i_3 = i_3 + 1
    c_3 = 0
score = scoreText_3
</pythonCode>
        </soundObject>
        <soundObject type='blue.soundObject.PythonObject' onLoadProcessable='false'>
          <subjectiveDuration>5.0</subjectiveDuration>
          <startTime>141.0</startTime>
          <name>Ringer_11c</name>
          <backgroundColor>-6710785</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <pythonCode># Ringer_3 - 3h6TET
scoreText_3 = &quot;&quot;                              	# scoreText_3 is cleared
bart_3 = 5.0                                    # duration of bar in seconds ** THIS NUMBER SHOULD BE AN INTEGER EXPRESSED AS FLOATING POINT **
rhythmr0_3 = [&apos;TSRQPRQPONPONML&apos;,&apos;f&apos;,&apos;-&apos;]	# rhythm
bpb_3 = len(rhythmr0_3)                         # beats per bar
beat_3 = bart_3/bpb_3                           # time of beat in seconds
notetime_3 = 0                                  # set intitial note start time
durlist_3 = [.11,.11,.11,.11,.11,.11,.11,.11,.11,.11,.11,.11,.11,.11,.11,3.33]		# note duration list
notelist_3 = [56,55,54,53,52,55,54,53,52,51,54,53,52,51,50,42]			# note list
splist_3 = [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6]				# subpatch list
panalist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]		# pana list
panblist_3 = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0]		# panb list
nvatlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]		# nvat list
nvaclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]				# nvac list
nvpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]				# nvpa list
nvtalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]		# nvta list
nvxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxa list
nvpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpb list
nvxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# nvxb list
nvpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# nvpc list
nvtclist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,3.32]		# nvtc list
nvxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,1.5]			# nvxc list
matlist_3 = [.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01,.01]	# mat list
maclist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mac list
mpalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpa list
mtalist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1]		# mta list
mxalist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxa list
mpblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpb list
mxblist_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			# mxb list
mpclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# mpc list
mtclist_3 = [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,3.32]		# mtc list
mxclist_3 = [-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,1.5]	# mxc list
bndalist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bnda list
bndblist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndb list
bndclist_3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]			# bndc list
bndtlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndt list
bndulist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndu list
bndvlist_3 = [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5]			# bndv list
i_3 = 0						# loop iteration counter
c_3 = 0						# note iteration counter
while i_3 &lt; 1 :                               	# loop until end of soundObject
                                    	# ****** Rhythm Parser ******
    for a_3 in range(bpb_3) :                           # loop through the items in the rhythm list
        sb_3 = rhythmr0_3[a_3]                          # sb is current item in the rhythm list
        subeat_3 = beat_3/len(sb_3)                     # subeat is the number of sub-beats in the beat
        for b_3 in range(len(sb_3)) :                   # loop through the items in the beat string
            if sb_3[b_3].isalnum() :                    # check if character is alphanumeric
                asky = ord(sb_3[b_3])                   # get ascii number of the character
                if sb_3[b_3].isdigit() :                # check if character is numeric
                    amp_3 = (asky-47)                   # assign amplitude
                elif sb_3[b_3].isupper() :              # check if character is uppercase
                    amp_3 = (asky-54)                   # assign amplitude
                else :                                  # else character must be lowercase
                    amp_3 = (asky-60)                   # assign amplitude
            elif sb_3[b_3] == &apos;-&apos; : amp_3 = 0           # character for amp = 0                         
            elif sb_3[b_3] == &apos;&gt;&apos; : amp_3 = 63          # character for amp = 1
            else :                                      # error trap for invalid rhythym list
                alert(&apos;Invalid rhythm list!&apos;)           # show error alert 
                notetime_3 = blueDuration + 1           # set notetime_3 &gt; blueduration
                scoreText_3 = &apos;&apos;                        # clear scoreText_3
            if notetime_3 &gt;= blueDuration : break       # break out of the loop
	    if amp_3 &gt; 0 :				# if note exists (amplitude &gt; 0)
		dur_3 = durlist_3[c_3]			# get duration from durlist
		amp_3 = amp_3-62			# move amp value to correct dbfs range (max=1)
		note_3 = notelist_3[c_3]		# get note from notelist
	        sp_3 = splist_3[c_3]			# get subpatch from splist
		pana_3 = panalist_3[c_3]		# get pana from panalist
		panb_3 = panblist_3[c_3]		# get panb from panblist
		nvat_3 = nvatlist_3[c_3]		# get nvat from nvatlist
		nvac_3 = nvaclist_3[c_3]		# get nvac from nvatlist
		nvpa_3 = nvpalist_3[c_3]		# get nvpa from nvpalist
		nvta_3 = nvtalist_3[c_3]		# get nvta from nvtalist
		nvxa_3 = nvxalist_3[c_3]		# get nvxa from nvxalist
		nvpb_3 = nvpblist_3[c_3]		# get nvpb from nvpblist
		nvxb_3 = nvxblist_3[c_3]		# get nvxb from nvxblist
		nvpc_3 = nvpclist_3[c_3]		# get nvpc from nvpclist
		nvtc_3 = nvtclist_3[c_3]		# get nvtc from nvtclist
		nvxc_3 = nvxclist_3[c_3]		# get nvxc from nvxclist
		mat_3 = matlist_3[c_3]			# get mat from matlist
		mac_3 = maclist_3[c_3]			# get mac from maclist
		mpa_3 = mpalist_3[c_3]			# get mpa from mpalist
		mta_3 = mtalist_3[c_3]			# get mta from mtalist
		mxa_3 = mxalist_3[c_3]			# get mxa from mxalist
		mpb_3 = mpblist_3[c_3]			# get mpb from mpblist
		mxb_3 = mxblist_3[c_3]			# get mxb from mxblist
		mpc_3 = mpclist_3[c_3]			# get mpc from mpclist
		mtc_3 = mtclist_3[c_3]			# get mtc from mtclist
		mxc_3 = mxclist_3[c_3]			# get mxc from mxclist
		bnda_3 = bndalist_3[c_3]		# get bnda from bndalist
		bndb_3 = bndblist_3[c_3]		# get bndb from bndblist
		bndc_3 = bndclist_3[c_3]		# get bndc from bndclist
		bndt_3 = bndtlist_3[c_3]		# get bndt from bndtlist		
		bndu_3 = bndulist_3[c_3]		# get bndu from bndulist		
		bndv_3 = bndvlist_3[c_3]		# get bndv from bndvlist		
                c_3 = c_3 + 1
                scoreText_3 += &quot;i2 &quot;+str(notetime_3-nvat_3)+&quot; &quot;+str(dur_3)+&quot; &quot;+str(amp_3)+&quot; &quot;+str(note_3)+&quot; &quot;+str(sp_3)+&quot; &quot;+str(pana_3)+&quot; &quot;+str(panb_3)+&quot; &quot;+str(nvat_3)+&quot; &quot;+str(nvac_3)+&quot; &quot;+str(nvpa_3)+&quot; &quot;+str(nvta_3)+&quot; &quot;+str(nvxa_3)+&quot; &quot;+str(nvpb_3)+&quot; &quot;+str(nvxb_3)+&quot; &quot;+str(nvpc_3)+&quot; &quot;+str(nvtc_3)+&quot; &quot;+str(nvxc_3)+&quot; &quot;+str(mat_3)+&quot; &quot;+str(mac_3)+&quot; &quot;+str(mpa_3)+&quot; &quot;+str(mta_3)+&quot; &quot;+str(mxa_3)+&quot; &quot;+str(mpb_3)+&quot; &quot;+str(mxb_3)+&quot; &quot;+str(mpc_3)+&quot; &quot;+str(mtc_3)+&quot; &quot;+str(mxc_3)+&quot; &quot;+str(bnda_3)+&quot; &quot;+str(bndb_3)+&quot; &quot;+str(bndc_3)+&quot; &quot;+str(bndt_3)+&quot; &quot;+str(bndu_3)+&quot; &quot;+str(bndv_3)+&quot; \n&quot;
            notetime_3 = notetime_3 + subeat_3                      # increment notetime by subeat time value
    i_3 = i_3 + 1
    c_3 = 0
score = scoreText_3
</pythonCode>
        </soundObject>
        <parameterId>-1444023782</parameterId>
      </soundLayer>
    </soundObject>
  </score>
  <scratchPadData>
    <isWordWrapEnabled>true</isWordWrapEnabled>
    <scratchText/>
  </scratchPadData>
  <noteProcessorChainMap/>
  <renderStartTime>0.0</renderStartTime>
  <renderEndTime>-1.0</renderEndTime>
  <markersList/>
  <loopRendering>false</loopRendering>
  <midiInputProcessor>
    <keyMapping>PCH</keyMapping>
    <velMapping>MIDI</velMapping>
    <pitchConstant></pitchConstant>
    <ampConstant></ampConstant>
    <scale>
      <scaleName>12TET</scaleName>
      <baseFrequency>261.62558</baseFrequency>
      <octave>2.0</octave>
      <ratios>
        <ratio>1.0</ratio>
        <ratio>1.0594631</ratio>
        <ratio>1.122462</ratio>
        <ratio>1.1892071</ratio>
        <ratio>1.2599211</ratio>
        <ratio>1.3348398</ratio>
        <ratio>1.4142135</ratio>
        <ratio>1.4983071</ratio>
        <ratio>1.587401</ratio>
        <ratio>1.6817929</ratio>
        <ratio>1.7817974</ratio>
        <ratio>1.8877486</ratio>
      </ratios>
    </scale>
  </midiInputProcessor>
</blueData>